{
  "version": 3,
  "sources": ["yaml-loader:/home/mdusome/processing-vscode/src/documentation-data.yml", "src/documentation.ts", "src/index.ts", "src/config.ts", "src/validateCommand.ts", "src/utils/search.ts", "src/utils/index.ts", "src/commands/search.ts", "src/commands/run.ts", "src/commands/index.ts", "src/diagnostics.ts", "src/statusBar.ts"],
  "sourcesContent": ["module.exports = {\"Array\":{\"description\":\"An array is a list of data. It is possible to have an array of any type of data. Each piece of data in an array is identified by an index number representing its position in the array. The first element in the array is `[0]`, the second element is `[1]`, and so on. Arrays are similar to objects, so they must be created with the keyword `new`.\\n\\nEach array has a variable `length`, which is an integer value for the total number of elements in the array. Note that since index numbering begins at zero (not 1), the last value in an array with a `length` of 5 should be referenced as `array[4]` (that is, the `length` minus 1), not `array[5]`, which would trigger an error.\\n\\nAnother common source of confusion is the difference between using `length` to get the size of an array and `length()` to get the size of a String. Notice the presence of parentheses when working with Strings. (`array.length` is a variable, while `String.length()` is a method specific to the String class.)\",\"docUrl\":\"https://processing.org/reference/Array.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{\"datatype\":\"any primitive or compound datatype, including user-defined classes\",\"element\":\"int: must not exceed the length of the array minus 1\",\"value\":\"data to assign to the array element; must be the same datatype as the array\",\"var\":\"any valid variable name\"},\"type\":\"class\"},\"ArrayList\":{\"description\":\"An `ArrayList` stores a variable number of objects. This is similar to making an array of objects, but with an `ArrayList`, items can be easily added and removed from the ArrayList and it is resized dynamically. This can be very convenient, but it's slower than making an array of objects when using many elements.  Note that for resizable lists of integers, floats, and Strings, you can use the Processing classes IntList, FloatList, and StringList.\\n\\nAn ArrayList is a resizable-array implementation of the Java List interface. It has many methods used to control and search its contents. For example, the length of the `ArrayList` is returned by its `size()` method, which is an integer value for the total number of elements in the list. An element is added to an `ArrayList` with the `add()` method and is deleted with the `remove()` method. The `get()` method returns the element at the specified position in the list. (See the above example for context.)\\n\\nFor a list of the numerous `ArrayList`. . .\",\"docUrl\":\"https://processing.org/reference/ArrayList.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{\"Type\":\"Class Name: the data type for the objects to be placed in the ArrayList.\",\"initialCapacity\":\"int: defines the initial capacity of the list; it's empty by default\"},\"syntax\":\"ArrayList<Type>()\\nArrayList<Type>(initialCapacity)\\n\",\"type\":\"class\"},\"FloatDict\":{\"description\":\"A simple class to use a String as a lookup for an float value. String \\\"keys\\\" are associated with floating-point values.\",\"docUrl\":\"https://processing.org/reference/FloatDict.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{},\"syntax\":\"FloatDict()\\nFloatDict(pairs)\\n\",\"type\":\"class\"},\"FloatList\":{\"description\":\"Helper class for a list of floats. Lists are designed to have some of the \\nfeatures of ArrayLists, but to maintain the simplicity and efficiency of\\nworking with arrays. \\n\\nFunctions like sort() and shuffle() always act on the list itself. To get \\na sorted copy, use list.copy().sort().\",\"docUrl\":\"https://processing.org/reference/FloatList.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{},\"syntax\":\"FloatList()\\nFloatList(items)\\n\",\"type\":\"class\"},\"HALF_PI\":{\"description\":\"`HALF_PI` is a mathematical constant with the value 1.5707964. It is half the ratio of the circumference of a circle to its diameter. It is useful in combination with the trigonometric functions `sin()` and `cos()`.\",\"docUrl\":\"https://processing.org/reference/HALF_PI.html\",\"examples\":\"float x = width/2;\\nfloat y = height/2;\\nfloat d = width * 0.8;\\narc(x, y, d, d, 0, QUARTER_PI);\\narc(x, y, d-20, d-20, 0, HALF_PI);\\narc(x, y, d-40, d-40, 0, PI);\\narc(x, y, d-60, d-60, 0, TWO_PI);\\n\",\"name\":null,\"type\":\"const\"},\"HashMap\":{\"description\":\"A `HashMap` stores a collection of objects, each referenced by a key. This is similar to an `Array`, only instead of accessing elements with a numeric index, a `String` is used. (If you are familiar with associative arrays from other languages, this is the same idea.) The above example covers basic use, but there's a more extensive example included with the Processing examples.  In addition, for simple pairings of Strings and integers, Strings and floats, or Strings and Strings, you can now use the simpler IntDict, FloatDict, and StringDict classes.\\n\\nFor a list of the numerous `HashMap` features, please read the Java reference description.\",\"docUrl\":\"https://processing.org/reference/HashMap.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{\"Key\":\"Class Name: the data type for the HashMap's keys\",\"Value\":\"Class Name: the data type for the HashMap's values\",\"initialCapacity\":\"int: defines the initial capacity of the map; the default is 16\",\"loadFactor\":\"float: the load factor for the map; the default is 0.75\",\"m\":\"Map: gives the new HashMap the same mappings as this Map\"},\"syntax\":\"HashMap<Key, Value>()\\nHashMap<Key, Value>(initialCapacity)\\nHashMap<Key, Value>(initialCapacity, loadFactor)\\nHashMap<Key, Value>(m)\\n\",\"type\":\"class\"},\"IntDict\":{\"description\":\"A simple class to use a String as a lookup for an int value. String \\\"keys\\\" are associated with integer values.\",\"docUrl\":\"https://processing.org/reference/IntDict.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{},\"syntax\":\"IntDict()\\nIntDict(pairs)\\n\",\"type\":\"class\"},\"IntList\":{\"description\":\"Helper class for a list of ints. Lists are designed to have some of the \\nfeatures of ArrayLists, but to maintain the simplicity and efficiency of\\nworking with arrays. \\n\\nFunctions like sort() and shuffle() always act on the list itself. To get \\na sorted copy, use list.copy().sort().\",\"docUrl\":\"https://processing.org/reference/IntList.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{},\"syntax\":\"IntList()\\nIntList(items)\\n\",\"type\":\"class\"},\"JSONArray\":{\"description\":\"A `JSONArray` stores an array of JSON objects.  `JSONArray`s can be generated from scratch, dynamically, or using data from an existing file.  JSON can also be output and saved to disk, as in the example above.\",\"docUrl\":\"https://processing.org/reference/JSONArray.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{},\"syntax\":\"JSONArray()\\n\",\"type\":\"class\"},\"JSONObject\":{\"description\":\"A `JSONObject` stores JSON data with multiple name/value pairs.  Values can be numeric, Strings, booleans, other `JSONObject`s or `JSONArray`s, or null.  `JSONObject` and `JSONArray` objects are quite similar and share most of the same methods; the primary difference is that the latter stores an array of JSON objects, while the former represents a single JSON object.\\n\\nJSON can be generated from scratch, dynamically, or using data from an existing file.  JSON can also be output and saved to disk, as in the example above.\",\"docUrl\":\"https://processing.org/reference/JSONObject.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{},\"type\":\"class\"},\"Object\":{\"description\":\"Objects are instances of classes. A class is a grouping of related methods (functions) and fields (variables and constants).\",\"docUrl\":\"https://processing.org/reference/Object.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{\"ClassName\":\"the class from which to create the new object\",\"instanceName\":\"the name for the new object\"},\"type\":\"class\"},\"PFont\":{\"description\":\"PFont is the font class for Processing. To create a font to use with Processing, select \\\"Create Font...\\\" from the Tools menu. This will create a font in the format Processing requires and also adds it to the current sketch's data directory. Processing displays fonts using the .vlw font format, which uses images for each letter, rather than defining them through vector data. The `loadFont()` function constructs a new font and `textFont()` makes a font active. The `list()` method creates a list of the fonts installed on the computer, which is useful information to use with the `createFont()` function for dynamically converting fonts into a format to use with Processing.\\n\\nTo create a new font dynamically, use the `createFont()` function. Do not use the syntax `new PFont()`.\",\"docUrl\":\"https://processing.org/reference/PFont.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{},\"type\":\"class\"},\"PGraphics\":{\"description\":\"Main graphics and rendering context, as well as the base API implementation for processing \\\"core\\\". Use this class if you need to draw into an off-screen graphics buffer. A PGraphics object can be constructed with the `createGraphics()` function. The `beginDraw()` and `endDraw()` methods (see above example) are necessary to set up the buffer and to finalize it. The fields and methods for this class are extensive. For a complete list, visit the developer's reference.\\n\\nTo create a new graphics context, use the `createGraphics()` function. Do not use the syntax `new PGraphics()`.\",\"docUrl\":\"https://processing.org/reference/PGraphics.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{},\"syntax\":\"PGraphics()\\n\",\"type\":\"class\"},\"PI\":{\"description\":\"`PI` is a mathematical constant with the value 3.1415927. It is the ratio of the circumference of a circle to its diameter. It is useful in combination with the trigonometric functions `sin()` and `cos()`.\",\"docUrl\":\"https://processing.org/reference/PI.html\",\"examples\":\"float x = width/2;\\nfloat y = height/2;\\nfloat d = width * 0.8;\\narc(x, y, d, d, 0, QUARTER_PI);\\narc(x, y, d-20, d-20, 0, HALF_PI);\\narc(x, y, d-40, d-40, 0, PI);\\narc(x, y, d-60, d-60, 0, TWO_PI);\\n\",\"name\":null,\"type\":\"const\"},\"PImage\":{\"description\":\"Datatype for storing images. Processing can display `.gif`, `.jpg`, `.tga`, and `.png` images. Images may be displayed in 2D and 3D space. Before an image is used, it must be loaded with the `loadImage()` function. The `PImage` class contains fields for the `width` and `height` of the image, as well as an array called `pixels[]` that contains the values for every pixel in the image. The methods described below allow easy access to the image's pixels and alpha channel and simplify the process of compositing.\\n\\nBefore using the `pixels[]` array, be sure to use the `loadPixels()` method on the image to make sure that the pixel data is properly loaded.\\n\\nTo create a new image, use the `createImage()` function. Do not use the syntax `new PImage()`.\",\"docUrl\":\"https://processing.org/reference/PImage.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{},\"syntax\":\"PImage(width, height, format, factor)\\n\",\"type\":\"class\"},\"PShader\":{\"description\":\"This class encapsulates a GLSL shader program, including a vertex and a fragment shader. It's compatible with the P2D and P3D renderers, but not with the default renderer. Use the `loadShader()` function to load your shader code. [Note: It's strongly encouraged to use `loadShader()` to create a PShader object, rather than calling the PShader constructor manually.]\",\"docUrl\":\"https://processing.org/reference/PShader.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{\"fragFilename\":\"String: name of the fragment shader\",\"fragURL\":\"URL: network location of the fragment shader\",\"parent\":\"PApplet: the parent program\",\"vertFilename\":\"String: name of the vertex shader\",\"vertURL\":\"URL: network location of the vertex shader\"},\"syntax\":\"PShader()\\nPShader(parent)\\nPShader(parent, vertFilename, fragFilename)\\nPShader(parent, vertURL, fragURL)\\nPShader(parent, vertSource, fragSource)\\n\",\"type\":\"class\"},\"PShape\":{\"description\":\"Datatype for storing shapes. Before a shape is used, it must be loaded with the `loadShape()` or created with the `createShape()`. The `shape()` function is used to draw the shape to the display window. Processing can currently load and display SVG (Scalable Vector Graphics) and OBJ shapes. OBJ files can only be opened using the `P3D` renderer. The `loadShape()` function supports SVG files created with Inkscape and Adobe Illustrator. It is not a full SVG implementation, but offers some straightforward support for handling vector data.\\n\\nThe `PShape` object contains a group of methods that can operate on the shape data. Some of the methods are listed below, but the full list used for creating and modifying shapes is available here in the Processing Javadoc.\\n\\nTo create a new shape, use the `createShape()` function. Do not use the syntax `new PShape()`.\",\"docUrl\":\"https://processing.org/reference/PShape.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{},\"syntax\":\"PShape(g, kind, params)\\n\",\"type\":\"class\"},\"PVector\":{\"description\":\"A class to describe a two or three dimensional vector, specifically a Euclidean (also known as geometric) vector.   A vector is an entity that has both magnitude and direction.  The datatype, however, stores the components of the vector (x,y for 2D, and x,y,z for 3D).  The magnitude and direction can be accessed via the methods `mag()` and `heading()`.\\n\\nIn many of the Processing examples, you will see `PVector` used to describe a position, velocity, or acceleration.  For example, if you consider a rectangle moving across the screen, at any given instant it has a position (a vector that points from the origin to its location), a velocity (the rate at which the object's position changes per time unit, expressed as a vector), and acceleration (the rate at which the object's velocity changes per time unit, expressed as a vector). Since vectors represent groupings of values, we cannot simply use traditional addition/multiplication/etc. Instead, we'll need to do some \\\"vector\\\" math, which is . . .\",\"docUrl\":\"https://processing.org/reference/PVector.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{\"x\":\"float: the x coordinate.\",\"y\":\"float: the y coordinate.\",\"z\":\"float: the z coordinate.\"},\"syntax\":\"PVector()\\nPVector(x, y, z)\\nPVector(x, y)\\n\",\"type\":\"class\"},\"QUARTER_PI\":{\"description\":\"`QUARTER_PI` is a mathematical constant with the value 0.7853982. It is one quarter the ratio of the circumference of a circle to its diameter. It is useful in combination with the trigonometric functions `sin()` and `cos()`.\",\"docUrl\":\"https://processing.org/reference/QUARTER_PI.html\",\"examples\":\"float x = width/2;\\nfloat y = height/2;\\nfloat d = width * 0.8;\\narc(x, y, d, d, 0, QUARTER_PI);\\narc(x, y, d-20, d-20, 0, HALF_PI);\\narc(x, y, d-40, d-40, 0, PI);\\narc(x, y, d-60, d-60, 0, TWO_PI);\\n\",\"name\":null,\"type\":\"const\"},\"String\":{\"description\":\"A string is a sequence of characters. The class `String` includes methods for examining individual characters, comparing strings, searching strings, extracting parts of strings, and for converting an entire string uppercase and lowercase. Strings are always defined inside double quotes (`\\\"Abc\\\"`), and characters are always defined inside single quotes (`'A'`).\\n\\nTo compare the contents of two Strings, use the `equals()` method, as in `if (a.equals(b))`, instead of `if (a == b)`. A String is an Object, so comparing them with the `==` operator only compares whether both Strings are stored in the same memory location. Using the `equals()` method will ensure that the actual contents are compared. (The troubleshooting reference has a longer explanation.) \\n\\nBecause a String is defined between double quotation marks, to include such marks within the String itself you must use the `\\\\` (backslash) character.  (See the third example above.)  This is known as an escape sequence. Other escape sequen. . .\",\"docUrl\":\"https://processing.org/reference/String.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{\"data\":\"byte[] or char[]: either an array of bytes to be decoded into characters, or an array of characters to be combined into a string\",\"length\":\"int: number of characters\",\"offset\":\"int: index of the first character\"},\"syntax\":\"String(data)\\nString(data, offset, length)\\n\",\"type\":\"class\"},\"StringDict\":{\"description\":\"A simple class to use a String as a lookup for an String value. String \\\"keys\\\" are associated with String values.\",\"docUrl\":\"https://processing.org/reference/StringDict.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{},\"syntax\":\"StringDict()\\nStringDict(pairs)\\nStringDict(row)\\n\",\"type\":\"class\"},\"StringList\":{\"description\":\"Helper class for a list of Strings. Lists are designed to have some of the \\nfeatures of ArrayLists, but to maintain the simplicity and efficiency of\\nworking with arrays.\\n\\nFunctions like sort() and shuffle() always act on the list itself. To get \\na sorted copy, use list.copy().sort().\",\"docUrl\":\"https://processing.org/reference/StringList.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{},\"syntax\":\"StringList()\\n\",\"type\":\"class\"},\"TAU\":{\"description\":\"`TAU` is a mathematical constant with the value 6.2831855. It is the circle constant relating the circumference of a circle to its linear dimension, the ratio of the circumference of a circle to its radius. It is useful in combination with trigonometric functions such as `sin()` and `cos()`.\",\"docUrl\":\"https://processing.org/reference/TAU.html\",\"examples\":\"float x = width/2;\\nfloat y = height/2;\\nfloat d = width * 0.8;\\narc(x, y, d, d, 0, QUARTER_PI);\\narc(x, y, d-20, d-20, 0, HALF_PI);\\narc(x, y, d-40, d-40, 0, PI);\\narc(x, y, d-60, d-60, 0, TAU);\\n\",\"name\":null,\"type\":\"const\"},\"TWO_PI\":{\"description\":\"`TWO_PI` is a mathematical constant with the value 6.2831855. It is twice the ratio of the circumference of a circle to its diameter. It is useful in combination with the trigonometric functions `sin()` and `cos()`.\",\"docUrl\":\"https://processing.org/reference/TWO_PI.html\",\"examples\":\"float x = width/2;\\nfloat y = height/2;\\nfloat d = width * 0.8;\\narc(x, y, d, d, 0, QUARTER_PI);\\narc(x, y, d-20, d-20, 0, HALF_PI);\\narc(x, y, d-40, d-40, 0, PI);\\narc(x, y, d-60, d-60, 0, TWO_PI);\\n\",\"name\":null,\"type\":\"const\"},\"Table\":{\"description\":\"`Table` objects store data with multiple rows and columns, much like in a traditional spreadsheet.  Tables can be generated from scratch, dynamically, or using data from an existing file.  Tables can also be output and saved to disk, as in the example above.\\n\\nAdditional `Table` methods are documented in the Processing Table Javadoc.\",\"docUrl\":\"https://processing.org/reference/Table.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{},\"syntax\":\"Table()\\nTable(rows)\\n\",\"type\":\"class\"},\"TableRow\":{\"description\":\"A `TableRow` object represents a single row of data values, stored in columns, from a table.\\n\\nAdditional `TableRow` methods are documented in the Processing Data Javadoc.\",\"docUrl\":\"https://processing.org/reference/TableRow.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{},\"type\":\"class\"},\"XML\":{\"description\":\"`XML` is a representation of an XML object, able to parse XML code. Use `loadXML()` to load external XML files and create `XML` objects.\\n\\nOnly files encoded as UTF-8 (or plain ASCII) are parsed properly; the encoding parameter inside XML files is ignored.\",\"docUrl\":\"https://processing.org/reference/XML.html\",\"fields\":{},\"methods\":{},\"name\":null,\"parameters\":{\"name\":\"String: creates a node with this name\"},\"syntax\":\"XML(name)\\n\",\"type\":\"class\"},\"abs\":{\"description\":\"Calculates the absolute value (magnitude) of a number. The absolute value of a number is always positive.\",\"docUrl\":\"https://processing.org/reference/abs_.html\",\"name\":null,\"parameters\":{\"n\":\"int, or float: number to compute\"},\"returns\":\"float or int\",\"syntax\":\"abs(n)\",\"type\":\"function\"},\"acos\":{\"description\":\"The inverse of `cos()`, returns the arc cosine of a value. This function expects the values in the range of -1 to 1 and values are returned in the range `0` to `PI (3.1415927)`.\",\"docUrl\":\"https://processing.org/reference/acos_.html\",\"name\":null,\"parameters\":{\"value\":\"float: the value whose arc cosine is to be returned\"},\"returns\":\"float\",\"syntax\":\"acos(value)\",\"type\":\"function\"},\"alpha\":{\"description\":\"Extracts the alpha value from a color.\",\"docUrl\":\"https://processing.org/reference/alpha_.html\",\"name\":null,\"parameters\":{\"rgb\":\"int: any value of the color datatype\"},\"returns\":\"float\",\"syntax\":\"alpha(rgb)\",\"type\":\"function\"},\"ambient\":{\"description\":\"Sets the ambient reflectance for shapes drawn to the screen. This is combined with the ambient light component of environment. The color components set through the parameters define the reflectance. For example in the default color mode, setting v1=255, v2=127, v3=0, would cause all the red light to reflect and half of the green light to reflect. Used in combination with `emissive()`, `specular()`, and `shininess()` in setting the material properties of shapes.\",\"docUrl\":\"https://processing.org/reference/ambient_.html\",\"name\":null,\"parameters\":{\"gray\":\"float: number specifying value between white and black\",\"rgb\":\"int: any value of the color datatype\",\"v1\":\"float: red or hue value (depending on current color mode)\",\"v2\":\"float: green or saturation value (depending on current color mode)\",\"v3\":\"float: blue or brightness value (depending on current color mode)\"},\"returns\":\"void\",\"syntax\":\"ambient(rgb)\\nambient(gray)\\nambient(v1, v2, v3)\",\"type\":\"function\"},\"ambientLight\":{\"description\":\"Adds an ambient light. Ambient light doesn't come from a specific direction, the rays of light have bounced around so much that objects are evenly lit from all sides. Ambient lights are almost always used in combination with other types of lights. Lights need to be included in the `draw()` to remain persistent in a looping program. Placing them in the `setup()` of a looping program will cause them to only have an effect the first time through the loop. The `v1`, `v2`, and `v3` parameters are interpreted as either RGB or HSB values, depending on the current color mode.\",\"docUrl\":\"https://processing.org/reference/ambientLight_.html\",\"name\":null,\"parameters\":{\"v1\":\"float: red or hue value (depending on current color mode)\",\"v2\":\"float: green or saturation value (depending on current color mode)\",\"v3\":\"float: blue or brightness value (depending on current color mode)\",\"x\":\"float: x-coordinate of the light\",\"y\":\"float: y-coordinate of the light\",\"z\":\"float: z-coordinate of the light\"},\"returns\":\"void\",\"syntax\":\"ambientLight(v1, v2, v3)\\nambientLight(v1, v2, v3, x, y, z)\",\"type\":\"function\"},\"append\":{\"description\":\"Expands a one-dimensional array by one element and adds data to the new position. The datatype of the `element` parameter must be the same as the datatype of the array.\\n\\nWhen using an array of objects, the data returned from the function must be cast to the object array's data type. For example: SomeClass[] items = (SomeClass[]) append(originalArray, element)\",\"docUrl\":\"https://processing.org/reference/append_.html\",\"name\":null,\"parameters\":{\"array\":\"Object, String[], float[], int[], char[], or byte[]: array to append\",\"value\":\"Object, String, float, int, char, or byte: new data for the array\"},\"returns\":\"byte[], char[], int[], float[], String[], or Object\",\"syntax\":\"append(array, value)\",\"type\":\"function\"},\"applyMatrix\":{\"description\":\"Multiplies the current matrix by the one specified through the parameters. This is very slow because it will try to calculate the inverse of the transform, so avoid it whenever possible. The equivalent function in OpenGL is glMultMatrix().\",\"docUrl\":\"https://processing.org/reference/applyMatrix_.html\",\"name\":null,\"parameters\":{\"n00\":\"float: numbers which define the 4x4 matrix to be multiplied\",\"n01\":\"float: numbers which define the 4x4 matrix to be multiplied\",\"n02\":\"float: numbers which define the 4x4 matrix to be multiplied\",\"n03\":\"float: numbers which define the 4x4 matrix to be multiplied\",\"n10\":\"float: numbers which define the 4x4 matrix to be multiplied\",\"n11\":\"float: numbers which define the 4x4 matrix to be multiplied\",\"n12\":\"float: numbers which define the 4x4 matrix to be multiplied\",\"n13\":\"float: numbers which define the 4x4 matrix to be multiplied\",\"n20\":\"float: numbers which define the 4x4 matrix to be multiplied\",\"n21\":\"float: numbers which define the 4x4 matrix to be multiplied\",\"n22\":\"float: numbers which define the 4x4 matrix to be multiplied\",\"n23\":\"float: numbers which define the 4x4 matrix to be multiplied\",\"n30\":\"float: numbers which define the 4x4 matrix to be multiplied\",\"n31\":\"float: numbers which define the 4x4 matrix to be multiplied\",\"n32\":\"float: numbers which define the 4x4 matrix to be multiplied\",\"n33\":\"float: numbers which define the 4x4 matrix to be multiplied\"},\"returns\":\"void\",\"syntax\":\"applyMatrix(source)\\napplyMatrix(n00, n01, n02, n10, n11, n12)\\napplyMatrix(n00, n01, n02, n03, n10, n11, n12, n13, n20, n21, n22, n23, n30, n31, n32, n33)\",\"type\":\"function\"},\"arc\":{\"description\":\"Draws an arc to the screen. Arcs are drawn along the outer edge of an ellipse defined by the `a`, `b`, `c`, and `d` parameters. The origin of the arc's ellipse may be changed with the `ellipseMode()` function. Use the `start` and `stop` parameters to specify the angles (in radians) at which to draw the arc. The start/stop values must be in clockwise order.\\n\\nThere are three ways to draw an arc; the rendering technique used is defined by the optional seventh parameter. The three options, depicted in the above examples, are PIE, OPEN, and CHORD. The default mode is the OPEN stroke with a PIE fill.\\n\\nIn some cases, the `arc()` function isn't accurate enough for smooth drawing. For example, the shape may jitter on screen when rotating slowly. If you're having an issue with how arcs are rendered, you'll need to draw the arc yourself with `beginShape()`/`endShape()` or a `PShape`.\",\"docUrl\":\"https://processing.org/reference/arc_.html\",\"name\":null,\"parameters\":{\"a\":\"float: x-coordinate of the arc's ellipse\",\"b\":\"float: y-coordinate of the arc's ellipse\",\"c\":\"float: width of the arc's ellipse by default\",\"d\":\"float: height of the arc's ellipse by default\",\"start\":\"float: angle to start the arc, specified in radians\",\"stop\":\"float: angle to stop the arc, specified in radians\"},\"returns\":\"void\",\"syntax\":\"arc(a, b, c, d, start, stop)\\narc(a, b, c, d, start, stop, mode)\",\"type\":\"function\"},\"arrayCopy\":{\"description\":\"Copies an array (or part of an array) to another array. The `src` array is copied to the `dst` array, beginning at the position specified by `srcPosition` and into the position specified by `dstPosition`. The number of elements to copy is determined by `length`. Note that copying values overwrites existing values in the destination array. To append values instead of overwriting them, use `concat()`.\\n\\nThe simplified version with only two arguments \u2014 `arrayCopy(src, dst)` \u2014 copies an entire array to another of the same size. It is equivalent to `arrayCopy(src, 0, dst, 0, src.length)`.\\n\\nUsing this function is far more efficient for copying array data than iterating through a `for()` loop and copying each element individually. This function only copies references, which means that for most purposes it only copies one-dimensional arrays (a single set of brackets). If used with a two (or three or more) dimensional array, it will only copy the references at the first level, because a two dime. . .\",\"docUrl\":\"https://processing.org/reference/arrayCopy_.html\",\"name\":null,\"parameters\":{\"dst\":\"Object: the destination array of the same data type as the source array\",\"dstPosition\":\"int: starting position in the destination array\",\"length\":\"int: number of array elements to be copied\",\"src\":\"Object: the source array\",\"srcPosition\":\"int: starting position in the source array\"},\"returns\":\"void\",\"syntax\":\"arrayCopy(src, srcPosition, dst, dstPosition, length)\\narrayCopy(src, dst, length)\\narrayCopy(src, dst)\",\"type\":\"function\"},\"asin\":{\"description\":\"The inverse of `sin()`, returns the arc sine of a value. This function expects the values in the range of -1 to 1 and values are returned in the range `-PI/2` to `PI/2`.\",\"docUrl\":\"https://processing.org/reference/asin_.html\",\"name\":null,\"parameters\":{\"value\":\"float: the value whose arc sine is to be returned\"},\"returns\":\"float\",\"syntax\":\"asin(value)\",\"type\":\"function\"},\"atan\":{\"description\":\"The inverse of `tan()`, returns the arc tangent of a value. This function expects the values in the range of -Infinity to Infinity (exclusive) and values are returned in the range `-PI/2` to `PI/2 `.\",\"docUrl\":\"https://processing.org/reference/atan_.html\",\"name\":null,\"parameters\":{\"value\":\"float: -Infinity to Infinity (exclusive)\"},\"returns\":\"float\",\"syntax\":\"atan(value)\",\"type\":\"function\"},\"background\":{\"description\":\"The `background()` function sets the color used for the background of the Processing window. The default background is light gray. This function is typically used within `draw()` to clear the display window at the beginning of each frame, but it can be used inside `setup()` to set the background on the first frame of animation or if the backgound need only be set once.\\n \\nAn image can also be used as the background for a sketch, although the image's width and height must match that of the sketch window. Images used with `background()` will ignore the current `tint()` setting. To resize an image to the size of the sketch window, use image.resize(width, height).\\n \\nIt is not possible to use the transparency `alpha` parameter with background colors on the main drawing surface. It can only be used along with a `PGraphics` object and `createGraphics()`.\",\"docUrl\":\"https://processing.org/reference/background_.html\",\"name\":null,\"parameters\":{\"alpha\":\"float: opacity of the background\",\"gray\":\"float: specifies a value between white and black\",\"image\":\"PImage: PImage to set as background (must be same size as the sketch window)\",\"rgb\":\"int: any value of the color datatype\",\"v1\":\"float: red or hue value (depending on the current color mode)\",\"v2\":\"float: green or saturation value (depending on the current color mode)\",\"v3\":\"float: blue or brightness value (depending on the current color mode)\"},\"returns\":\"void\",\"syntax\":\"background(rgb)\\nbackground(rgb, alpha)\\nbackground(gray)\\nbackground(gray, alpha)\\nbackground(v1, v2, v3)\\nbackground(v1, v2, v3, alpha)\\nbackground(image)\",\"type\":\"function\"},\"beginCamera\":{\"description\":\"The `beginCamera()` and `endCamera()` functions enable advanced customization of the camera space. The functions are useful if you want to more control over camera movement, however for most users, the `camera()` function will be sufficient.The camera functions will replace any transformations (such as `rotate()` or `translate()`) that occur before them in `draw()`, but they will not automatically replace the camera transform itself. For this reason, camera functions should be placed at the beginning of `draw()` (so that transformations happen afterwards), and the `camera()` function can be used after `beginCamera()` if you want to reset the camera before applying transformations.This function sets the matrix mode to the camera matrix so calls such as `translate()`, `rotate()`, applyMatrix() and resetMatrix() affect the camera. `beginCamera()` should always be used with a following `endCamera()` and pairs of `beginCamera()` and `endCamera()` cannot be nested.\",\"docUrl\":\"https://processing.org/reference/beginCamera_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"beginCamera()\",\"type\":\"function\"},\"beginContour\":{\"description\":\"Use the `beginContour()` and `endContour()` function to create negative shapes within shapes such as the center of the letter 'O'. `beginContour()` begins recording vertices for the shape and `endContour()` stops recording. The vertices that define a negative shape must \\\"wind\\\" in the opposite direction from the exterior shape. First draw vertices for the exterior shape in clockwise order, then for internal shapes, draw vertices counterclockwise.\\n\\nThese functions can only be used within a `beginShape()`/`endShape()` pair and transformations such as `translate()`, `rotate()`, and `scale()` do not work within a `beginContour()`/`endContour()` pair. It is also not possible to use other shapes, such as `ellipse()` or `rect()` within.\",\"docUrl\":\"https://processing.org/reference/beginContour_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"beginContour()\",\"type\":\"function\"},\"beginRaw\":{\"description\":\"To create vectors from 3D data, use the `beginRaw()` and `endRaw()` commands. These commands will grab the shape data just before it is rendered to the screen. At this stage, your entire scene is nothing but a long list of individual lines and triangles. This means that a shape created with `sphere()` function will be made up of hundreds of triangles, rather than a single object. Or that a multi-segment line shape (such as a curve) will be rendered as individual segments.\\n\\nWhen using `beginRaw()` and `endRaw()`, it's possible to write to either a 2D or 3D renderer. For instance, `beginRaw()` with the PDF library will write the geometry as flattened triangles and lines, even if recording from the `P3D` renderer. \\n\\nIf you want a background to show up in your files, use `rect(0, 0, width, height)` after setting the `fill()` to the background color. Otherwise the background will not be rendered to the file because the background is not shape.\\n\\nUsing `hint(ENABLE_DEPTH_SORT)` can improve th. . .\",\"docUrl\":\"https://processing.org/reference/beginRaw_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: filename for output\",\"renderer\":\"String: for example, PDF or DXF\"},\"returns\":\"PGraphics or void\",\"syntax\":\"beginRaw(renderer, filename)\",\"type\":\"function\"},\"beginRecord\":{\"description\":\"Opens a new file and all subsequent drawing functions are echoed to this file as well as the display window. The `beginRecord()` function requires two parameters, the first is the renderer and the second is the file name. This function is always used with `endRecord()` to stop the recording process and close the file.\\n\\nNote that `beginRecord()` will only pick up any settings that happen after it has been called. For instance, if you call `textFont()` before `beginRecord()`, then that font will not be set for the file that you're recording to.\\n\\n`beginRecord()` works only with the PDF and SVG renderers.\",\"docUrl\":\"https://processing.org/reference/beginRecord_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: filename for output\",\"renderer\":\"String: PDF or SVG\"},\"returns\":\"PGraphics or void\",\"syntax\":\"beginRecord(renderer, filename)\",\"type\":\"function\"},\"beginShape\":{\"description\":\"Using the `beginShape()` and `endShape()` functions allow creating more complex forms. `beginShape()` begins recording vertices for a shape and `endShape()` stops recording. The value of the `kind` parameter tells it which types of shapes to create from the provided vertices. With no mode specified, the shape can be any irregular polygon. The parameters available for beginShape() are POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, and QUAD_STRIP. After calling the `beginShape()` function, a series of `vertex()` commands must follow. To stop drawing the shape, call `endShape()`. The `vertex()` function with two parameters specifies a position in 2D and the `vertex()` function with three parameters specifies a position in 3D. Each shape will be outlined with the current stroke color and filled with the fill color. \\n\\nTransformations such as `translate()`, `rotate()`, and `scale()` do not work within `beginShape()`. It is also not possible to use other shapes, such as `ellip. . .\",\"docUrl\":\"https://processing.org/reference/beginShape_.html\",\"name\":null,\"parameters\":{\"kind\":\"int: Either POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, or QUAD_STRIP\"},\"returns\":\"void\",\"syntax\":\"beginShape()\\nbeginShape(kind)\",\"type\":\"function\"},\"bezier\":{\"description\":\"Draws a Bezier curve on the screen. These curves are defined by a series of anchor and control points. The first two parameters specify the first anchor point and the last two parameters specify the other anchor point. The middle parameters specify the control points which define the shape of the curve. Bezier curves were developed by French engineer Pierre Bezier. Using the 3D version requires rendering with P3D (see the Environment reference for more information).\",\"docUrl\":\"https://processing.org/reference/bezier_.html\",\"name\":null,\"parameters\":{\"x1\":\"float: coordinates for the first anchor point\",\"x2\":\"float: coordinates for the first control point\",\"x3\":\"float: coordinates for the second control point\",\"x4\":\"float: coordinates for the second anchor point\",\"y1\":\"float: coordinates for the first anchor point\",\"y2\":\"float: coordinates for the first control point\",\"y3\":\"float: coordinates for the second control point\",\"y4\":\"float: coordinates for the second anchor point\",\"z1\":\"float: coordinates for the first anchor point\",\"z2\":\"float: coordinates for the first control point\",\"z3\":\"float: coordinates for the second control point\",\"z4\":\"float: coordinates for the second anchor point\"},\"returns\":\"void\",\"syntax\":\"bezier(x1, y1, x2, y2, x3, y3, x4, y4)\\nbezier(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4)\",\"type\":\"function\"},\"bezierDetail\":{\"description\":\"Sets the resolution at which Beziers display. The default value is 20. This function is only useful when using the `P3D` renderer; the default `P2D` renderer does not use this information.\",\"docUrl\":\"https://processing.org/reference/bezierDetail_.html\",\"name\":null,\"parameters\":{\"detail\":\"int: resolution of the curves\"},\"returns\":\"void\",\"syntax\":\"bezierDetail(detail)\",\"type\":\"function\"},\"bezierPoint\":{\"description\":\"Evaluates the Bezier at point t for points a, b, c, d. The parameter t varies between 0 and 1, a and d are points on the curve, and b and c are the control points. This can be done once with the x coordinates and a second time with the y coordinates to get the location of a bezier curve at t.\",\"docUrl\":\"https://processing.org/reference/bezierPoint_.html\",\"name\":null,\"parameters\":{\"a\":\"float: coordinate of first point on the curve\",\"b\":\"float: coordinate of first control point\",\"c\":\"float: coordinate of second control point\",\"d\":\"float: coordinate of second point on the curve\",\"t\":\"float: value between 0 and 1\"},\"returns\":\"float\",\"syntax\":\"bezierPoint(a, b, c, d, t)\",\"type\":\"function\"},\"bezierTangent\":{\"description\":\"Calculates the tangent of a point on a Bezier curve. There is a good definition of tangent on Wikipedia.\",\"docUrl\":\"https://processing.org/reference/bezierTangent_.html\",\"name\":null,\"parameters\":{\"a\":\"float: coordinate of first point on the curve\",\"b\":\"float: coordinate of first control point\",\"c\":\"float: coordinate of second control point\",\"d\":\"float: coordinate of second point on the curve\",\"t\":\"float: value between 0 and 1\"},\"returns\":\"float\",\"syntax\":\"bezierTangent(a, b, c, d, t)\",\"type\":\"function\"},\"bezierVertex\":{\"description\":\"Specifies vertex coordinates for Bezier curves. Each call to `bezierVertex()` defines the position of two control points and one anchor point of a Bezier curve, adding a new segment to a line or shape. The first time `bezierVertex()` is used within a `beginShape()` call, it must be prefaced with a call to `vertex()` to set the first anchor point. This function must be used between `beginShape()` and `endShape()` and only when there is no MODE parameter specified to `beginShape()`. Using the 3D version requires rendering with P3D (see the Environment reference for more information).\",\"docUrl\":\"https://processing.org/reference/bezierVertex_.html\",\"name\":null,\"parameters\":{\"x2\":\"float: the x-coordinate of the 1st control point\",\"x3\":\"float: the x-coordinate of the 2nd control point\",\"x4\":\"float: the x-coordinate of the anchor point\",\"y2\":\"float: the y-coordinate of the 1st control point\",\"y3\":\"float: the y-coordinate of the 2nd control point\",\"y4\":\"float: the y-coordinate of the anchor point\",\"z2\":\"float: the z-coordinate of the 1st control point\",\"z3\":\"float: the z-coordinate of the 2nd control point\",\"z4\":\"float: the z-coordinate of the anchor point\"},\"returns\":\"void\",\"syntax\":\"bezierVertex(x2, y2, x3, y3, x4, y4)\\nbezierVertex(x2, y2, z2, x3, y3, z3, x4, y4, z4)\",\"type\":\"function\"},\"binary\":{\"description\":\"Converts an `int`, `byte`, `char`, or `color` to a `String` containing the equivalent binary notation. For example, the `color` value produced by `color(0, 102, 153, 255)` will convert to the `String` value `\\\"11111111000000000110011010011001\\\"`. This function can help make your geeky debugging sessions much happier.\\n\\nNote that the maximum number of digits is 32, because an `int` value can only represent up to 32 bits. Specifying more than 32 digits will have no effect.\",\"docUrl\":\"https://processing.org/reference/binary_.html\",\"name\":null,\"parameters\":{\"digits\":\"int: number of digits to return\",\"value\":\"char, byte, or int: value to convert\"},\"returns\":\"String\",\"syntax\":\"binary(value)\\nbinary(value, digits)\",\"type\":\"function\"},\"blend\":{\"description\":\"Blends a region of pixels from one image into another (or in itself again) with full alpha channel support. There is a choice of the following modes to blend the source pixels (A) with the ones of pixels in the destination image (B):\\n\\nBLEND - linear interpolation of colors: C = A*factor + B\\n\\nADD - additive blending with white clip: C = min(A*factor + B, 255)\\n\\nSUBTRACT - subtractive blending with black clip: C = max(B - A*factor, 0)\\n\\nDARKEST - only the darkest color succeeds: C = min(A*factor, B)\\n\\nLIGHTEST - only the lightest color succeeds: C = max(A*factor, B)\\n\\nDIFFERENCE - subtract colors from underlying image.\\n\\nEXCLUSION - similar to DIFFERENCE, but less extreme.\\n\\nMULTIPLY - Multiply the colors, result will always be darker.\\n\\nSCREEN - Opposite multiply, uses inverse values of the colors.\\n\\nOVERLAY - A mix of MULTIPLY and SCREEN. Multiplies dark values,\\nand screens light values.\\n\\nHARD_LIGHT - SCREEN when greater than 50% gray, MULTIPLY when lower.\\n\\nSOFT_LIGHT - Mix of DARKEST and LIGH. . .\",\"docUrl\":\"https://processing.org/reference/blend_.html\",\"name\":null,\"parameters\":{\"dh\":\"int: destination image height\",\"dw\":\"int: destination image width\",\"dx\":\"int: X coordinate of the destinations's upper left corner\",\"dy\":\"int: Y coordinate of the destinations's upper left corner\",\"mode\":\"int: Either BLEND, ADD, SUBTRACT, LIGHTEST, DARKEST, DIFFERENCE, EXCLUSION, MULTIPLY, SCREEN, OVERLAY, HARD_LIGHT, SOFT_LIGHT, DODGE, BURN\",\"sh\":\"int: source image height\",\"src\":\"PImage: an image variable referring to the source image\",\"sw\":\"int: source image width\",\"sx\":\"int: X coordinate of the source's upper left corner\",\"sy\":\"int: Y coordinate of the source's upper left corner\"},\"returns\":\"void\",\"syntax\":\"blend(sx, sy, sw, sh, dx, dy, dw, dh, mode)\\nblend(src, sx, sy, sw, sh, dx, dy, dw, dh, mode)\",\"type\":\"function\"},\"blendMode\":{\"description\":\"Blends the pixels in the display window according to a defined mode. There is a choice of the following modes to blend the source pixels (A) with the ones of pixels already in the display window (B). Each pixel's final color is the result of applying one of the blend modes with each channel of (A) and (B) independently. The red channel is compared with red, green with green, and blue with blue.\\n\\nBLEND - linear interpolation of colors: C = A*factor + B. This is the default.\\n\\nADD - additive blending with white clip: C = min(A*factor + B, 255)\\n\\nSUBTRACT - subtractive blending with black clip: C = max(B - A*factor, 0)\\n\\nDARKEST - only the darkest color succeeds: C = min(A*factor, B)\\n\\nLIGHTEST - only the lightest color succeeds: C = max(A*factor, B)\\n\\nDIFFERENCE - subtract colors from underlying image.\\n\\nEXCLUSION - similar to DIFFERENCE, but less extreme.\\n\\nMULTIPLY - multiply the colors, result will always be darker.\\n\\nSCREEN - opposite multiply, uses inverse values of the colors.\\n\\nREPLACE - t. . .\",\"docUrl\":\"https://processing.org/reference/blendMode_.html\",\"name\":null,\"parameters\":{\"mode\":\"int: the blending mode to use\"},\"returns\":\"void\",\"syntax\":\"blendMode(mode)\",\"type\":\"function\"},\"blue\":{\"description\":\"Extracts the blue value from a color, scaled to match current `colorMode()`. The value is always returned as a float, so be careful not to assign it to an int value.\\n\\nThe `blue()` function is easy to use and understand, but it is slower than a technique called bit masking. When working in `colorMode(RGB, 255)`, you can acheive the same results as `blue()` but with greater speed by using a bit mask to remove the other color components. For example, the following two lines of code are equivalent means of getting the blue value of the color value `c`:\\n\\n`float b1 = blue(c);   // Simpler, but slower to calculate\\nfloat b2 = c &amp; 0xFF;  // Very fast to calculate`\",\"docUrl\":\"https://processing.org/reference/blue_.html\",\"name\":null,\"parameters\":{\"rgb\":\"int: any value of the color datatype\"},\"returns\":\"float\",\"syntax\":\"blue(rgb)\",\"type\":\"function\"},\"boolean\":{\"description\":\"Converts an `int` or `String` to its boolean representation.  For an `int`, any non-zero value (positive or negative) evaluates to true, while zero evaluates to false. For a `String`, the value `\\\"true\\\"` evaluates to true, while any other value (including `\\\"false\\\"` or `\\\"hippopotamus\\\"`) evaluates to false.\\n\\nWhen an array of `int` or `String` values is passed in, then a `boolean` array of the same length is returned.\",\"docUrl\":\"https://processing.org/reference/booleanconvert_.html\",\"name\":null,\"parameters\":{},\"type\":\"function\"},\"box\":{\"description\":\"A box is an extruded rectangle. A box with equal dimensions on all sides is a cube.\",\"docUrl\":\"https://processing.org/reference/box_.html\",\"name\":null,\"parameters\":{\"d\":\"float: dimension of the box in the z-dimension\",\"h\":\"float: dimension of the box in the y-dimension\",\"size\":\"float: dimension of the box in all dimensions (creates a cube)\",\"w\":\"float: dimension of the box in the x-dimension\"},\"returns\":\"void\",\"syntax\":\"box(size)\\nbox(w, h, d)\",\"type\":\"function\"},\"brightness\":{\"description\":\"Extracts the brightness value from a color.\",\"docUrl\":\"https://processing.org/reference/brightness_.html\",\"name\":null,\"parameters\":{\"rgb\":\"int: any value of the color datatype\"},\"returns\":\"float\",\"syntax\":\"brightness(rgb)\",\"type\":\"function\"},\"byte\":{\"description\":\"Converts any value of a primitive data type (`boolean`, `byte`, `char`, `color`, `double`, `float`, `int`, or `long`) to its byte representation. A byte can only be a whole number between `-128` and `127`, so when a value outside of this range is converted, it wraps around to the corresponding byte representation.  (For example, `byte(128)` evaluates to `-128`.)\\n\\nWhen an array of values is passed in, then a `byte` array of the same length is returned.\",\"docUrl\":\"https://processing.org/reference/byteconvert_.html\",\"name\":null,\"parameters\":{},\"type\":\"function\"},\"camera\":{\"description\":\"Sets the position of the camera through setting the eye position, the center of the scene, and which axis is facing upward. Moving the eye position and the direction it is pointing (the center of the scene) allows the images to be seen from different angles. The version without any parameters sets the camera to the default position, pointing to the center of the display window with the Y axis as up. The default values are `camera(width/2.0, height/2.0, (height/2.0) / tan(PI*30.0 / 180.0), width/2.0, height/2.0, 0, 0, 1, 0)`. This function is similar to `gluLookAt()` in OpenGL, but it first clears the current camera settings.\",\"docUrl\":\"https://processing.org/reference/camera_.html\",\"name\":null,\"parameters\":{\"centerX\":\"float: x-coordinate for the center of the scene\",\"centerY\":\"float: y-coordinate for the center of the scene\",\"centerZ\":\"float: z-coordinate for the center of the scene\",\"eyeX\":\"float: x-coordinate for the eye\",\"eyeY\":\"float: y-coordinate for the eye\",\"eyeZ\":\"float: z-coordinate for the eye\",\"upX\":\"float: usually 0.0, 1.0, or -1.0\",\"upY\":\"float: usually 0.0, 1.0, or -1.0\",\"upZ\":\"float: usually 0.0, 1.0, or -1.0\"},\"returns\":\"void\",\"syntax\":\"camera()\\ncamera(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ)\",\"type\":\"function\"},\"ceil\":{\"description\":\"Calculates the closest int value that is greater than or equal to the value of the parameter. For example, `ceil(9.03)` returns the value 10.\",\"docUrl\":\"https://processing.org/reference/ceil_.html\",\"name\":null,\"parameters\":{\"n\":\"float: number to round up\"},\"returns\":\"int\",\"syntax\":\"ceil(n)\",\"type\":\"function\"},\"char\":{\"description\":\"Converts any value of a primitive data type (`boolean`, `byte`, `char`, `color`, `double`, `float`, `int`, or `long`) to its numeric character representation.\\n\\nWhen an array of values is passed in, then a `char` array of the same length is returned.\",\"docUrl\":\"https://processing.org/reference/charconvert_.html\",\"name\":null,\"parameters\":{},\"type\":\"function\"},\"circle\":{\"description\":\"Draws a circle to the screen. By default, the first two parameters set the location of the center, and the third sets the shape's width and height. The origin may be changed with the `ellipseMode()` function.\",\"docUrl\":\"https://processing.org/reference/circle_.html\",\"name\":null,\"parameters\":{\"extent\":\"float: width and height of the ellipse by default\",\"x\":\"float: x-coordinate of the ellipse\",\"y\":\"float: y-coordinate of the ellipse\"},\"returns\":\"void\",\"syntax\":\"circle(x, y, extent)\",\"type\":\"function\"},\"clear\":{\"description\":\"Clears the pixels within a buffer. This function only works on `PGraphics` objects created with the `createGraphics()` function. Unlike the main graphics context (the display window), pixels in additional graphics areas created with `createGraphics()` can be entirely or partially transparent. This function clears everything in a `PGraphics` object to make all of the pixels 100% transparent.\",\"docUrl\":\"https://processing.org/reference/clear_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"clear()\",\"type\":\"function\"},\"clip\":{\"description\":\"Limits the rendering to the boundaries of a rectangle defined by the parameters. The boundaries are drawn based on the state of the `imageMode()` fuction, either CORNER, CORNERS, or CENTER.\",\"docUrl\":\"https://processing.org/reference/clip_.html\",\"name\":null,\"parameters\":{\"a\":\"float: x-coordinate of the rectangle, by default\",\"b\":\"float: y-coordinate of the rectangle, by default\",\"c\":\"float: width of the rectangle, by default\",\"d\":\"float: height of the rectangle, by default\"},\"returns\":\"void\",\"syntax\":\"clip(a, b, c, d)\",\"type\":\"function\"},\"color\":{\"description\":\"Creates colors for storing in variables of the `color` datatype. The parameters are interpreted as RGB or HSB values depending on the current `colorMode()`. The default mode is RGB values from 0 to 255 and, therefore, `color(255, 204, 0)` will return a bright yellow color (see the first example above).\\n\\nNote that if only one value is provided to `color()`, it will be interpreted as a grayscale value. Add a second value, and it will be used for alpha transparency. When three values are specified, they are interpreted as either RGB or HSB values. Adding a fourth value applies alpha transparency.\\n\\nNote that when using hexadecimal notation, it is not necessary to use `color()`, as in: `color c = #006699`\\n\\nMore about how colors are stored can be found in the reference for the color datatype.\",\"docUrl\":\"https://processing.org/reference/color_.html\",\"name\":null,\"parameters\":{\"alpha\":\"float, or int: relative to current color range\",\"gray\":\"int: number specifying value between white and black\",\"v1\":\"float, or int: red or hue values relative to the current color range\",\"v2\":\"float, or int: green or saturation values relative to the current color range\",\"v3\":\"float, or int: blue or brightness values relative to the current color range\"},\"returns\":\"int\",\"syntax\":\"color(gray)\\ncolor(gray, alpha)\\ncolor(v1, v2, v3)\\ncolor(v1, v2, v3, alpha)\",\"type\":\"function\"},\"colorMode\":{\"description\":\"Changes the way Processing interprets color data. By default, the parameters for `fill()`, `stroke()`, `background()`, and `color()` are defined by values between 0 and 255 using the RGB color model. The `colorMode()` function is used to change the numerical range used for specifying colors and to switch color systems. For example, calling `colorMode(RGB, 1.0)` will specify that values are specified between 0 and 1. The limits for defining colors are altered by setting the parameters `max`, `max1`, `max2`, `max3`, and `maxA`.\\n\\nAfter changing the range of values for colors with code like `colorMode(HSB, 360, 100, 100)`, those ranges remain in use until they are explicitly changed again. For example, after running `colorMode(HSB, 360, 100, 100)` and then changing back to `colorMode(RGB)`, the range for R will be 0 to 360 and the range for G and B will be 0 to 100. To avoid this, be explicit about the ranges when changing the color mode. For instance, instead of `colorMode(RGB)`, write `c. . .\",\"docUrl\":\"https://processing.org/reference/colorMode_.html\",\"name\":null,\"parameters\":{\"max\":\"float: range for all color elements\",\"max1\":\"float: range for the red or hue depending on the current color mode\",\"max2\":\"float: range for the green or saturation depending on the current color mode\",\"max3\":\"float: range for the blue or brightness depending on the current color mode\",\"maxA\":\"float: range for the alpha\",\"mode\":\"int: Either RGB or HSB, corresponding to Red/Green/Blue and Hue/Saturation/Brightness\"},\"returns\":\"void\",\"syntax\":\"colorMode(mode)\\ncolorMode(mode, max)\\ncolorMode(mode, max1, max2, max3)\\ncolorMode(mode, max1, max2, max3, maxA)\",\"type\":\"function\"},\"concat\":{\"description\":\"Concatenates two arrays. For example, concatenating the array { 1, 2, 3 } and the array { 4, 5, 6 } yields { 1, 2, 3, 4, 5, 6 }. Both parameters must be arrays of the same datatype.\\n \\nWhen using an array of objects, the data returned from the function must be cast to the object array's data type. For example: SomeClass[] items = (SomeClass[]) concat(array1, array2).\",\"docUrl\":\"https://processing.org/reference/concat_.html\",\"name\":null,\"parameters\":{\"a\":\"Object, String[], float[], int[], char[], byte[], or boolean[]: first array to concatenate\",\"b\":\"Object, String[], float[], int[], char[], byte[], or boolean[]: second array to concatenate\"},\"returns\":\"boolean[], byte[], char[], int[], float[], String[], or Object\",\"syntax\":\"concat(a, b)\",\"type\":\"function\"},\"constrain\":{\"description\":\"Constrains a value to not exceed a maximum and minimum value.\",\"docUrl\":\"https://processing.org/reference/constrain_.html\",\"name\":null,\"parameters\":{\"amt\":\"int, or float: the value to constrain\",\"high\":\"int, or float: maximum limit\",\"low\":\"int, or float: minimum limit\"},\"returns\":\"float or int\",\"syntax\":\"constrain(amt, low, high)\",\"type\":\"function\"},\"copy\":{\"description\":\"Copies a region of pixels from the display window to another area of the display window and copies a region of pixels from an image used as the `srcImg` parameter into the display window. If the source and destination regions aren't the same size, it will automatically resize the source pixels to fit the specified target region. No alpha information is used in the process, however if the source image has an alpha channel set, it will be copied as well.\\n\\nAs of release 0149, this function ignores `imageMode()`.\",\"docUrl\":\"https://processing.org/reference/copy_.html\",\"name\":null,\"parameters\":{\"dh\":\"int: destination image height\",\"dw\":\"int: destination image width\",\"dx\":\"int: X coordinate of the destination's upper left corner\",\"dy\":\"int: Y coordinate of the destination's upper left corner\",\"sh\":\"int: source image height\",\"src\":\"PImage: an image variable referring to the source image.\",\"sw\":\"int: source image width\",\"sx\":\"int: X coordinate of the source's upper left corner\",\"sy\":\"int: Y coordinate of the source's upper left corner\"},\"returns\":\"void or PImage\",\"syntax\":\"copy()\\ncopy(sx, sy, sw, sh, dx, dy, dw, dh)\\ncopy(src, sx, sy, sw, sh, dx, dy, dw, dh)\",\"type\":\"function\"},\"cos\":{\"description\":\"Calculates the cosine of an angle. This function expects the values of the `angle` parameter to be provided in radians (values from 0 to PI*2). Values are returned in the range -1 to 1.\",\"docUrl\":\"https://processing.org/reference/cos_.html\",\"name\":null,\"parameters\":{\"angle\":\"float: an angle in radians\"},\"returns\":\"float\",\"syntax\":\"cos(angle)\",\"type\":\"function\"},\"createFont\":{\"description\":\"Dynamically converts a font to the format used by Processing from a .ttf or .otf file inside the sketch's \\\"data\\\" folder or a font that's installed elsewhere on the computer. If you want to use a font installed on your computer, use the `PFont.list()` method to first determine the names for the fonts recognized by the computer and are compatible with this function. Not all fonts can be used and some might work with one operating system and not others. When sharing a sketch with other people or posting it on the web, you may need to include a .ttf or .otf version of your font in the data directory of the sketch because other people might not have the font installed on their computer. Only fonts that can legally be distributed should be included with a sketch.\\n\\nThe `size` parameter states the font size you want to generate. The `smooth` parameter specifies if the font should be antialiased or not. The `charset` parameter is an array of chars that specifies the characters to generate.\\n\\nThi. . .\",\"docUrl\":\"https://processing.org/reference/createFont_.html\",\"name\":null,\"parameters\":{\"charset\":\"char[]: array containing characters to be generated\",\"name\":\"String: name of the font to load\",\"size\":\"float: point size of the font\",\"smooth\":\"boolean: true for an antialiased font, false for aliased\"},\"returns\":\"PFont\",\"syntax\":\"createFont(name, size)\\ncreateFont(name, size, smooth)\\ncreateFont(name, size, smooth, charset)\",\"type\":\"function\"},\"createGraphics\":{\"description\":\"Creates and returns a new `PGraphics` object. Use this class if you need to draw into an off-screen graphics buffer. The first two parameters define the width and height in pixels. The third, optional parameter specifies the renderer. It can be defined as P2D, P3D, PDF, or SVG. If the third parameter isn't used, the default renderer is set. The PDF and SVG renderers require the filename parameter.\\n\\nIt's important to consider the renderer used with `createGraphics()` in relation to the main renderer specified in `size()`. For example, it's only possible to use P2D or P3D with `createGraphics()` when one of them is defined in `size()`. Unlike Processing 1.0, P2D and P3D use OpenGL for drawing, and when using an OpenGL renderer it's necessary for the main drawing surface to be OpenGL-based. If P2D or P3D are used as the renderer in `size()`, then any of the options can be used with `createGraphics()`. If the default renderer is used in `size()`, then only the default, PDF, or SVG can be u. . .\",\"docUrl\":\"https://processing.org/reference/createGraphics_.html\",\"name\":null,\"parameters\":{\"h\":\"int: height in pixels\",\"path\":\"String: the name of the file (can be an absolute or relative path)\",\"renderer\":\"String: Either P2D, P3D, or PDF\",\"w\":\"int: width in pixels\"},\"returns\":\"PGraphics\",\"syntax\":\"createGraphics(w, h)\\ncreateGraphics(w, h, renderer)\\ncreateGraphics(w, h, renderer, path)\",\"type\":\"function\"},\"createImage\":{\"description\":\"Creates a new PImage (the datatype for storing images). This provides a fresh buffer of pixels to play with. Set the size of the buffer with the `width` and `height` parameters. The `format` parameter defines how the pixels are stored. See the PImage reference for more information.\\n \\nBe sure to include all three parameters, specifying only the width and height (but no format) will produce a strange error.\\n \\nAdvanced users please note that createImage() should be used instead of the syntax new PImage().\",\"docUrl\":\"https://processing.org/reference/createImage_.html\",\"name\":null,\"parameters\":{\"format\":\"int: Either RGB, ARGB, ALPHA (grayscale alpha channel)\",\"h\":\"int: height in pixels\",\"w\":\"int: width in pixels\"},\"returns\":\"PImage\",\"syntax\":\"createImage(w, h, format)\",\"type\":\"function\"},\"createInput\":{\"description\":\"This is a shorthand function for advanced programmers to initialize and open a Java InputStream. It's useful if you want to use the facilities provided by PApplet to easily open files from the data folder or from a URL, but you need an InputStream object so that you can use other parts of Java to take more control of how the stream is read.\\n\\nThe filename passed in can be:\\n- A URL, as in: `createInput(\\\"http://processing.org/\\\")`\\n- The name of a file in the sketch's `data` folder\\n- The full path to a file to be opened locally (when running as an application)\\n\\nIf the requested item doesn't exist, null is returned. If not online, this will also check to see if the user is asking for a file whose name isn't properly capitalized. If capitalization is different, an error will be printed to the console. This helps prevent issues that appear when a sketch is exported to the web, where case sensitivity matters, as opposed to running from inside the Processing Development Environment on Windows or. . .\",\"docUrl\":\"https://processing.org/reference/createInput_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: the name of the file to use as input\"},\"returns\":\"InputStream\",\"syntax\":\"createInput(filename)\",\"type\":\"function\"},\"createOutput\":{\"description\":\"Similar to `createInput()`, this creates a Java `OutputStream` for a given filename or path. The file will be created in the sketch folder, or in the same folder as an exported application.\\n\\nIf the path does not exist, intermediate folders will be created. If an exception occurs, it will be printed to the console, and `null` will be returned.\\n\\nThis function is a convenience over the Java approach that requires you to 1) create a FileOutputStream object, 2) determine the exact file location, and 3) handle exceptions. Exceptions are handled internally by the function, which is more appropriate for \\\"sketch\\\" projects.\\n\\nIf the output filename ends with `.gz`, the output will be automatically GZIP compressed as it is written.\",\"docUrl\":\"https://processing.org/reference/createOutput_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: name of the file to open\"},\"returns\":\"OutputStream\",\"syntax\":\"createOutput(filename)\",\"type\":\"function\"},\"createReader\":{\"description\":\"Creates a `BufferedReader` object that can be used to read files line-by-line as individual `String` objects. This is the complement to the `createWriter()` function. For more information about the `BufferedReader` class and its methods like `readLine()` and `close` used in the above example, please consult a Java reference.\\n\\nStarting with Processing release 0134, all files loaded and saved by the Processing API use UTF-8 encoding. In previous releases, the default encoding for your platform was used, which causes problems when files are moved to other platforms.\",\"docUrl\":\"https://processing.org/reference/createReader_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: name of the file to be opened\"},\"returns\":\"BufferedReader\",\"syntax\":\"createReader(filename)\",\"type\":\"function\"},\"createShape\":{\"description\":\"The `createShape()` function is used to define a new shape. Once created, this shape can be drawn with the `shape()` function. The basic way to use the function defines new primitive shapes. One of the following parameters are used as the first parameter: `ELLIPSE`, `RECT`, `ARC`, `TRIANGLE`, `SPHERE`, `BOX`, `QUAD`, or `LINE`. The parameters for each of these different shapes are the same as their corresponding functions: `ellipse()`, `rect()`, `arc()`, `triangle()`, `sphere()`, `box()`, `quad()`, and `line()`. The first example above clarifies how this works.\\n\\nCustom, unique shapes can be made by using `createShape()` without a parameter. After the shape is started, the drawing attributes and geometry can be set directly to the shape within the `beginShape()` and `endShape()` methods. See the second example above for specifics, and the reference for `beginShape()` for all of its options.\\n\\nThe  `createShape()` function can also be used to make a complex shape made of other shapes. Thi. . .\",\"docUrl\":\"https://processing.org/reference/createShape_.html\",\"name\":null,\"parameters\":{\"kind\":\"int: either POINT, LINE, TRIANGLE, QUAD, RECT, ELLIPSE, ARC, BOX, SPHERE\",\"p\":\"float[]: parameters that match the kind of shape\"},\"returns\":\"PShape\",\"syntax\":\"createShape()\\ncreateShape(type)\\ncreateShape(kind, p)\",\"type\":\"function\"},\"createWriter\":{\"description\":\"Creates a new file in the sketch folder, and a `PrintWriter` object to write to it. For the file to be made correctly, it should be flushed and must be closed with its `flush()` and `close()` methods (see above example). \\n \\nStarting with Processing release 0134, all files loaded and saved by the Processing API use UTF-8 encoding. In previous releases, the default encoding for your platform was used, which causes problems when files are moved to other platforms.\",\"docUrl\":\"https://processing.org/reference/createWriter_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: name of the file to be created\"},\"returns\":\"PrintWriter\",\"syntax\":\"createWriter(filename)\",\"type\":\"function\"},\"cursor\":{\"description\":\"Sets the cursor to a predefined symbol or an image, or makes it visible if already hidden. If you are trying to set an image as the cursor, the recommended size is 16x16 or 32x32 pixels. The values for parameters `x` and `y` must be less than the dimensions of the image.\\n\\nSetting or hiding the cursor does not generally work with \\\"Present\\\" mode (when running full-screen).\\n\\nWith the P2D and P3D renderers, a generic set of cursors are used because the OpenGL renderer doesn't have access to the default cursor images for each platform (Issue 3791).\",\"docUrl\":\"https://processing.org/reference/cursor_.html\",\"name\":null,\"parameters\":{\"img\":\"PImage: any variable of type PImage\",\"kind\":\"int: either ARROW, CROSS, HAND, MOVE, TEXT, or WAIT\",\"x\":\"int: the horizontal active spot of the cursor\",\"y\":\"int: the vertical active spot of the cursor\"},\"returns\":\"void\",\"syntax\":\"cursor(kind)\\ncursor(img)\\ncursor(img, x, y)\\ncursor()\",\"type\":\"function\"},\"curve\":{\"description\":\"Draws a curved line on the screen. The first and second parameters specify the beginning control point and the last two parameters specify the ending control point. The middle parameters specify the start and stop of the curve. Longer curves can be created by putting a series of `curve()` functions together or using `curveVertex()`. An additional function called `curveTightness()` provides control for the visual quality of the curve. The `curve()` function is an implementation of Catmull-Rom splines. Using the 3D version requires rendering with P3D (see the Environment reference for more information).\",\"docUrl\":\"https://processing.org/reference/curve_.html\",\"name\":null,\"parameters\":{\"x1\":\"float: coordinates for the beginning control point\",\"x2\":\"float: coordinates for the first point\",\"x3\":\"float: coordinates for the second point\",\"x4\":\"float: coordinates for the ending control point\",\"y1\":\"float: coordinates for the beginning control point\",\"y2\":\"float: coordinates for the first point\",\"y3\":\"float: coordinates for the second point\",\"y4\":\"float: coordinates for the ending control point\",\"z1\":\"float: coordinates for the beginning control point\",\"z2\":\"float: coordinates for the first point\",\"z3\":\"float: coordinates for the second point\",\"z4\":\"float: coordinates for the ending control point\"},\"returns\":\"void\",\"syntax\":\"curve(x1, y1, x2, y2, x3, y3, x4, y4)\\ncurve(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4)\",\"type\":\"function\"},\"curveDetail\":{\"description\":\"Sets the resolution at which curves display. The default value is 20. This function is only useful when using the P3D renderer as the default P2D renderer does not use this information.\",\"docUrl\":\"https://processing.org/reference/curveDetail_.html\",\"name\":null,\"parameters\":{\"detail\":\"int: resolution of the curves\"},\"returns\":\"void\",\"syntax\":\"curveDetail(detail)\",\"type\":\"function\"},\"curvePoint\":{\"description\":\"Evaluates the curve at point `t` for points `a`, `b`, `c`, `d`. The parameter `t` may range from 0 (the start of the curve) and 1 (the end of the curve). `a` and `d` are the control points, and `b` and `c` are points on the curve. As seen in the example above, this can be used once with the `x` coordinates and a second time with the `y` coordinates to get the location of a curve at `t`.\",\"docUrl\":\"https://processing.org/reference/curvePoint_.html\",\"name\":null,\"parameters\":{\"a\":\"float: coordinate of first control point\",\"b\":\"float: coordinate of first point on the curve\",\"c\":\"float: coordinate of second point on the curve\",\"d\":\"float: coordinate of second control point\",\"t\":\"float: value between 0 and 1\"},\"returns\":\"float\",\"syntax\":\"curvePoint(a, b, c, d, t)\",\"type\":\"function\"},\"curveTangent\":{\"description\":\"Calculates the tangent of a point on a curve. There's a good definition of tangent on Wikipedia.\",\"docUrl\":\"https://processing.org/reference/curveTangent_.html\",\"name\":null,\"parameters\":{\"a\":\"float: coordinate of first control point on the curve\",\"b\":\"float: coordinate of first point\",\"c\":\"float: coordinate of first point\",\"d\":\"float: coordinate of second control point on the curve\",\"t\":\"float: value between 0 and 1\"},\"returns\":\"float\",\"syntax\":\"curveTangent(a, b, c, d, t)\",\"type\":\"function\"},\"curveTightness\":{\"description\":\"Modifies the quality of forms created with `curve()` and `curveVertex()`. The parameter `tightness` determines how the curve fits to the vertex points. The value 0.0 is the default value for `tightness` (this value defines the curves to be Catmull-Rom splines) and the value 1.0 connects all the points with straight lines. Values within the range -5.0 and 5.0 will deform the curves but will leave them recognizable and as values increase in magnitude, they will continue to deform.\",\"docUrl\":\"https://processing.org/reference/curveTightness_.html\",\"name\":null,\"parameters\":{\"tightness\":\"float: amount of deformation from the original vertices\"},\"returns\":\"void\",\"syntax\":\"curveTightness(tightness)\",\"type\":\"function\"},\"curveVertex\":{\"description\":\"Specifies vertex coordinates for curves. This function may only be used between `beginShape()` and `endShape()` and only when there is no MODE parameter specified to `beginShape()`. The first and last points in a series of `curveVertex()` lines will be used to guide the beginning and end of a the curve. A minimum of four points is required to draw a tiny curve between the second and third points. Adding a fifth point with `curveVertex()` will draw the curve between the second, third, and fourth points. The `curveVertex()` function is an implementation of Catmull-Rom splines. Using the 3D version requires rendering with P3D (see the Environment reference for more information).\",\"docUrl\":\"https://processing.org/reference/curveVertex_.html\",\"name\":null,\"parameters\":{\"x\":\"float: the x-coordinate of the vertex\",\"y\":\"float: the y-coordinate of the vertex\",\"z\":\"float: the z-coordinate of the vertex\"},\"returns\":\"void\",\"syntax\":\"curveVertex(x, y)\\ncurveVertex(x, y, z)\",\"type\":\"function\"},\"day\":{\"description\":\"Processing communicates with the clock on your computer. The `day()` function returns the current day as a value from 1 - 31.\",\"docUrl\":\"https://processing.org/reference/day_.html\",\"name\":null,\"parameters\":{},\"returns\":\"int\",\"syntax\":\"day()\",\"type\":\"function\"},\"degrees\":{\"description\":\"Converts a radian measurement to its corresponding value in degrees. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and 2*PI radians in a circle. For example, 90\u00B0 = PI/2 = 1.5707964. All trigonometric functions in Processing require their parameters to be specified in radians.\",\"docUrl\":\"https://processing.org/reference/degrees_.html\",\"name\":null,\"parameters\":{\"radians\":\"float: radian value to convert to degrees\"},\"returns\":\"float\",\"syntax\":\"degrees(radians)\",\"type\":\"function\"},\"delay\":{\"description\":\"The `delay()` function halts for a specified time. Delay times are specified in thousandths of a second. For example, running `delay(3000)` will stop the program for three seconds and `delay(500)` will stop the program for a half-second.\\n\\nThe screen only updates when the end of `draw()` is reached, so `delay()` cannot be used to slow down drawing. For instance, you cannot use `delay()` to control the timing of an animation.\\n\\nThe `delay()` function should only be used for pausing scripts (i.e. a script that needs to pause a few seconds before attempting a download, or a sketch that needs to wait a few milliseconds before reading from the serial port.)\",\"docUrl\":\"https://processing.org/reference/delay_.html\",\"name\":null,\"parameters\":{\"napTime\":\"int: milliseconds to pause before running draw() again\"},\"returns\":\"void\",\"syntax\":\"delay(napTime)\",\"type\":\"function\"},\"directionalLight\":{\"description\":\"Adds a directional light. Directional light comes from one direction: it is stronger when hitting a surface squarely, and weaker if it hits at a gentle angle. After hitting a surface, directional light scatters in all directions. Lights need to be included in the `draw()` to remain persistent in a looping program. Placing them in the `setup()` of a looping program will cause them to only have an effect the first time through the loop. The `v1`, `v2`, and `v3` parameters are interpreted as either RGB or HSB values, depending on the current color mode. The `nx`, `ny`, and `nz` parameters specify the direction the light is facing. For example, setting `ny` to -1 will cause the geometry to be lit from below (since the light would be facing directly upward).\",\"docUrl\":\"https://processing.org/reference/directionalLight_.html\",\"name\":null,\"parameters\":{\"nx\":\"float: direction along the x-axis\",\"ny\":\"float: direction along the y-axis\",\"nz\":\"float: direction along the z-axis\",\"v1\":\"float: red or hue value (depending on current color mode)\",\"v2\":\"float: green or saturation value (depending on current color mode)\",\"v3\":\"float: blue or brightness value (depending on current color mode)\"},\"returns\":\"void\",\"syntax\":\"directionalLight(v1, v2, v3, nx, ny, nz)\",\"type\":\"function\"},\"displayDensity\":{\"description\":\"This function returns the number \\\"2\\\" if the screen is a high-density screen (called a Retina display on OS X or high-dpi on Windows and Linux) and a \\\"1\\\" if not. This information is useful for a program to adapt to run at double the pixel density on a screen that supports it.\",\"docUrl\":\"https://processing.org/reference/displayDensity_.html\",\"name\":null,\"parameters\":{\"display\":\"int: the display number to check\"},\"returns\":\"int\",\"syntax\":\"displayDensity()\\ndisplayDensity(display)\",\"type\":\"function\"},\"dist\":{\"description\":\"Calculates the distance between two points.\",\"docUrl\":\"https://processing.org/reference/dist_.html\",\"name\":null,\"parameters\":{\"x1\":\"float: x-coordinate of the first point\",\"x2\":\"float: x-coordinate of the second point\",\"y1\":\"float: y-coordinate of the first point\",\"y2\":\"float: y-coordinate of the second point\",\"z1\":\"float: z-coordinate of the first point\",\"z2\":\"float: z-coordinate of the second point\"},\"returns\":\"float\",\"syntax\":\"dist(x1, y1, x2, y2)\\ndist(x1, y1, z1, x2, y2, z2)\",\"type\":\"function\"},\"draw\":{\"description\":\"Called directly after `setup()`, the `draw()` function continuously executes the lines of code contained inside its block until the program is stopped or `noLoop()` is called. `draw()` is called automatically and should never be called explicitly. All Processing programs update the screen at the end of draw(), never earlier.\\n\\nTo stop the code inside of `draw()` from running continuously, use `noLoop()`, `redraw()` and `loop()`. If `noLoop()` is used to stop the code in `draw()` from running, then `redraw()` will cause the code inside `draw()` to run a single time, and `loop()` will cause the code inside `draw()` to resume running continuously.\\n\\nThe number of times `draw()` executes in each second may be controlled with the `frameRate()` function.\\n\\nIt is common to call `background()` near the beginning of the `draw()` loop to clear the contents of the window, as shown in the first example above.  Since pixels drawn to the window are cumulative, omitting `background()` may result in unin. . .\",\"docUrl\":\"https://processing.org/reference/draw_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"draw()\",\"type\":\"function\"},\"ellipse\":{\"description\":\"Draws an ellipse (oval) to the screen. An ellipse with equal width and height is a circle. By default, the first two parameters set the location, and the third and fourth parameters set the shape's width and height. The origin may be changed with the `ellipseMode()` function.\",\"docUrl\":\"https://processing.org/reference/ellipse_.html\",\"name\":null,\"parameters\":{\"a\":\"float: x-coordinate of the ellipse\",\"b\":\"float: y-coordinate of the ellipse\",\"c\":\"float: width of the ellipse by default\",\"d\":\"float: height of the ellipse by default\"},\"returns\":\"void\",\"syntax\":\"ellipse(a, b, c, d)\",\"type\":\"function\"},\"ellipseMode\":{\"description\":\"Modifies the location from which ellipses are drawn by changing the way in which parameters given to `ellipse()` are intepreted.\\n\\nThe default mode is `ellipseMode(CENTER)`, which interprets the first two parameters of `ellipse()` as the shape's center point, while the third and fourth parameters are its width and height.\\n\\n`ellipseMode(RADIUS)` also uses the first two parameters of `ellipse()` as the shape's center point, but uses the third and fourth parameters to specify half of the shapes's width and height.\\n\\n`ellipseMode(CORNER)` interprets the first two parameters of `ellipse()` as the upper-left corner of the shape, while the third and fourth parameters are its width and height.\\n\\n`ellipseMode(CORNERS)` interprets the first two parameters of `ellipse()` as the location of one corner of the ellipse's bounding box, and the third and fourth parameters as the location of the opposite corner.\\n\\nThe parameter must be written in ALL CAPS because Processing is a case-sensitive language.\",\"docUrl\":\"https://processing.org/reference/ellipseMode_.html\",\"name\":null,\"parameters\":{\"mode\":\"int: either CENTER, RADIUS, CORNER, or CORNERS\"},\"returns\":\"void\",\"syntax\":\"ellipseMode(mode)\",\"type\":\"function\"},\"emissive\":{\"description\":\"Sets the emissive color of the material used for drawing shapes drawn to the screen. Used in combination with `ambient()`, `specular()`, and `shininess()` in setting the material properties of shapes.\",\"docUrl\":\"https://processing.org/reference/emissive_.html\",\"name\":null,\"parameters\":{\"gray\":\"float: value between black and white, by default 0 to 255\",\"rgb\":\"int: color to set\",\"v1\":\"float: red or hue value (depending on current color mode)\",\"v2\":\"float: green or saturation value (depending on current color mode)\",\"v3\":\"float: blue or brightness value (depending on current color mode)\"},\"returns\":\"void\",\"syntax\":\"emissive(rgb)\\nemissive(gray)\\nemissive(v1, v2, v3)\",\"type\":\"function\"},\"endCamera\":{\"description\":\"The `beginCamera()` and `endCamera()` functions enable advanced customization of the camera space. Please see the reference for `beginCamera()` for a description of how the functions are used.\",\"docUrl\":\"https://processing.org/reference/endCamera_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"endCamera()\",\"type\":\"function\"},\"endContour\":{\"description\":\"Use the `beginContour()` and `endContour()` function to create negative shapes within shapes such as the center of the letter 'O'. `beginContour()` begins recording vertices for the shape and `endContour()` stops recording. The vertices that define a negative shape must \\\"wind\\\" in the opposite direction from the exterior shape. First draw vertices for the exterior shape in clockwise order, then for internal shapes, draw vertices counterclockwise.\\n\\nThese functions can only be used within a `beginShape()`/`endShape()` pair and transformations such as `translate()`, `rotate()`, and `scale()` do not work within a `beginContour()`/`endContour()` pair. It is also not possible to use other shapes, such as `ellipse()` or `rect()` within.\",\"docUrl\":\"https://processing.org/reference/endContour_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"endContour()\",\"type\":\"function\"},\"endRaw\":{\"description\":\"Complement to `beginRaw()`; they must always be used together. See the `beginRaw()` reference for details.\",\"docUrl\":\"https://processing.org/reference/endRaw_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"endRaw()\",\"type\":\"function\"},\"endRecord\":{\"description\":\"Stops the recording process started by `beginRecord()` and closes the file.\",\"docUrl\":\"https://processing.org/reference/endRecord_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"endRecord()\",\"type\":\"function\"},\"endShape\":{\"description\":\"The `endShape()` function is the companion to `beginShape()` and may only be called after `beginShape()`. When `endShape()` is called, all of image data defined since the previous call to `beginShape()` is written into the image buffer. The constant CLOSE as the value for the MODE parameter to close the shape (to connect the beginning and the end).\",\"docUrl\":\"https://processing.org/reference/endShape_.html\",\"name\":null,\"parameters\":{\"mode\":\"int: use CLOSE to close the shape\"},\"returns\":\"void\",\"syntax\":\"endShape()\\nendShape(mode)\",\"type\":\"function\"},\"exit\":{\"description\":\"Quits/stops/exits the program. Programs without a `draw()` function stop automatically after the last line has run, but programs with `draw()` run continuously until the program is manually stopped or `exit()` is run.\\n\\nRather than terminating immediately, `exit()` will cause the sketch to exit after `draw()` has completed (or after `setup()` completes if called during the `setup()` function).\\n\\nFor Java programmers, this is not the same as System.exit(). Further, System.exit() should not be used because closing out an application while `draw()` is running may cause a crash (particularly with P3D).\",\"docUrl\":\"https://processing.org/reference/exit_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"exit()\",\"type\":\"function\"},\"exp\":{\"description\":\"Returns Euler's number e (2.71828...) raised to the power of the `n` parameter.\",\"docUrl\":\"https://processing.org/reference/exp_.html\",\"name\":null,\"parameters\":{\"n\":\"float: exponent to raise\"},\"returns\":\"float\",\"syntax\":\"exp(n)\",\"type\":\"function\"},\"expand\":{\"description\":\"Increases the size of a one-dimensional array. By default, this function doubles the size of the array, but the optional `newSize` parameter provides precise control over the increase in size. \\n \\nWhen using an array of objects, the data returned from the function must be cast to the object array's data type. For example: SomeClass[] items = (SomeClass[]) expand(originalArray)\",\"docUrl\":\"https://processing.org/reference/expand_.html\",\"name\":null,\"parameters\":{\"list\":\"Object, String[], double[], float[], long[], int[], char[], byte[], or boolean[]: the array to expand\",\"newSize\":\"int: new size for the array\"},\"returns\":\"boolean[], byte[], char[], int[], long[], float[], double[], String[], or Object\",\"syntax\":\"expand(list)\\nexpand(list, newSize)\",\"type\":\"function\"},\"fill\":{\"description\":\"Sets the color used to fill shapes. For example, if you run `fill(204, 102, 0)`, all subsequent shapes will be filled with orange. This color is either specified in terms of the RGB or HSB color depending on the current `colorMode()`. The default color space is RGB, with each value in the range from 0 to 255.\\n\\nWhen using hexadecimal notation to specify a color, use \\\"`#`\\\" or \\\"`0x`\\\" before the values (e.g., `#CCFFAA` or `0xFFCCFFAA`). The `#` syntax uses six digits to specify a color (just as colors are typically specified in HTML and CSS). When using the hexadecimal notation starting with \\\"`0x`\\\", the hexadecimal value must be specified with eight characters; the first two characters define the alpha component, and the remainder define the red, green, and blue components. \\n\\nThe value for the \\\"gray\\\" parameter must be less than or equal to the current maximum value as specified by `colorMode()`. The default maximum value is 255.\\n\\nTo change the color of an image or a texture, use `tint()`.\",\"docUrl\":\"https://processing.org/reference/fill_.html\",\"name\":null,\"parameters\":{\"alpha\":\"float: opacity of the fill\",\"gray\":\"float: number specifying value between white and black\",\"rgb\":\"int: color variable or hex value\",\"v1\":\"float: red or hue value (depending on current color mode)\",\"v2\":\"float: green or saturation value (depending on current color mode)\",\"v3\":\"float: blue or brightness value (depending on current color mode)\"},\"returns\":\"void\",\"syntax\":\"fill(rgb)\\nfill(rgb, alpha)\\nfill(gray)\\nfill(gray, alpha)\\nfill(v1, v2, v3)\\nfill(v1, v2, v3, alpha)\",\"type\":\"function\"},\"filter\":{\"description\":\"Filters the display window using a preset filter or with a custom shader. Using a shader with `filter()` is much faster than without. Shaders require the P2D or P3D renderer in size().\\n\\nThe presets options are:\\n\\nTHRESHOLD\\nConverts the image to black and white pixels depending if they are above or below the threshold defined by the level parameter. The parameter must be between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\\n\\nGRAY\\nConverts any colors in the image to grayscale equivalents. No parameter is used.\\n\\nOPAQUE\\nSets the alpha channel to entirely opaque. No parameter is used.\\n\\nINVERT\\nSets each pixel to its inverse value. No parameter is used.\\n\\nPOSTERIZE\\nLimits each channel of the image to the number of colors specified as the parameter. The parameter can be set to values between 2 and 255, but results are most noticeable in the lower ranges.\\n\\nBLUR\\nExecutes a Guassian blur with the level parameter specifying the extent of the blurring. If no parameter is used, t. . .\",\"docUrl\":\"https://processing.org/reference/filter_.html\",\"name\":null,\"parameters\":{\"kind\":\"int: Either THRESHOLD, GRAY, OPAQUE, INVERT, POSTERIZE, BLUR, ERODE, or DILATE\",\"param\":\"float: unique for each, see above\",\"shader\":\"PShader: the fragment shader to apply\"},\"returns\":\"void\",\"syntax\":\"filter(shader)\\nfilter(kind)\\nfilter(kind, param)\",\"type\":\"function\"},\"float\":{\"description\":\"Converts an `int` or `String` to its floating point representation.  An `int` is easily converted to a `float`, but the contents of a `String` must resemble a number, or `NaN` (not a number) will be returned.  For example, `float(\\\"1234.56\\\")` evaluates to `1234.56`, but `float(\\\"giraffe\\\")` will return `NaN`.\\n\\nWhen an array of `int` or `String` values is passed in, then a floating point array of the same length is returned.\",\"docUrl\":\"https://processing.org/reference/floatconvert_.html\",\"name\":null,\"parameters\":{},\"type\":\"function\"},\"floor\":{\"description\":\"Calculates the closest int value that is less than or equal to the value of the parameter.\",\"docUrl\":\"https://processing.org/reference/floor_.html\",\"name\":null,\"parameters\":{\"n\":\"float: number to round down\"},\"returns\":\"int\",\"syntax\":\"floor(n)\",\"type\":\"function\"},\"focused\":{\"description\":\"Confirms if a Processing program is \\\"focused,\\\" meaning that it is active and will accept mouse or keyboard input. This variable is \\\"true\\\" if it is focused and \\\"false\\\" if not.\",\"docUrl\":\"https://processing.org/reference/focused.html\",\"examples\":\"if (focused) {  // or \\\"if (focused == true)\\\"\\n  ellipse(25, 25, 50, 50);\\n} else {\\n  line(0, 0, 100, 100);\\n  line(100, 0, 0, 100);\\n}\\n\",\"name\":null,\"type\":\"var\"},\"frameCount\":{\"description\":\"The system variable `frameCount` contains the number of frames that have been displayed since the program started. Inside `setup()` the value is 0, after the first iteration of draw it is 1, etc.\",\"docUrl\":\"https://processing.org/reference/frameCount.html\",\"examples\":\"void setup() {\\n  frameRate(30);\\n}\\n\\nvoid draw() {\\n  line(0, 0, width, height);\\n  println(frameCount);\\n}\\n\",\"name\":null,\"type\":\"var\"},\"frameRate\":{\"description\":\"Specifies the number of frames to be displayed every second. For example, the function call `frameRate(30)` will attempt to refresh 30 times a second. If the processor is not fast enough to maintain the specified rate, the frame rate will not be achieved. Setting the frame rate within `setup()` is recommended. The default rate is 60 frames per second.\",\"docUrl\":\"https://processing.org/reference/frameRate_.html\",\"name\":null,\"parameters\":{\"fps\":\"float: number of desired frames per second\"},\"returns\":\"void\",\"syntax\":\"frameRate(fps)\",\"type\":\"function\"},\"frustum\":{\"description\":\"Sets a perspective matrix as defined by the parameters.\\n\\nA frustum is a geometric form: a pyramid with its top cut off.  With the viewer's eye at the imaginary top of the pyramid, the six planes of the frustum act as clipping planes when rendering a 3D view.  Thus, any form inside the clipping planes is rendered and visible; anything outside those planes is not visible.\\n\\nSetting the frustum has the effect of changing the perspective with which the scene is rendered.  This can be achieved more simply in many cases by using perspective().\\n\\nNote that the near value must be greater than zero (as the point of the frustum \\\"pyramid\\\" cannot converge \\\"behind\\\" the viewer).  Similarly, the far value must be greater than the near value (as the \\\"far\\\" plane of the frustum must be \\\"farther away\\\" from the viewer than the near plane).\\n\\nWorks like glFrustum, except it wipes out the current perspective matrix rather than multiplying itself with it.\",\"docUrl\":\"https://processing.org/reference/frustum_.html\",\"name\":null,\"parameters\":{\"bottom\":\"float: bottom coordinate of the clipping plane\",\"far\":\"float: far component of the clipping plane; must be greater than the near value\",\"left\":\"float: left coordinate of the clipping plane\",\"near\":\"float: near component of the clipping plane; must be greater than zero\",\"right\":\"float: right coordinate of the clipping plane\",\"top\":\"float: top coordinate of the clipping plane\"},\"returns\":\"void\",\"syntax\":\"frustum(left, right, bottom, top, near, far)\",\"type\":\"function\"},\"fullScreen\":{\"description\":\"This function is new for Processing 3.0. It opens a sketch using the full size of the computer's display. This function must be the first line in `setup()`. The `size()` and `fullScreen()` functions cannot both be used in the same program, just choose one.\\n\\nWhen `fullScreen()` is used without a parameter, it draws the sketch to the screen currently selected inside the Preferences window. When it is used with a single parameter, this number defines the screen to display to program on (e.g. 1, 2, 3...). When used with two parameters, the first defines the renderer to use (e.g. P2D) and the second defines the screen. The `SPAN` parameter can be used in place of a screen number to draw the sketch as a full-screen window across all of the attached displays if there are more than one.\\n\\nPrior to Processing 3.0, a full-screen program was defined with `size(displayWidth, displayHeight)`.\",\"docUrl\":\"https://processing.org/reference/fullScreen_.html\",\"name\":null,\"parameters\":{\"display\":\"int: the screen to run the sketch on (1, 2, 3, etc. or on multiple screens using SPAN)\",\"renderer\":\"String: the renderer to use, e.g. P2D, P3D, JAVA2D (default)\"},\"returns\":\"void\",\"syntax\":\"fullScreen()\\nfullScreen(display)\\nfullScreen(renderer)\\nfullScreen(renderer, display)\",\"type\":\"function\"},\"get\":{\"description\":\"Reads the color of any pixel or grabs a section of an image. If no parameters are specified, the entire image is returned. Use the `x` and `y` parameters to get the value of one pixel. Get a section of the display window by specifying additional `w` and `h` parameters. When getting an image, the `x` and `y` parameters define the coordinates for the upper-left corner of the image, regardless of the current `imageMode()`.\\n\\nIf the pixel requested is outside of the image window, black is returned. The numbers returned are scaled according to the current color ranges, but only RGB values are returned by this function. For example, even though you may have drawn a shape with `colorMode(HSB)`, the numbers returned will be in RGB format.\\n\\nIf a width and a height are specified, `get(x, y, w, h)` returns a PImage corresponding to the part of the original PImage where the top left pixel is at the `(x, y)` position with a width of `w` a height of `h`.\\n\\nGetting the color of a single pixel with `get. . .\",\"docUrl\":\"https://processing.org/reference/get_.html\",\"name\":null,\"parameters\":{\"h\":\"int: height of pixel rectangle to get\",\"w\":\"int: width of pixel rectangle to get\",\"x\":\"int: x-coordinate of the pixel\",\"y\":\"int: y-coordinate of the pixel\"},\"returns\":\"int or PImage\",\"syntax\":\"get(x, y)\\nget(x, y, w, h)\\nget()\",\"type\":\"function\"},\"green\":{\"description\":\"Extracts the green value from a color, scaled to match current `colorMode()`. The value is always returned as a float, so be careful not to assign it to an int value.\\n\\nThe `green()` function is easy to use and understand, but it is slower than a technique called bit shifting. When working in `colorMode(RGB, 255)`, you can acheive the same results as `green()` but with greater speed by using the right shift operator (`>>`) with a bit mask. For example, the following two lines of code are equivalent means of getting the green value of the color value `c`:\\n\\n`float g1 = green(c);  // Simpler, but slower to calculate\\nfloat g2 = c >> 8 &amp; 0xFF;  // Very fast to calculate`\",\"docUrl\":\"https://processing.org/reference/green_.html\",\"name\":null,\"parameters\":{\"rgb\":\"int: any value of the color datatype\"},\"returns\":\"float\",\"syntax\":\"green(rgb)\",\"type\":\"function\"},\"height\":{\"description\":\"System variable that stores the height of the display window. This value is set by the second parameter of the `size()` function. For example, the function call `size(320, 240)` sets the `height` variable to the value 240. The value of `height` defaults to 100 if `size()` is not used in a program.\",\"docUrl\":\"https://processing.org/reference/height.html\",\"examples\":\"noStroke();\\nbackground(0);\\nrect(40, 0, 20, height);\\nrect(60, 0, 20, height/2);\\n\",\"name\":null,\"type\":\"var\"},\"hex\":{\"description\":\"Converts an `int`, `byte`, `char`, or `color` to a `String` containing the equivalent hexadecimal notation. For example, the `color` value produced by `color(0, 102, 153)` will convert to the `String` value `\\\"FF006699\\\"`. This function can help make your geeky debugging sessions much happier.\\n\\nNote that the maximum number of digits is 8, because an `int` value can only represent up to 32 bits. Specifying more than 8 digits will not increase the length of the `String` further.\",\"docUrl\":\"https://processing.org/reference/hex_.html\",\"name\":null,\"parameters\":{\"digits\":\"int: the number of digits (maximum 8)\",\"value\":\"int, char, or byte: the value to convert\"},\"returns\":\"String\",\"syntax\":\"hex(value)\\nhex(value, digits)\",\"type\":\"function\"},\"hint\":{\"description\":\"This function is used to enable or disable special features that control how graphics are drawn. In the course of developing Processing, we had to make hard decisions about tradeoffs between performance and visual quality. We put significant effort into determining what makes most sense for the largest number of users, and then use functions like `hint()` to allow people to tune the settings for their particular sketch. Implementing a `hint()` is a last resort that's used when a more elegant solution cannot be found. Some options might graduate to standard features instead of hints over time, or be added and removed between (major) releases.\\n\\n\\nHints used by the default renderer:\\n\\n`ENABLE_STROKE_PURE`\\nFixes a problem with shapes that have a stroke and are rendered using small steps (for instance, using vertex() with points that are close to one another), or are drawn at small sizes.\\n\\n\\nHints for use with P2D and P3D:\\n\\n`DISABLE_ASYNC_SAVEFRAME`\\nsave() and saveFrame() will not use separate. . .\",\"docUrl\":\"https://processing.org/reference/hint_.html\",\"name\":null,\"parameters\":{\"which\":\"int: the hint mode to use\"},\"syntax\":\"hint(which)\\n\",\"type\":\"function\"},\"hour\":{\"description\":\"Processing communicates with the clock on your computer. The `hour()` function returns the current hour as a value from 0 - 23.\",\"docUrl\":\"https://processing.org/reference/hour_.html\",\"name\":null,\"parameters\":{},\"returns\":\"int\",\"syntax\":\"hour()\",\"type\":\"function\"},\"hue\":{\"description\":\"Extracts the hue value from a color.\",\"docUrl\":\"https://processing.org/reference/hue_.html\",\"name\":null,\"parameters\":{\"rgb\":\"int: any value of the color datatype\"},\"returns\":\"float\",\"syntax\":\"hue(rgb)\",\"type\":\"function\"},\"image\":{\"description\":\"The `image()` function draws an image to the display window. Images must be in the sketch's \\\"data\\\" directory to load correctly. Select \\\"Add file...\\\" from the \\\"Sketch\\\" menu to add the image to the data directory, or just drag the image file onto the sketch window. Processing currently works with GIF, JPEG, and PNG images. \\n\\nThe `img` parameter specifies the image to display and by default the `a` and `b` parameters define the location of its upper-left corner. The image is displayed at its original size unless the `c` and `d` parameters specify a different size. The `imageMode()` function can be used to change the way these parameters draw the image.\\n\\nThe color of an image may be modified with the `tint()` function. This function will maintain transparency for GIF and PNG images.\",\"docUrl\":\"https://processing.org/reference/image_.html\",\"name\":null,\"parameters\":{\"a\":\"float: x-coordinate of the image by default\",\"b\":\"float: y-coordinate of the image by default\",\"c\":\"float: width to display the image by default\",\"d\":\"float: height to display the image by default\",\"img\":\"PImage: the image to display\"},\"returns\":\"void\",\"syntax\":\"image(img, a, b)\\nimage(img, a, b, c, d)\",\"type\":\"function\"},\"imageMode\":{\"description\":\"Modifies the location from which images are drawn by changing the way in which parameters given to `image()` are intepreted.\\n\\nThe default mode is `imageMode(CORNER)`, which interprets the second and third parameters of `image()` as the upper-left corner of the image. If two additional parameters are specified, they are used to set the image's width and height.\\n\\n`imageMode(CORNERS)` interprets the second and third parameters of `image()` as the  location of one corner, and the fourth and fifth parameters as the opposite corner.\\n\\n`imageMode(CENTER)` interprets the second and third parameters of `image()` as the image's center point. If two additional parameters are specified, they are used to set the image's width and height.\\n\\nThe parameter must be written in ALL CAPS because Processing is a case-sensitive language.\",\"docUrl\":\"https://processing.org/reference/imageMode_.html\",\"name\":null,\"parameters\":{\"mode\":\"int: either CORNER, CORNERS, or CENTER\"},\"returns\":\"void\",\"syntax\":\"imageMode(mode)\",\"type\":\"function\"},\"int\":{\"description\":\"Converts any value of a primitive data type (`boolean`, `byte`, `char`, `color`, `float`, `int`, or `long`) or String to its integer representation.\\n\\nWhen an array of values is passed in, then an `int` array of the same length is returned.\",\"docUrl\":\"https://processing.org/reference/intconvert_.html\",\"name\":null,\"parameters\":{},\"type\":\"function\"},\"join\":{\"description\":\"Combines an array of Strings into one String, each separated by the character(s) used for the `separator` parameter. To join arrays of ints or floats, it's necessary to first convert them to Strings using `nf()` or `nfs()`.\",\"docUrl\":\"https://processing.org/reference/join_.html\",\"name\":null,\"parameters\":{\"list\":\"String[]: array of Strings\",\"separator\":\"char: char or String to be placed between each item\"},\"returns\":\"String\",\"syntax\":\"join(list, separator)\",\"type\":\"function\"},\"key\":{\"description\":\"The system variable `key` always contains the value of the most recent key on the keyboard that was used (either pressed or released). \\n \\nFor non-ASCII keys, use the `keyCode` variable. The keys included in the ASCII specification (BACKSPACE, TAB, ENTER, RETURN, ESC, and DELETE) do not require checking to see if the key is coded, and you should simply use the `key` variable instead of `keyCode` If you're making cross-platform projects, note that the ENTER key is commonly used on PCs and Unix and the RETURN key is used instead on Macintosh. Check for both ENTER and RETURN to make sure your program will work for all platforms.\\n\\nThere are issues with how `keyCode` behaves across different renderers and operating systems. Watch out for unexpected behavior as you switch renderers and operating systems.\",\"docUrl\":\"https://processing.org/reference/key.html\",\"examples\":\"// Click on the window to give it focus,\\n// and press the 'B' key.\\n\\nvoid draw() {\\n  if (keyPressed) {\\n    if (key == 'b' || key == 'B') {\\n      fill(0);\\n    }\\n  } else {\\n    fill(255);\\n  }\\n  rect(25, 25, 50, 50);\\n}\\n\",\"name\":null,\"type\":\"var\"},\"keyCode\":{\"description\":\"The variable `keyCode` is used to detect special keys such as the arrow keys (UP, DOWN, LEFT, and RIGHT) as well as ALT, CONTROL, and SHIFT.\\n\\nWhen checking for these keys, it can be useful to first check if the key is coded. This is done with the conditional `if (key == CODED)`, as shown in the example above.\\n\\nThe keys included in the ASCII specification (BACKSPACE, TAB, ENTER, RETURN, ESC, and DELETE) do not require checking to see if the key is coded; for those keys, you should simply use the `key` variable directly (and not `keyCode`).  If you're making cross-platform projects, note that the ENTER key is commonly used on PCs and Unix, while the RETURN key is used on Macs. Make sure your program will work on all platforms by checking for both ENTER and RETURN.\\n\\nFor those familiar with Java, the values for UP and DOWN are simply shorter versions of Java's `KeyEvent.VK_UP` and `KeyEvent.VK_DOWN`. Other `keyCode` values can be found in the Java KeyEvent reference.\\n\\nThere are issues with. . .\",\"docUrl\":\"https://processing.org/reference/keyCode.html\",\"examples\":\"color fillVal = color(126);\\n\\nvoid draw() {\\n  fill(fillVal);\\n  rect(25, 25, 50, 50);\\n}\\n\\nvoid keyPressed() {\\n  if (key == CODED) {\\n    if (keyCode == UP) {\\n      fillVal = 255;\\n    } else if (keyCode == DOWN) {\\n      fillVal = 0;\\n    } \\n  } else {\\n    fillVal = 126;\\n  }\\n}\\n\",\"name\":null,\"type\":\"var\"},\"keyPressed\":{\"description\":\"The boolean system variable `keyPressed` is `true` if any key is pressed and `false` if no keys are pressed.\\n\\nNote that there is a similarly named function called `keyPressed()`.  See its reference page for more information.\",\"docUrl\":\"https://processing.org/reference/keyPressed.html\",\"examples\":\"// Click on the image to give it focus,\\n// and then press any key.\\n\\n// Note: The rectangle in this example may \\n// flicker as the operating system may \\n// register a long key press as a repetition\\n// of key presses.\\n\\nvoid draw() {\\n  if (keyPressed == true) {\\n    fill(0);\\n  } else {\\n    fill(255);\\n  }\\n  rect(25, 25, 50, 50);\\n}\\n\",\"name\":null,\"type\":\"var\"},\"keyReleased\":{\"description\":\"The `keyReleased()` function is called once every time a key is released. The key that was released will be stored in the `key` variable. See `key` and `keyCode` for more information.\\n\\nMouse and keyboard events only work when a program has `draw()`. Without `draw()`, the code is only run once and then stops listening for events.\",\"docUrl\":\"https://processing.org/reference/keyReleased_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"keyReleased()\\nkeyReleased(event)\",\"type\":\"function\"},\"keyTyped\":{\"description\":\"The `keyTyped()` function is called once every time a key is pressed, but action keys such as Ctrl, Shift, and Alt are ignored.\\n\\nBecause of how operating systems handle key repeats, holding down a key may cause multiple calls to `keyTyped()`. The rate of repeat is set by the operating system, and may be configured differently on each computer.\\n\\nMouse and keyboard events only work when a program has `draw()`. Without `draw()`, the code is only run once and then stops listening for events.\",\"docUrl\":\"https://processing.org/reference/keyTyped_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"keyTyped()\\nkeyTyped(event)\",\"type\":\"function\"},\"launch\":{\"description\":\"Attempts to open an application or file using your platform's launcher. The `filename` parameter is a String specifying the file name and location. The location parameter must be a full path name, or the name of an executable in the system's PATH. In most cases, using a full path is the best option, rather than relying on the system PATH. Be sure to make the file executable before attempting to open it (chmod +x).\\n\\nThis function (roughly) emulates what happens when you double-click an application or document in the macOS Finder, the Windows Explorer, or your favorite Linux file manager. If you're trying to run command line functions directly, use the `exec()` function instead (see below).\\n\\nThis function behaves differently on each platform. On Windows, the parameters are sent to the Windows shell via \\\"cmd /c\\\". On Mac OS X, the \\\"open\\\" command is used (type \\\"man open\\\" in Terminal.app for documentation). On Linux, it first tries gnome-open, then kde-open, but if neither are available, it . . .\",\"docUrl\":\"https://processing.org/reference/launch_.html\",\"name\":null,\"parameters\":{\"args\":\"String[]: arguments to the launcher, eg. a filename.\"},\"returns\":\"Process\",\"syntax\":\"launch(args)\",\"type\":\"function\"},\"lerp\":{\"description\":\"Calculates a number between two numbers at a specific increment. The `amt` parameter is the amount to interpolate between the two values where 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is half-way in between, etc. The lerp function is convenient for creating motion along a straight path and for drawing dotted lines.\",\"docUrl\":\"https://processing.org/reference/lerp_.html\",\"name\":null,\"parameters\":{\"amt\":\"float: float between 0.0 and 1.0\",\"start\":\"float: first value\",\"stop\":\"float: second value\"},\"returns\":\"float\",\"syntax\":\"lerp(start, stop, amt)\",\"type\":\"function\"},\"lerpColor\":{\"description\":\"Calculates a color between two colors at a specific increment. The `amt` parameter is the amount to interpolate between the two values where 0.0 is equal to the first point, 0.1 is very near the first point, 0.5 is halfway in between, etc. \\n\\nAn amount below 0 will be treated as 0. Likewise, amounts above 1 will be capped at 1. This is different from the behavior of lerp(), but necessary because otherwise numbers outside the range will produce strange and unexpected colors.\",\"docUrl\":\"https://processing.org/reference/lerpColor_.html\",\"name\":null,\"parameters\":{\"amt\":\"float: between 0.0 and 1.0\",\"c1\":\"int: interpolate from this color\",\"c2\":\"int: interpolate to this color\"},\"returns\":\"int\",\"syntax\":\"lerpColor(c1, c2, amt)\",\"type\":\"function\"},\"lightFalloff\":{\"description\":\"Sets the falloff rates for point lights, spot lights, and ambient lights. Like `fill()`, it affects only the elements which are created after it in the code. The default value is `lightFalloff(1.0, 0.0, 0.0)`, and the parameters are used to calculate the falloff with the following equation:\\n\\nd = distance from light position to vertex position\\nfalloff = 1 / (CONSTANT + d * LINEAR + (d*d) * QUADRATIC)\\n\\nThinking about an ambient light with a falloff can be tricky. If you want a region of your scene to be lit ambiently with one color and another region to be lit ambiently with another color, you could use an ambient light with location and falloff. You can think of it as a point light that doesn't care which direction a surface is facing.\",\"docUrl\":\"https://processing.org/reference/lightFalloff_.html\",\"name\":null,\"parameters\":{\"constant\":\"float: constant value or determining falloff\",\"linear\":\"float: linear value for determining falloff\",\"quadratic\":\"float: quadratic value for determining falloff\"},\"returns\":\"void\",\"syntax\":\"lightFalloff(constant, linear, quadratic)\",\"type\":\"function\"},\"lightSpecular\":{\"description\":\"Sets the specular color for lights. Like `fill()`, it affects only the elements which are created after it in the code. Specular refers to light which bounces off a surface in a preferred direction (rather than bouncing in all directions like a diffuse light) and is used for creating highlights. The specular quality of a light interacts with the specular material qualities set through the `specular()` and `shininess()` functions.\",\"docUrl\":\"https://processing.org/reference/lightSpecular_.html\",\"name\":null,\"parameters\":{\"v1\":\"float: red or hue value (depending on current color mode)\",\"v2\":\"float: green or saturation value (depending on current color mode)\",\"v3\":\"float: blue or brightness value (depending on current color mode)\"},\"returns\":\"void\",\"syntax\":\"lightSpecular(v1, v2, v3)\",\"type\":\"function\"},\"lights\":{\"description\":\"Sets the default ambient light, directional light, falloff, and specular values. The defaults are ambientLight(128, 128, 128) and directionalLight(128, 128, 128, 0, 0, -1), lightFalloff(1, 0, 0), and lightSpecular(0, 0, 0). Lights need to be included in the draw() to remain persistent in a looping program. Placing them in the setup() of a looping program will cause them to only have an effect the first time through the loop.\",\"docUrl\":\"https://processing.org/reference/lights_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"lights()\",\"type\":\"function\"},\"line\":{\"description\":\"Draws a line (a direct path between two points) to the screen. The version of `line()` with four parameters draws the line in 2D.  To color a line, use the `stroke()` function. A line cannot be filled, therefore the `fill()` function will not affect the color of a line. 2D lines are drawn with a width of one pixel by default, but this can be changed with the `strokeWeight()` function. The version with six parameters allows the line to be placed anywhere within XYZ space. Drawing this shape in 3D with the `z` parameter requires the P3D parameter in combination with `size()` as shown in the above example.\",\"docUrl\":\"https://processing.org/reference/line_.html\",\"name\":null,\"parameters\":{\"x1\":\"float: x-coordinate of the first point\",\"x2\":\"float: x-coordinate of the second point\",\"y1\":\"float: y-coordinate of the first point\",\"y2\":\"float: y-coordinate of the second point\",\"z1\":\"float: z-coordinate of the first point\",\"z2\":\"float: z-coordinate of the second point\"},\"returns\":\"void\",\"syntax\":\"line(x1, y1, x2, y2)\\nline(x1, y1, z1, x2, y2, z2)\",\"type\":\"function\"},\"loadBytes\":{\"description\":\"Reads the contents of a file and places it in a byte array. If the name of the file is used as the parameter, as in the above example, the file must be loaded in the sketch's \\\"data\\\" directory/folder. \\n\\nAlternatively, the file maybe be loaded from anywhere on the local computer using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows), or the filename parameter can be a URL for a file found on a network.\\n\\nIf the file is not available or an error occurs, `null` will be returned and an error message will be printed to the console. The error message does not halt the program, however the null value may cause a NullPointerException if your code does not check whether the value returned is null.\",\"docUrl\":\"https://processing.org/reference/loadBytes_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: name of a file in the data folder or a URL.\"},\"returns\":\"byte[]\",\"syntax\":\"loadBytes(filename)\",\"type\":\"function\"},\"loadFont\":{\"description\":\"Loads a .vlw formatted font into a `PFont` object. Create a .vlw font by selecting \\\"Create Font...\\\" from the Tools menu. This tool creates a texture for each alphanumeric character and then adds them as a .vlw file to the current sketch's data folder. Because the letters are defined as textures (and not vector data) the size at which the fonts are created must be considered in relation to the size at which they are drawn. For example, load a 32pt font if the sketch displays the font at 32 pixels or smaller. Conversely, if a 12pt font is loaded and displayed at 48pts, the letters will be distorted because the program will be stretching a small graphic to a large size.\\n\\nLike `loadImage()` and other functions that load data, the `loadFont()` function should not be used inside `draw()`, because it will slow down the sketch considerably, as the font will be re-loaded from the disk (or network) on each frame. It's recommended to load files inside `setup()`\\n\\nTo load correctly, fonts must be l. . .\",\"docUrl\":\"https://processing.org/reference/loadFont_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: name of the font to load\"},\"returns\":\"PFont\",\"syntax\":\"loadFont(filename)\",\"type\":\"function\"},\"loadImage\":{\"description\":\"Loads an image into a variable of type `PImage`. Four types of images ( `.gif`, `.jpg`, `.tga`, `.png`) images may be loaded. To load correctly, images must be located in the data directory of the current sketch.\\n\\nIn most cases, load all images in `setup()` to preload them at the start of the program. Loading images inside `draw()` will reduce the speed of a program. Images cannot be loaded outside `setup()` unless they're inside a function that's called after `setup()` has already run.\\n\\nAlternatively, the file maybe be loaded from anywhere on the local computer using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows), or the filename parameter can be a URL for a file found on a network.\\n\\nIf the file is not available or an error occurs, `null` will be returned and an error message will be printed to the console. The error message does not halt the program, however the null value may cause a NullPointerException if your code does not check wh. . .\",\"docUrl\":\"https://processing.org/reference/loadImage_.html\",\"name\":null,\"parameters\":{\"extension\":\"String: type of image to load, for example \\\"png\\\", \\\"gif\\\", \\\"jpg\\\"\",\"filename\":\"String: name of file to load, can be .gif, .jpg, .tga, or a handful of other image types depending on your platform\"},\"returns\":\"PImage\",\"syntax\":\"loadImage(filename)\\nloadImage(filename, extension)\",\"type\":\"function\"},\"loadJSONArray\":{\"description\":\"Loads an array of JSON objects from the data folder or a URL, and returns a `JSONArray`.  Per standard JSON syntax, the array must be enclosed in a pair of hard brackets `[]`, and each object within the array must be separated by a comma.\\n\\nAll files loaded and saved by the Processing API use UTF-8 encoding.\",\"docUrl\":\"https://processing.org/reference/loadJSONArray_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: name of a file in the data folder or a URL\"},\"returns\":\"JSONArray\",\"syntax\":\"loadJSONArray(filename)\\nloadJSONArray(file)\",\"type\":\"function\"},\"loadJSONObject\":{\"description\":\"Loads a JSON from the data folder or a URL, and returns a `JSONObject`.\\n\\nAll files loaded and saved by the Processing API use UTF-8 encoding.\",\"docUrl\":\"https://processing.org/reference/loadJSONObject_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: name of a file in the data folder or a URL\"},\"returns\":\"JSONObject\",\"syntax\":\"loadJSONObject(filename)\",\"type\":\"function\"},\"loadPixels\":{\"description\":\"Loads the pixel data of the current display window into the `pixels[]` array. This function must always be called before reading from or writing to `pixels[]`. Subsequent changes to the display window will not be reflected in `pixels` until `loadPixels()` is called again.\",\"docUrl\":\"https://processing.org/reference/loadPixels_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"loadPixels()\",\"type\":\"function\"},\"loadShader\":{\"description\":\"Loads a shader into the PShader object. The shader file must be loaded in the sketch's \\\"data\\\" folder/directory to load correctly. Shaders are compatible with the P2D and P3D renderers, but not with the default renderer.\\n\\nAlternatively, the file maybe be loaded from anywhere on the local computer using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows), or the filename parameter can be a URL for a file found on a network.\\n\\nIf the file is not available or an error occurs, `null` will be returned and an error message will be printed to the console. The error message does not halt the program, however the null value may cause a NullPointerException if your code does not check whether the value returned is null.\",\"docUrl\":\"https://processing.org/reference/loadShader_.html\",\"name\":null,\"parameters\":{\"fragFilename\":\"String: name of fragment shader file\",\"vertFilename\":\"String: name of vertex shader file\"},\"returns\":\"PShader\",\"syntax\":\"loadShader(fragFilename)\\nloadShader(fragFilename, vertFilename)\",\"type\":\"function\"},\"loadShape\":{\"description\":\"Loads geometry into a variable of type `PShape`. SVG and OBJ files may be loaded. To load correctly, the file must be located in the data directory of the current sketch. In most cases, `loadShape()` should be used inside `setup()` because loading shapes inside `draw()` will reduce the speed of a sketch.\\n\\nAlternatively, the file maybe be loaded from anywhere on the local computer using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows), or the filename parameter can be a URL for a file found on a network.\\n\\nIf the file is not available or an error occurs, `null` will be returned and an error message will be printed to the console. The error message does not halt the program, however the null value may cause a NullPointerException if your code does not check whether the value returned is null.\",\"docUrl\":\"https://processing.org/reference/loadShape_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: name of file to load, can be .svg or .obj\"},\"returns\":\"PShape\",\"syntax\":\"loadShape(filename)\",\"type\":\"function\"},\"loadStrings\":{\"description\":\"Reads the contents of a file and creates a String array of its individual lines. If the name of the file is used as the parameter, as in the above example, the file must be loaded in the sketch's \\\"data\\\" directory/folder. \\n\\nAlternatively, the file maybe be loaded from anywhere on the local computer using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows), or the filename parameter can be a URL for a file found on a network.\\n\\nIf the file is not available or an error occurs, `null` will be returned and an error message will be printed to the console. The error message does not halt the program, however the null value may cause a NullPointerException if your code does not check whether the value returned is null.\\n\\nStarting with Processing release 0134, all files loaded and saved by the Processing API use UTF-8 encoding. In previous releases, the default encoding for your platform was used, which causes problems when files are moved to other plat. . .\",\"docUrl\":\"https://processing.org/reference/loadStrings_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: name of the file or url to load\"},\"returns\":\"String[]\",\"syntax\":\"loadStrings(filename)\\nloadStrings(reader)\",\"type\":\"function\"},\"loadTable\":{\"description\":\"Reads the contents of a file or URL and creates an Table object with its values. If a file is specified, it must be located in the sketch's \\\"data\\\" folder. The filename parameter can also be a URL to a file found online. The filename must either end in an extension or an extension must be specified in the `options` parameter. For example, to use tab-separated data, include \\\"tsv\\\" in the options parameter if the filename or URL does not end in `.tsv`. Note: If an extension is in both places, the extension in the `options` is used.\\n\\nIf the file contains a header row, include \\\"header\\\" in the `options` parameter. If the file does not have a header row, then simply omit the \\\"header\\\" option.\\n\\nSome CSV files contain newline (CR or LF) characters inside cells. This is rare, but adding the \\\"newlines\\\" option will handle them properly. (This is not enabled by default because the parsing code is much slower.)\\n\\nWhen specifying multiple options, separate them with commas, as in: `loadTable(\\\"data.csv\\\",. . .\",\"docUrl\":\"https://processing.org/reference/loadTable_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: name of a file in the data folder or a URL.\",\"options\":\"String: may contain \\\"header\\\", \\\"tsv\\\", \\\"csv\\\", or \\\"bin\\\" separated by commas\"},\"returns\":\"Table\",\"syntax\":\"loadTable(filename)\\nloadTable(filename, options)\",\"type\":\"function\"},\"loadXML\":{\"description\":\"Reads the contents of a file or URL and creates an XML object with its values. If a file is specified, it must be located in the sketch's \\\"data\\\" folder. The filename parameter can also be a URL to a file found online.\\n\\nAll files loaded and saved by the Processing API use UTF-8 encoding. If you need to load an XML file that's not in UTF-8 format, see the developer's reference for the XML object.\",\"docUrl\":\"https://processing.org/reference/loadXML_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: name of a file in the data folder or a URL.\"},\"returns\":\"XML\",\"syntax\":\"loadXML(filename)\",\"type\":\"function\"},\"log\":{\"description\":\"Calculates the natural logarithm (the base-e logarithm) of a number. This function expects the `n` parameter to be a value greater than 0.0.\",\"docUrl\":\"https://processing.org/reference/log_.html\",\"name\":null,\"parameters\":{\"n\":\"float: number greater than 0.0\"},\"returns\":\"float\",\"syntax\":\"log(n)\",\"type\":\"function\"},\"loop\":{\"description\":\"By default, Processing loops through `draw()` continuously, executing the code within it. However, the `draw()` loop may be stopped by calling `noLoop()`. In that case, the `draw()` loop can be resumed with `loop()`.\",\"docUrl\":\"https://processing.org/reference/loop_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"loop()\",\"type\":\"function\"},\"mag\":{\"description\":\"Calculates the magnitude (or length) of a vector. A vector is a direction in space commonly used in computer graphics and linear algebra. Because it has no \\\"start\\\" position, the magnitude of a vector can be thought of as the distance from the coordinate 0,0 to its x,y value. Therefore, `mag()` is a shortcut for writing `dist(0, 0, x, y)`.\",\"docUrl\":\"https://processing.org/reference/mag_.html\",\"name\":null,\"parameters\":{\"a\":\"float: first value\",\"b\":\"float: second value\",\"c\":\"float: third value\"},\"returns\":\"float\",\"syntax\":\"mag(a, b)\\nmag(a, b, c)\",\"type\":\"function\"},\"map\":{\"description\":\"Re-maps a number from one range to another.\\n\\nIn the first example above, the number 25 is converted from a value in the range of 0 to 100 into a value that ranges from the left edge of the window (0) to the right edge (width).\\n\\nAs shown in the second example, numbers outside of the range are not clamped to the minimum and maximum parameters values, because out-of-range values are often intentional and useful.\",\"docUrl\":\"https://processing.org/reference/map_.html\",\"name\":null,\"parameters\":{\"start1\":\"float: lower bound of the value's current range\",\"start2\":\"float: lower bound of the value's target range\",\"stop1\":\"float: upper bound of the value's current range\",\"stop2\":\"float: upper bound of the value's target range\",\"value\":\"float: the incoming value to be converted\"},\"returns\":\"float\",\"syntax\":\"map(value, start1, stop1, start2, stop2)\",\"type\":\"function\"},\"match\":{\"description\":\"This function is used to apply a regular expression to a piece of text, and return matching groups (elements found inside parentheses) as a String array. If there are no matches, a null value will be returned. If no groups are specified in the regular expression, but the sequence matches, an array of length 1 (with the matched text as the first element of the array) will be returned.\\n\\nTo use the function, first check to see if the result is null. If the result is null, then the sequence did not match at all. If the sequence did match, an array is returned.\\n\\nIf there are groups (specified by sets of parentheses) in the regular expression, then the contents of each will be returned in the array. Element [0] of a regular expression match returns the entire matching string, and the match groups start at element [1] (the first group is [1], the second [2], and so on).\\n\\nThe syntax can be found in the reference for Java's Pattern class. For regular expression syntax, read the Java Tutorial on. . .\",\"docUrl\":\"https://processing.org/reference/match_.html\",\"name\":null,\"parameters\":{\"regexp\":\"String: the regexp to be used for matching\",\"str\":\"String: the String to be searched\"},\"returns\":\"String[]\",\"syntax\":\"match(str, regexp)\",\"type\":\"function\"},\"matchAll\":{\"description\":\"This function is used to apply a regular expression to a piece of text, and return a list of matching groups (elements found inside parentheses) as a two-dimensional String array. If there are no matches, a null value will be returned. If no groups are specified in the regular expression, but the sequence matches, a two dimensional array is still returned, but the second dimension is only of length one.\\n\\nTo use the function, first check to see if the result is null. If the result is null, then the sequence did not match at all. If the sequence did match, a 2D array is returned.\\n\\nIf there are groups (specified by sets of parentheses) in the regular expression, then the contents of each will be returned in the array. Assuming a loop with counter variable i, element [i][0] of a regular expression match returns the entire matching string, and the match groups start at element [i][1] (the first group is [i][1], the second [i][2], and so on).\\n\\nThe syntax can be found in the reference for Jav. . .\",\"docUrl\":\"https://processing.org/reference/matchAll_.html\",\"name\":null,\"parameters\":{\"regexp\":\"String: the regexp to be used for matching\",\"str\":\"String: the String to be searched\"},\"returns\":\"String[][]\",\"syntax\":\"matchAll(str, regexp)\",\"type\":\"function\"},\"max\":{\"description\":\"Determines the largest value in a sequence of numbers, and then returns that value. `max()` accepts either two or three `float` or `int` values as parameters, or an array of any length.\",\"docUrl\":\"https://processing.org/reference/max_.html\",\"name\":null,\"parameters\":{\"a\":\"float, or int: first number to compare\",\"b\":\"float, or int: second number to compare\",\"c\":\"float, or int: third number to compare\",\"list\":\"float[], or int[]: array of numbers to compare\"},\"returns\":\"int or float\",\"syntax\":\"max(a, b)\\nmax(a, b, c)\\nmax(list)\",\"type\":\"function\"},\"millis\":{\"description\":\"Returns the number of milliseconds (thousandths of a second) since starting the program. This information is often used for timing events and animation sequences.\",\"docUrl\":\"https://processing.org/reference/millis_.html\",\"name\":null,\"parameters\":{},\"returns\":\"int\",\"syntax\":\"millis()\",\"type\":\"function\"},\"min\":{\"description\":\"Determines the smallest value in a sequence of numbers, and then returns that value. `min()` accepts either two or three `float` or `int` values as parameters, or an array of any length.\",\"docUrl\":\"https://processing.org/reference/min_.html\",\"name\":null,\"parameters\":{\"a\":\"int, or float: first number\",\"b\":\"int, or float: second number\",\"c\":\"int, or float: third number\",\"list\":\"float[], or int[]: array of numbers to compare\"},\"returns\":\"float or int\",\"syntax\":\"min(a, b)\\nmin(a, b, c)\\nmin(list)\",\"type\":\"function\"},\"minute\":{\"description\":\"Processing communicates with the clock on your computer. The `minute()` function returns the current minute as a value from 0 - 59.\",\"docUrl\":\"https://processing.org/reference/minute_.html\",\"name\":null,\"parameters\":{},\"returns\":\"int\",\"syntax\":\"minute()\",\"type\":\"function\"},\"modelX\":{\"description\":\"Returns the three-dimensional X, Y, Z position in model space. This returns the X value for a given coordinate based on the current set of transformations (scale, rotate, translate, etc.) The X value can be used to place an object in space relative to the location of the original point once the transformations are no longer in use. \\n \\nIn the example, the `modelX()`, `modelY()`, and `modelZ()` functions record the location of a box in space after being placed using a series of translate and rotate commands. After popMatrix() is called, those transformations no longer apply, but the (x, y, z) coordinate returned by the model functions is used to place another box in the same location.\",\"docUrl\":\"https://processing.org/reference/modelX_.html\",\"name\":null,\"parameters\":{\"x\":\"float: 3D x-coordinate to be mapped\",\"y\":\"float: 3D y-coordinate to be mapped\",\"z\":\"float: 3D z-coordinate to be mapped\"},\"returns\":\"float\",\"syntax\":\"modelX(x, y, z)\",\"type\":\"function\"},\"modelY\":{\"description\":\"Returns the three-dimensional X, Y, Z position in model space. This returns the Y value for a given coordinate based on the current set of transformations (scale, rotate, translate, etc.) The Y value can be used to place an object in space relative to the location of the original point once the transformations are no longer in use. \\n\\nIn the example, the `modelX()`, `modelY()`, and `modelZ()` functions record the location of a box in space after being placed using a series of translate and rotate commands. After popMatrix() is called, those transformations no longer apply, but the (x, y, z) coordinate returned by the model functions is used to place another box in the same location.\",\"docUrl\":\"https://processing.org/reference/modelY_.html\",\"name\":null,\"parameters\":{\"x\":\"float: 3D x-coordinate to be mapped\",\"y\":\"float: 3D y-coordinate to be mapped\",\"z\":\"float: 3D z-coordinate to be mapped\"},\"returns\":\"float\",\"syntax\":\"modelY(x, y, z)\",\"type\":\"function\"},\"modelZ\":{\"description\":\"Returns the three-dimensional X, Y, Z position in model space. This returns the Z value for a given coordinate based on the current set of transformations (scale, rotate, translate, etc.) The Z value can be used to place an object in space relative to the location of the original point once the transformations are no longer in use.\\n\\nIn the example, the `modelX()`, `modelY()`, and `modelZ()` functions record the location of a box in space after being placed using a series of translate and rotate commands. After popMatrix() is called, those transformations no longer apply, but the (x, y, z) coordinate returned by the model functions is used to place another box in the same location.\",\"docUrl\":\"https://processing.org/reference/modelZ_.html\",\"name\":null,\"parameters\":{\"x\":\"float: 3D x-coordinate to be mapped\",\"y\":\"float: 3D y-coordinate to be mapped\",\"z\":\"float: 3D z-coordinate to be mapped\"},\"returns\":\"float\",\"syntax\":\"modelZ(x, y, z)\",\"type\":\"function\"},\"month\":{\"description\":\"Processing communicates with the clock on your computer. The `month()` function returns the current month as a value from 1 - 12.\",\"docUrl\":\"https://processing.org/reference/month_.html\",\"name\":null,\"parameters\":{},\"returns\":\"int\",\"syntax\":\"month()\",\"type\":\"function\"},\"mouseButton\":{\"description\":\"When a mouse button is pressed, the value of the system variable `mouseButton` is set to either `LEFT`, `RIGHT`, or `CENTER`, depending on which button is pressed. (If no button is pressed, `mouseButton` may be reset to `0`. For that reason, it's best to use `mousePressed` first to test if any button is being pressed, and only then test the value of `mouseButton`, as shown in the examples above.)\",\"docUrl\":\"https://processing.org/reference/mouseButton.html\",\"examples\":\"// Click within the image and press\\n// the left and right mouse buttons to \\n// change the value of the rectangle\\nvoid draw() {\\n  if (mousePressed &amp;&amp; (mouseButton == LEFT)) {\\n    fill(0);\\n  } else if (mousePressed &amp;&amp; (mouseButton == RIGHT)) {\\n    fill(255);\\n  } else {\\n    fill(126);\\n  }\\n  rect(25, 25, 50, 50);\\n}\\n\\n\\n// Click within the image and press\\n// the left and right mouse buttons to \\n// change the value of the rectangle\\nvoid draw() {\\n  rect(25, 25, 50, 50);\\n}\\n\\nvoid mousePressed() {\\n  if (mouseButton == LEFT) {\\n    fill(0);\\n  } else if (mouseButton == RIGHT) {\\n    fill(255);\\n  } else {\\n    fill(126);\\n  }\\n}\\n\",\"name\":null,\"type\":\"var\"},\"mouseClicked\":{\"description\":\"The `mouseClicked()` function is called after a mouse button has been pressed and then released.\\n\\nMouse and keyboard events only work when a program has `draw()`. Without `draw()`, the code is only run once and then stops listening for events.\",\"docUrl\":\"https://processing.org/reference/mouseClicked_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"mouseClicked()\\nmouseClicked(event)\",\"type\":\"function\"},\"mouseDragged\":{\"description\":\"The `mouseDragged()` function is called once every time the mouse moves while a mouse button is pressed. (If a button is not being pressed, `mouseMoved()` is called instead.)\\n\\nMouse and keyboard events only work when a program has `draw()`. Without `draw()`, the code is only run once and then stops listening for events.\",\"docUrl\":\"https://processing.org/reference/mouseDragged_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"mouseDragged()\\nmouseDragged(event)\",\"type\":\"function\"},\"mouseMoved\":{\"description\":\"The `mouseMoved()` function is called every time the mouse moves and a mouse button is not pressed. (If a button is being pressed, `mouseDragged()` is called instead.)\\n\\nMouse and keyboard events only work when a program has `draw()`. Without `draw()`, the code is only run once and then stops listening for events.\",\"docUrl\":\"https://processing.org/reference/mouseMoved_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"mouseMoved()\\nmouseMoved(event)\",\"type\":\"function\"},\"mousePressed\":{\"description\":\"The `mousePressed()` function is called once after every time a mouse button is pressed. The `mouseButton` variable (see the related reference entry) can be used to determine which button has been pressed.\\n\\nMouse and keyboard events only work when a program has `draw()`. Without `draw()`, the code is only run once and then stops listening for events.\",\"docUrl\":\"https://processing.org/reference/mousePressed_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"mousePressed()\\nmousePressed(event)\",\"type\":\"function\"},\"mouseReleased\":{\"description\":\"The `mouseReleased()` function is called every time a mouse button is released.\\n\\nMouse and keyboard events only work when a program has `draw()`. Without `draw()`, the code is only run once and then stops listening for events.\",\"docUrl\":\"https://processing.org/reference/mouseReleased_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"mouseReleased()\\nmouseReleased(event)\",\"type\":\"function\"},\"mouseWheel\":{\"description\":\"The code within the `mouseWheel()` event function is run when the mouse wheel is moved. (Some mice don't have wheels and this function is only applicable with mice that have a wheel.) The `getCount()` function used within `mouseWheel()` returns positive values when the mouse wheel is rotated down (toward the user), and negative values for the other direction (up or away from the user). On OS X with \\\"natural\\\" scrolling enabled, the values are opposite.\\n\\nMouse and keyboard events only work when a program has `draw()`. Without `draw()`, the code is only run once and then stops listening for events.\",\"docUrl\":\"https://processing.org/reference/mouseWheel_.html\",\"name\":null,\"parameters\":{\"event\":\"MouseEvent: the MouseEvent\"},\"returns\":\"void\",\"syntax\":\"mouseWheel(event)\",\"type\":\"function\"},\"mouseX\":{\"description\":\"The system variable `mouseX` always contains the current horizontal coordinate of the mouse.\\n\\nNote that Processing can only track the mouse position when the pointer is over the current window. The default value of `mouseX` is `0`, so `0` will be returned until the mouse moves in front of the sketch window. (This typically happens when a sketch is first run.)  Once the mouse moves away from the window, `mouseX` will continue to report its most recent position.\",\"docUrl\":\"https://processing.org/reference/mouseX.html\",\"examples\":\"void draw() {\\n  background(204);\\n  line(mouseX, 20, mouseX, 80);\\n}\\n\",\"name\":null,\"type\":\"var\"},\"mouseY\":{\"description\":\"The system variable `mouseY` always contains the current vertical coordinate of the mouse.\\n\\nNote that Processing can only track the mouse position when the pointer is over the current window. The default value of `mouseY` is `0`, so `0` will be returned until the mouse moves in front of the sketch window. (This typically happens when a sketch is first run.)  Once the mouse moves away from the window, `mouseY` will continue to report its most recent position.\",\"docUrl\":\"https://processing.org/reference/mouseY.html\",\"examples\":\"void draw() {\\n  background(204);\\n  line(20, mouseY, 80, mouseY);\\n}\\n\",\"name\":null,\"type\":\"var\"},\"nf\":{\"description\":\"Utility function for formatting numbers into strings. There are two versions: one for formatting floats, and one for formatting ints. The values for the `digits` and `right` parameters should always be positive integers. The `left` parameter should be positive or 0. If it is zero, only the right side is formatted.As shown in the above example, `nf()` is used to add zeros to the left and/or right of a number. This is typically for aligning a list of numbers. To remove digits from a floating-point number, use the `int()`, `ceil()`, `floor()`, or `round()` functions.\",\"docUrl\":\"https://processing.org/reference/nf_.html\",\"name\":null,\"parameters\":{\"digits\":\"int: number of digits to pad with zero\",\"left\":\"int: number of digits to the left of the decimal point\",\"num\":\"float, or int: the number to format\",\"nums\":\"float[], or int[]: the numbers to format\",\"right\":\"int: number of digits to the right of the decimal point\"},\"returns\":\"String[]\",\"syntax\":\"nf(num)\\nnf(nums)\\nnf(nums, digits)\\nnf(num, digits)\\nnf(nums, left, right)\\nnf(num, left, right)\",\"type\":\"function\"},\"nfc\":{\"description\":\"Utility function for formatting numbers into strings and placing appropriate commas to mark units of 1000. There are four versions: one for formatting ints, one for formatting an array of ints, one for formatting floats, and one for formatting an array of floats.\\n\\nThe value for the `right` parameter should always be a positive integer.\\n\\nFor a non-US locale, this will insert periods instead of commas, or whatever is apprioriate for that region.\",\"docUrl\":\"https://processing.org/reference/nfc_.html\",\"name\":null,\"parameters\":{\"num\":\"float, or int: the number to format\",\"nums\":\"float[], or int[]: the numbers to format\",\"right\":\"int: number of digits to the right of the decimal point\"},\"returns\":\"String[]\",\"syntax\":\"nfc(nums)\\nnfc(num)\\nnfc(nums, right)\\nnfc(num, right)\",\"type\":\"function\"},\"nfp\":{\"description\":\"Utility function for formatting numbers into strings. Similar to `nf()` but puts a \\\"+\\\" in front of positive numbers and a \\\"-\\\" in front of negative numbers. There are two versions: one for formatting floats, and one for formatting ints. The values for the `digits`, `left`, and `right` parameters should always be positive integers.\",\"docUrl\":\"https://processing.org/reference/nfp_.html\",\"name\":null,\"parameters\":{\"digits\":\"int: number of digits to pad with zeroes\",\"left\":\"int: the number of digits to the left of the decimal point\",\"num\":\"float, or int: the number to format\",\"nums\":\"float[], or int[]: the numbers to format\",\"right\":\"int: the number of digits to the right of the decimal point\"},\"returns\":\"String or String[]\",\"syntax\":\"nfp(num, digits)\\nnfp(nums, digits)\\nnfp(nums, left, right)\\nnfp(num, left, right)\",\"type\":\"function\"},\"nfs\":{\"description\":\"Utility function for formatting numbers into strings. Similar to `nf()`, but leaves a blank space in front of positive numbers so they align with negative numbers in spite of the minus symbol. There are two versions: one for formatting floats, and one for formatting ints. The values for the `digits`, `left`, and `right` parameters should always be positive integers.\",\"docUrl\":\"https://processing.org/reference/nfs_.html\",\"name\":null,\"parameters\":{\"digits\":\"int: number of digits to pad with zeroes\",\"left\":\"int: the number of digits to the left of the decimal point\",\"num\":\"float, or int: the number to format\",\"nums\":\"float[], or int[]: the numbers to format\",\"right\":\"int: the number of digits to the right of the decimal point\"},\"returns\":\"String or String[]\",\"syntax\":\"nfs(num, digits)\\nnfs(nums, digits)\\nnfs(nums, left, right)\\nnfs(num, left, right)\",\"type\":\"function\"},\"noClip\":{\"description\":\"Disables the clipping previously started by the `clip()` function.\",\"docUrl\":\"https://processing.org/reference/noClip_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"noClip()\",\"type\":\"function\"},\"noCursor\":{\"description\":\"Hides the cursor from view. Will not work when running the program in a web browser or in full screen (Present) mode.\",\"docUrl\":\"https://processing.org/reference/noCursor_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"noCursor()\",\"type\":\"function\"},\"noFill\":{\"description\":\"Disables filling geometry. If both `noStroke()` and `noFill()` are called, nothing will be drawn to the screen.\",\"docUrl\":\"https://processing.org/reference/noFill_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"noFill()\",\"type\":\"function\"},\"noLights\":{\"description\":\"Disable all lighting. Lighting is turned off by default and enabled with the `lights()` function. This function can be used to disable lighting so that 2D geometry (which does not require lighting) can be drawn after a set of lighted 3D geometry.\",\"docUrl\":\"https://processing.org/reference/noLights_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"noLights()\",\"type\":\"function\"},\"noLoop\":{\"description\":\"Stops Processing from continuously executing the code within `draw()`. If `loop()` is called, the code in `draw()` begins to run continuously again. If using `noLoop()` in `setup()`, it should be the last line inside the block.\\n\\nWhen `noLoop()` is used, it's not possible to manipulate or access the screen inside event handling functions such as `mousePressed()` or `keyPressed()`. Instead, use those functions to call `redraw()` or `loop()`, which will run `draw()`, which can update the screen properly. This means that when `noLoop()` has been called, no drawing can happen, and functions like `saveFrame()` or `loadPixels()` may not be used.\\n\\nNote that if the sketch is resized, `redraw()` will be called to update the sketch, even after `noLoop()` has been specified. Otherwise, the sketch would enter an odd state until `loop()` was called.\",\"docUrl\":\"https://processing.org/reference/noLoop_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"noLoop()\",\"type\":\"function\"},\"noSmooth\":{\"description\":\"Draws all geometry and fonts with jagged (aliased) edges and images with hard edges between the pixels when enlarged rather than interpolating pixels.  Note that `smooth()` is active by default, so it is necessary to call `noSmooth()` to disable smoothing of geometry, fonts, and images. Since the release of Processing 3.0, the `noSmooth()` function can only be run once for each sketch, either at the top of a sketch without a `setup()`, or after the `size()` function when used in a sketch with `setup()`. See the examples above for both scenarios.\",\"docUrl\":\"https://processing.org/reference/noSmooth_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"noSmooth()\",\"type\":\"function\"},\"noStroke\":{\"description\":\"Disables drawing the stroke (outline). If both `noStroke()` and `noFill()` are called, nothing will be drawn to the screen.\",\"docUrl\":\"https://processing.org/reference/noStroke_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"noStroke()\",\"type\":\"function\"},\"noTint\":{\"description\":\"Removes the current fill value for displaying images and reverts to displaying images with their original hues.\",\"docUrl\":\"https://processing.org/reference/noTint_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"noTint()\",\"type\":\"function\"},\"noise\":{\"description\":\"Returns the Perlin noise value at specified coordinates. Perlin noise is a random sequence generator producing a more natural, harmonic succession of numbers than that of the standard `random()` function. It was developed by Ken Perlin in the 1980s and has been used in graphical applications to generate procedural textures, shapes, terrains, and other seemingly organic forms.\\n\\nIn contrast to the `random()` function, Perlin noise is defined in an infinite n-dimensional space, in which each pair of coordinates corresponds to a fixed semi-random value (fixed only for the lifespan of the program). The resulting value will always be between 0.0 and 1.0. Processing can compute 1D, 2D and 3D noise, depending on the number of coordinates given. The noise value can be animated by moving through the noise space, as demonstrated in the first example above. The 2nd and 3rd dimensions can also be interpreted as time.\\n\\nThe actual noise structure is similar to that of an audio signal, in respect to t. . .\",\"docUrl\":\"https://processing.org/reference/noise_.html\",\"name\":null,\"parameters\":{\"x\":\"float: x-coordinate in noise space\",\"y\":\"float: y-coordinate in noise space\",\"z\":\"float: z-coordinate in noise space\"},\"returns\":\"float\",\"syntax\":\"noise(x)\\nnoise(x, y)\\nnoise(x, y, z)\",\"type\":\"function\"},\"noiseDetail\":{\"description\":\"Adjusts the character and level of detail produced by the Perlin noise function. Similar to harmonics in physics, noise is computed over several octaves. Lower octaves contribute more to the output signal and as such define the overall intensity of the noise, whereas higher octaves create finer-grained details in the noise sequence.\\n\\nBy default, noise is computed over 4 octaves with each octave contributing exactly half than its predecessor, starting at 50% strength for the first octave. This falloff amount can be changed by adding an additional function parameter. For example, a falloff factor of 0.75 means each octave will now have 75% impact (25% less) of the previous lower octave. While any number between 0.0 and 1.0 is valid, note that values greater than 0.5 may result in `noise()` returning values greater than 1.0.\\n\\nBy changing these parameters, the signal created by the `noise()` function can be adapted to fit very specific needs and characteristics.\",\"docUrl\":\"https://processing.org/reference/noiseDetail_.html\",\"name\":null,\"parameters\":{\"falloff\":\"float: falloff factor for each octave\",\"lod\":\"int: number of octaves to be used by the noise\"},\"returns\":\"void\",\"syntax\":\"noiseDetail(lod)\\nnoiseDetail(lod, falloff)\",\"type\":\"function\"},\"noiseSeed\":{\"description\":\"Sets the seed value for `noise()`. By default, `noise()` produces different results each time the program is run. Set the `seed` parameter to a constant to return the same pseudo-random numbers each time the software is run.\",\"docUrl\":\"https://processing.org/reference/noiseSeed_.html\",\"name\":null,\"parameters\":{\"seed\":\"int: seed value\"},\"returns\":\"void\",\"syntax\":\"noiseSeed(seed)\",\"type\":\"function\"},\"norm\":{\"description\":\"Normalizes a number from another range into a value between 0 and 1. Identical to `map(value, low, high, 0, 1)`.\\n\\nNumbers outside of the range are not clamped to 0 and 1, because out-of-range values are often intentional and useful.  (See the second example above.)\",\"docUrl\":\"https://processing.org/reference/norm_.html\",\"name\":null,\"parameters\":{\"start\":\"float: lower bound of the value's current range\",\"stop\":\"float: upper bound of the value's current range\",\"value\":\"float: the incoming value to be converted\"},\"returns\":\"float\",\"syntax\":\"norm(value, start, stop)\",\"type\":\"function\"},\"normal\":{\"description\":\"Sets the current normal vector. Used for drawing three dimensional shapes and surfaces, `normal()` specifies a vector perpendicular to a shape's surface which, in turn, determines how lighting affects it. Processing attempts to automatically assign normals to shapes, but since that's imperfect, this is a better option when you want more control. This function is identical to `glNormal3f()` in OpenGL.\",\"docUrl\":\"https://processing.org/reference/normal_.html\",\"name\":null,\"parameters\":{\"nx\":\"float: x direction\",\"ny\":\"float: y direction\",\"nz\":\"float: z direction\"},\"returns\":\"void\",\"syntax\":\"normal(nx, ny, nz)\",\"type\":\"function\"},\"ortho\":{\"description\":\"Sets an orthographic projection and defines a parallel clipping volume. All objects with the same dimension appear the same size, regardless of whether they are near or far from the camera. The parameters to this function specify the clipping volume where left and right are the minimum and maximum x values, top and bottom are the minimum and maximum y values, and near and far are the minimum and maximum z values. If no parameters are given, the default is used: ortho(-width/2, width/2, -height/2, height/2).\",\"docUrl\":\"https://processing.org/reference/ortho_.html\",\"name\":null,\"parameters\":{\"bottom\":\"float: bottom plane of the clipping volume\",\"far\":\"float: maximum distance from the origin away from the viewer\",\"left\":\"float: left plane of the clipping volume\",\"near\":\"float: maximum distance from the origin to the viewer\",\"right\":\"float: right plane of the clipping volume\",\"top\":\"float: top plane of the clipping volume\"},\"returns\":\"void\",\"syntax\":\"ortho()\\northo(left, right, bottom, top)\\northo(left, right, bottom, top, near, far)\",\"type\":\"function\"},\"parseJSONArray\":{\"description\":\"Takes a `String`, parses its contents, and returns a `JSONArray`. If the `String` does not contain `JSONArray` data or cannot be parsed, a `null` value is returned.\\n\\n`parseJSONArray()` is most useful when pulling data dynamically, such as from third-party APIs. Normally, API results would be saved to a `String`, and then can be converted to a structured `JSONArray` using `parseJSONArray()`. Be sure to check if `null` is returned before performing operations on the new `JSONArray` in case the `String` content could not be parsed.\\n\\nIf your data already exists as a `JSON` file in the data folder, it is simpler to use `loadJSONArray()`.\",\"docUrl\":\"https://processing.org/reference/parseJSONArray_.html\",\"name\":null,\"parameters\":{\"input\":\"String: String to parse as a JSONArray\"},\"returns\":\"JSONArray\",\"syntax\":\"parseJSONArray(input)\",\"type\":\"function\"},\"parseJSONObject\":{\"description\":\"Takes a `String`, parses its contents, and returns a `JSONObject`. If the `String` does not contain `JSONObject` data or cannot be parsed, a `null` value is returned.\\n\\n`parseJSONObject()` is most useful when pulling data dynamically, such as from third-party APIs. Normally, API results would be saved to a `String`, and then can be converted to a structured `JSONObject` using `parseJSONObject()`. Be sure to check if `null` is returned before performing operations on the new `JSONObject` in case the `String` content could not be parsed.\\n\\nIf your data already exists as a `JSON` file in the data folder, it is simpler to use `loadJSONObject()`.\",\"docUrl\":\"https://processing.org/reference/parseJSONObject_.html\",\"name\":null,\"parameters\":{\"input\":\"String: String to parse as a JSONObject\"},\"returns\":\"JSONObject\",\"syntax\":\"parseJSONObject(input)\",\"type\":\"function\"},\"parseXML\":{\"description\":\"Takes a String, parses its contents, and returns an XML object.  If the String does not contain XML data or cannot be parsed, a null value is returned.\\n\\n`parseXML()` is most useful when pulling data dynamically, such as from third-party APIs.  Normally, API results would be saved to a String, and then can be converted to a structured XML object using `parseXML()`.  Be sure to check if null is returned before performing operations on the new XML object, in case the String content could not be parsed.\\n\\nIf your data already exists as an XML file in the data folder, it is simpler to use `loadXML()`.\",\"docUrl\":\"https://processing.org/reference/parseXML_.html\",\"name\":null,\"parameters\":{\"xmlString\":\"String: the content to be parsed as XML\"},\"returns\":\"XML\",\"syntax\":\"parseXML(xmlString)\\nparseXML(xmlString, options)\",\"type\":\"function\"},\"perspective\":{\"description\":\"Sets a perspective projection applying foreshortening, making distant objects appear smaller than closer ones. The parameters define a viewing volume with the shape of truncated pyramid. Objects near to the front of the volume appear their actual size, while farther objects appear smaller. This projection simulates the perspective of the world more accurately than orthographic projection. The version of perspective without parameters sets the default perspective and the version with four parameters allows the programmer to set the area precisely. The default values are: perspective(PI/3.0, width/height, cameraZ/10.0, cameraZ*10.0) where cameraZ is ((height/2.0) / tan(PI*60.0/360.0));\",\"docUrl\":\"https://processing.org/reference/perspective_.html\",\"name\":null,\"parameters\":{\"aspect\":\"float: ratio of width to height\",\"fovy\":\"float: field-of-view angle (in radians) for vertical direction\",\"zFar\":\"float: z-position of farthest clipping plane\",\"zNear\":\"float: z-position of nearest clipping plane\"},\"returns\":\"void\",\"syntax\":\"perspective()\\nperspective(fovy, aspect, zNear, zFar)\",\"type\":\"function\"},\"pixelDensity\":{\"description\":\"This function is new with Processing 3.0. It makes it possible for Processing to render using all of the pixels on high resolutions screens like Apple Retina displays and Windows High-DPI displays. This function can only be run once within a program and it must be used right after `size()` in a program without a `setup()` and used within `setup()` when a program has one.  The `pixelDensity()` should only be used with hardcoded numbers (in almost all cases this number will be 2) or in combination with `displayDensity()` as in the third example above.\\n\\nWhen the pixel density is set to more than 1, it changes all of the pixel operations including the way `get()`, `set()`, `blend()`, `copy()`, and `updatePixels()` all work. See the reference for `pixelWidth` and `pixelHeight` for more information. \\n\\nTo use variables as the arguments to `pixelDensity()` function, place the `pixelDensity()` function within the `settings()` function. There is more information about this on the `settings()` re. . .\",\"docUrl\":\"https://processing.org/reference/pixelDensity_.html\",\"name\":null,\"parameters\":{\"density\":\"int: 1 or 2\"},\"returns\":\"void\",\"syntax\":\"pixelDensity(density)\",\"type\":\"function\"},\"pixelHeight\":{\"description\":\"When `pixelDensity(2)` is used to make use of a high resolution display (called a Retina display on OS X or high-dpi on Windows and Linux), the width and height of the sketch do not change, but the number of pixels is doubled. As a result, all operations that use pixels (like `loadPixels()`, `get()`, `set()`, etc.) happen in this doubled space. As a convenience, the variables `pixelWidth` and `pixelHeight` hold the actual width and height of the sketch in pixels. This is useful for any sketch that uses the `pixels[]` array, for instance, because the number of elements in the array will be `pixelWidth*pixelHeight`, not `width*height`.\",\"docUrl\":\"https://processing.org/reference/pixelHeight.html\",\"examples\":\"void setup() {\\n  size(600, 400);\\n  pixelDensity(2);\\n  println(width, height);\\n  println(pixelWidth, pixelHeight);\\n}\\n\\n\\nvoid setup() {\\n  size(600, 400);\\n  pixelDensity(2);  // Double the pixel density\\n  println(width, height);\\n  println(pixelWidth, pixelHeight);\\n}\\n\\nvoid draw() {\\n  loadPixels();\\n  // Fill all the pixels to blue with using\\n  // pixelWidth and pixelHeight\\n  for (int i = 0; i < pixelWidth * pixelHeight; i++) {\\n    pixels[i] = color(0, 0, 255);\\n  }\\n  // Fill one quarter of the pixels to yellow\\n  // because the pixel density is set to 2 in setup()\\n  // and 'width' and 'height' don't reflect the pixel \\n  // dimensions of the sketch\\n  for (int i = 0; i < width * height; i++) {\\n    pixels[i] = color(255, 255, 0);\\n  }\\n  updatePixels();\\n  noLoop();\\n}\\n\",\"name\":null,\"type\":\"var\"},\"pixelWidth\":{\"description\":\"When `pixelDensity(2)` is used to make use of a high resolution display (called a Retina display on OS X or high-dpi on Windows and Linux), the width and height of the sketch do not change, but the number of pixels is doubled. As a result, all operations that use pixels (like `loadPixels()`, `get()`, `set()`, etc.) happen in this doubled space. As a convenience, the variables `pixelWidth` and `pixelHeight` hold the actual width and height of the sketch in pixels. This is useful for any sketch that uses the `pixels[]` array, for instance, because the number of elements in the array will be `pixelWidth*pixelHeight`, not `width*height`.\",\"docUrl\":\"https://processing.org/reference/pixelWidth.html\",\"examples\":\"void setup() {\\n  size(600, 400);\\n  pixelDensity(2);\\n  println(width, height);\\n  println(pixelWidth, pixelHeight);\\n}\\n\\n\\nvoid setup() {\\n  size(600, 400);\\n  pixelDensity(2);  // Double the pixel density\\n  println(width, height);\\n  println(pixelWidth, pixelHeight);\\n}\\n\\nvoid draw() {\\n  loadPixels();\\n  // Fill all the pixels to blue with using\\n  // pixelWidth and pixelHeight\\n  for (int i = 0; i < pixelWidth * pixelHeight; i++) {\\n    pixels[i] = color(0, 0, 255);\\n  }\\n  // Fill one quarter of the pixels to yellow\\n  // because the pixel density is set to 2 in setup()\\n  // and 'width' and 'height' don't reflect the pixel \\n  // dimensions of the sketch\\n  for (int i = 0; i < width * height; i++) {\\n    pixels[i] = color(255, 255, 0);\\n  }\\n  updatePixels();\\n  noLoop();\\n}\\n\",\"name\":null,\"type\":\"var\"},\"pmouseX\":{\"description\":\"The system variable `pmouseX` always contains the horizontal position of the mouse in the frame previous to the current frame.\\n\\nYou may find that `pmouseX` and `pmouseY` have different values when referenced inside of `draw()` and inside of mouse events like `mousePressed()` and `mouseMoved()`. Inside `draw()`, `pmouseX` and `pmouseY` update only once per frame (once per trip through the `draw()` loop). But inside mouse events, they update each time the event is called. If these values weren't updated immediately during mouse events, then the mouse position would be read only once per frame, resulting in slight delays and choppy interaction. If the mouse variables were always updated multiple times per frame, then something like `line(pmouseX, pmouseY, mouseX, mouseY)` inside `draw()` would have lots of gaps, because `pmouseX` may have changed several times in between the calls to `line()`.\\nIf you want values relative to the previous frame, use `pmouseX` and `pmouseY` inside `draw()`. . . .\",\"docUrl\":\"https://processing.org/reference/pmouseX.html\",\"examples\":\"// Move the mouse quickly to see the difference \\n// between the current and previous position \\nvoid draw() { \\n  background(204); \\n  line(mouseX, 20, pmouseX, 80); \\n  println(mouseX + \\\" : \\\" + pmouseX);\\n} \\n\",\"name\":null,\"type\":\"var\"},\"pmouseY\":{\"description\":\"The system variable `pmouseY` always contains the vertical position of the mouse in the frame previous to the current frame.\\n\\nFor more detail on how `pmouseY` is updated inside of mouse events and `draw()`, see the reference for `pmouseX`.\",\"docUrl\":\"https://processing.org/reference/pmouseY.html\",\"examples\":\"// Move the mouse quickly to see the difference \\n// between the current and previous position \\nvoid draw() { \\n  background(204); \\n  line(20, mouseY, 80, pmouseY); \\n  println(mouseY + \\\" : \\\" + pmouseY);\\n} \\n\",\"name\":null,\"type\":\"var\"},\"point\":{\"description\":\"Draws a point, a coordinate in space at the dimension of one pixel. The first parameter is the horizontal value for the point, the second value is the vertical value for the point, and the optional third value is the depth value. Drawing this shape in 3D with the `z` parameter requires the P3D parameter in combination with `size()` as shown in the above example.\\n\\nUse `stroke()` to set the color of a `point()`.\\n\\nPoint appears round with the default `strokeCap(ROUND)` and square with `strokeCap(PROJECT)`. Points are invisible with `strokeCap(SQUARE)` (no cap).\\n\\nUsing point() with strokeWeight(1) or smaller may draw nothing to the screen, depending on the graphics settings of the computer. Workarounds include setting the pixel using `set() or drawing the point using either `circle()` or `square()`.\\n`\",\"docUrl\":\"https://processing.org/reference/point_.html\",\"name\":null,\"parameters\":{\"x\":\"float: x-coordinate of the point\",\"y\":\"float: y-coordinate of the point\",\"z\":\"float: z-coordinate of the point\"},\"returns\":\"void\",\"syntax\":\"point(x, y)\\npoint(x, y, z)\",\"type\":\"function\"},\"pointLight\":{\"description\":\"Adds a point light. Lights need to be included in the `draw()` to remain persistent in a looping program. Placing them in the `setup()` of a looping program will cause them to only have an effect the first time through the loop. The `v1`, `v2`, and `v3` parameters are interpreted as either RGB or HSB values, depending on the current color mode. The `x`, `y`, and `z` parameters set the position of the light.\",\"docUrl\":\"https://processing.org/reference/pointLight_.html\",\"name\":null,\"parameters\":{\"v1\":\"float: red or hue value (depending on current color mode)\",\"v2\":\"float: green or saturation value (depending on current color mode)\",\"v3\":\"float: blue or brightness value (depending on current color mode)\",\"x\":\"float: x-coordinate of the light\",\"y\":\"float: y-coordinate of the light\",\"z\":\"float: z-coordinate of the light\"},\"returns\":\"void\",\"syntax\":\"pointLight(v1, v2, v3, x, y, z)\",\"type\":\"function\"},\"pop\":{\"description\":\"The `pop()` function restores the previous drawing style settings and transformations after `push()` has changed them. Note that these functions are always used together. They allow you to change the style and transformation settings and later return to what you had. When a new state is started with push(), it builds on the current style and transform information.\\n\\n`push()` stores information related to the current transformation state and style settings controlled by the following functions: `rotate()`, `translate()`, `scale()`, `fill()`, `stroke()`, `tint()`, `strokeWeight()`, `strokeCap()`, `strokeJoin()`, `imageMode()`, `rectMode()`, `ellipseMode()`, `colorMode()`, `textAlign()`, `textFont()`, `textMode()`, `textSize()`, `textLeading()`.\\n\\nThe `push()` and `pop()` functions were added with Processing 3.5. They can be used in place of `pushMatrix()`, `popMatrix()`, `pushStyles()`, and `popStyles()`. The difference is that push() and pop() control both the transformations (rotate, sca. . .\",\"docUrl\":\"https://processing.org/reference/pop_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"pop()\",\"type\":\"function\"},\"popMatrix\":{\"description\":\"Pops the current transformation matrix off the matrix stack. Understanding pushing and popping requires understanding the concept of a matrix stack. The `pushMatrix()` function saves the current coordinate system to the stack and `popMatrix()` restores the prior coordinate system. `pushMatrix()` and `popMatrix()` are used in conjuction with the other transformation functions and may be embedded to control the scope of the transformations.\",\"docUrl\":\"https://processing.org/reference/popMatrix_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"popMatrix()\",\"type\":\"function\"},\"popStyle\":{\"description\":\"The `pushStyle()` function saves the current style settings and `popStyle()` restores the prior settings; these functions are always used together. They allow you to change the style settings and later return to what you had. When a new style is started with `pushStyle()`, it builds on the current style information. The `pushStyle()` and `popStyle()` functions can be embedded to provide more control (see the second example above for a demonstration.)\",\"docUrl\":\"https://processing.org/reference/popStyle_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"popStyle()\",\"type\":\"function\"},\"pow\":{\"description\":\"Facilitates exponential expressions. The `pow()` function is an efficient way of multiplying numbers by themselves (or their reciprocals) in large quantities. For example, `pow(3, 5)` is equivalent to the expression 3*3*3*3*3 and `pow(3, -5)` is equivalent to 1 / 3*3*3*3*3.\",\"docUrl\":\"https://processing.org/reference/pow_.html\",\"name\":null,\"parameters\":{\"e\":\"float: power by which to raise the base\",\"n\":\"float: base of the exponential expression\"},\"returns\":\"float\",\"syntax\":\"pow(n, e)\",\"type\":\"function\"},\"print\":{\"description\":\"The `print()` function writes to the console area, the black rectangle at the bottom of the Processing environment. This function is often helpful for looking at the data a program is producing. The companion function `println()` works like `print()`, but creates a new line of text for each call to the function. More than one parameter can be passed into the function by separating them with commas. Alternatively, individual elements can be separated with quotes (\\\"\\\") and joined with the addition operator (+).\\n\\nUsing `print()` on an object will output `null`, a memory location that may look like \\\"@10be08,\\\" or the result of the `toString()` method from the object that's being printed. Advanced users who want more useful output when calling `print()` on their own classes can add a `toString()` method to the class that returns a String.\\n\\nNote that the console is relatively slow. It works well for occasional messages, but does not support high-speed, real-time output (such as at 60 frames pe. . .\",\"docUrl\":\"https://processing.org/reference/print_.html\",\"name\":null,\"parameters\":{\"variables\":\"Object[]: list of data, separated by commas\",\"what\":\"String, float, char, boolean, or byte: data to print to console\"},\"returns\":\"void\",\"syntax\":\"print(what)\\nprint(variables)\",\"type\":\"function\"},\"printArray\":{\"description\":\"The `printArray()` function writes array data to the text area of the Processing environment's console. A new line is put between each element of the array. This function can only print one dimensional arrays.\\n\\nNote that the console is relatively slow. It works well for occasional messages, but does not support high-speed, real-time output (such as at 60 frames per second).\",\"docUrl\":\"https://processing.org/reference/printArray_.html\",\"name\":null,\"parameters\":{\"what\":\"Object: one-dimensional array\"},\"returns\":\"void\",\"syntax\":\"printArray(what)\",\"type\":\"function\"},\"printCamera\":{\"description\":\"Prints the current camera matrix to the Console (the text window at the bottom of Processing).\",\"docUrl\":\"https://processing.org/reference/printCamera_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"printCamera()\",\"type\":\"function\"},\"printMatrix\":{\"description\":\"Prints the current matrix to the Console (the text window at the bottom of Processing).\",\"docUrl\":\"https://processing.org/reference/printMatrix_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"printMatrix()\",\"type\":\"function\"},\"printProjection\":{\"description\":\"Prints the current projection matrix to the Console (the text window at the bottom of Processing).\",\"docUrl\":\"https://processing.org/reference/printProjection_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"printProjection()\",\"type\":\"function\"},\"println\":{\"description\":\"The `println()` function writes to the console area, the black rectangle at the bottom of the Processing environment. This function is often helpful for looking at the data a program is producing. Each call to this function creates a new line of output. More than one parameter can be passed into the function by separating them with commas. Alternatively, individual elements can be separated with quotes (\\\"\\\") and joined with the addition operator (+).\\n\\nBefore Processing 2.1, `println()` was used to write array data to the console. Now, use `printArray()` to write array data to the console.\\n\\nNote that the console is relatively slow. It works well for occasional messages, but does not support high-speed, real-time output (such as at 60 frames per second). It should also be noted, that a println() within a for loop can sometimes lock up the program, and cause the sketch to freeze.\",\"docUrl\":\"https://processing.org/reference/println_.html\",\"name\":null,\"parameters\":{\"variables\":\"Object[]: list of data, separated by commas\",\"what\":\"Object, String, float, char, boolean, or byte: data to print to console\"},\"returns\":\"void\",\"syntax\":\"println()\\nprintln(what)\\nprintln(variables)\",\"type\":\"function\"},\"push\":{\"description\":\"The `push()` function saves the current drawing style settings and transformations, while `pop()` restores these settings. Note that these functions are always used together. They allow you to change the style and transformation settings and later return to what you had. When a new state is started with push(), it builds on the current style and transform information.\\n\\n`push()` stores information related to the current transformation state and style settings controlled by the following functions: `rotate()`, `translate()`, `scale()`, `fill()`, `stroke()`, `tint()`, `strokeWeight()`, `strokeCap()`, `strokeJoin()`, `imageMode()`, `rectMode()`, `ellipseMode()`, `colorMode()`, `textAlign()`, `textFont()`, `textMode()`, `textSize()`, `textLeading()`.\\n\\nThe `push()` and `pop()` functions were added with Processing 3.5. They can be used in place of `pushMatrix()`, `popMatrix()`, `pushStyles()`, and `popStyles()`. The difference is that push() and pop() control both the transformations (rotate,. . .\",\"docUrl\":\"https://processing.org/reference/push_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"push()\",\"type\":\"function\"},\"pushMatrix\":{\"description\":\"Pushes the current transformation matrix onto the matrix stack. Understanding `pushMatrix()` and `popMatrix()` requires understanding the concept of a matrix stack. The `pushMatrix()` function saves the current coordinate system to the stack and `popMatrix()` restores the prior coordinate system. `pushMatrix()` and `popMatrix()` are used in conjuction with the other transformation functions and may be embedded to control the scope of the transformations.\",\"docUrl\":\"https://processing.org/reference/pushMatrix_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"pushMatrix()\",\"type\":\"function\"},\"pushStyle\":{\"description\":\"The `pushStyle()` function saves the current style settings and `popStyle()` restores the prior settings. Note that these functions are always used together. They allow you to change the style settings and later return to what you had. When a new style is started with `pushStyle()`, it builds on the current style information. The `pushStyle()` and `popStyle()` functions can be embedded to provide more control. (See the second example above for a demonstration.)\\n\\nThe style information controlled by the following functions are included in the style:\\nfill(), stroke(), tint(), strokeWeight(), strokeCap(), strokeJoin(), imageMode(), rectMode(), ellipseMode(), shapeMode(), colorMode(), textAlign(), textFont(), textMode(), textSize(), textLeading(), emissive(), specular(), shininess(), ambient()\",\"docUrl\":\"https://processing.org/reference/pushStyle_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"pushStyle()\",\"type\":\"function\"},\"quad\":{\"description\":\"A quad is a quadrilateral, a four sided polygon. It is similar to a rectangle, but the angles between its edges are not constrained to ninety degrees. The first pair of parameters (x1,y1) sets the first vertex and the subsequent pairs should proceed clockwise or counter-clockwise around the defined shape.\",\"docUrl\":\"https://processing.org/reference/quad_.html\",\"name\":null,\"parameters\":{\"x1\":\"float: x-coordinate of the first corner\",\"x2\":\"float: x-coordinate of the second corner\",\"x3\":\"float: x-coordinate of the third corner\",\"x4\":\"float: x-coordinate of the fourth corner\",\"y1\":\"float: y-coordinate of the first corner\",\"y2\":\"float: y-coordinate of the second corner\",\"y3\":\"float: y-coordinate of the third corner\",\"y4\":\"float: y-coordinate of the fourth corner\"},\"returns\":\"void\",\"syntax\":\"quad(x1, y1, x2, y2, x3, y3, x4, y4)\",\"type\":\"function\"},\"quadraticVertex\":{\"description\":\"Specifies vertex coordinates for quadratic Bezier curves. Each call to `quadraticVertex()` defines the position of one control point and one anchor point of a Bezier curve, adding a new segment to a line or shape. The first time `quadraticVertex()` is used within a `beginShape()` call, it must be prefaced with a call to `vertex()` to set the first anchor point. This function must be used between `beginShape()` and `endShape()` and only when there is no MODE parameter specified to `beginShape()`. Using the 3D version requires rendering with P3D (see the Environment reference for more information).\",\"docUrl\":\"https://processing.org/reference/quadraticVertex_.html\",\"name\":null,\"parameters\":{\"cx\":\"float: the x-coordinate of the control point\",\"cy\":\"float: the y-coordinate of the control point\",\"cz\":\"float: the z-coordinate of the control point\",\"x3\":\"float: the x-coordinate of the anchor point\",\"y3\":\"float: the y-coordinate of the anchor point\",\"z3\":\"float: the z-coordinate of the anchor point\"},\"returns\":\"void\",\"syntax\":\"quadraticVertex(cx, cy, x3, y3)\\nquadraticVertex(cx, cy, cz, x3, y3, z3)\",\"type\":\"function\"},\"radians\":{\"description\":\"Converts a degree measurement to its corresponding value in radians. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and 2*PI radians in a circle. For example, 90\u00B0 = PI/2 = 1.5707964. All trigonometric functions in Processing require their parameters to be specified in radians.\",\"docUrl\":\"https://processing.org/reference/radians_.html\",\"name\":null,\"parameters\":{\"degrees\":\"float: degree value to convert to radians\"},\"returns\":\"float\",\"syntax\":\"radians(degrees)\",\"type\":\"function\"},\"random\":{\"description\":\"Generates random numbers. Each time the `random()` function is called, it returns an unexpected value within the specified range. If only one parameter is passed to the function, it will return a float between zero and the value of the `high` parameter. For example, `random(5)` returns values between 0 and 5 (starting at zero, and up to, but not including, 5).\\n\\nIf two parameters are specified, the function will return a float with a value between the two values. For example, `random(-5, 10.2)` returns values starting at -5 and up to (but not including) 10.2. To convert a floating-point random number to an integer, use the `int()` function.\",\"docUrl\":\"https://processing.org/reference/random_.html\",\"name\":null,\"parameters\":{\"high\":\"float: upper limit\",\"low\":\"float: lower limit\"},\"returns\":\"float\",\"syntax\":\"random(high)\\nrandom(low, high)\",\"type\":\"function\"},\"randomGaussian\":{\"description\":\"Returns a float from a random series of numbers having a mean of 0 and standard deviation of 1. Each time the `randomGaussian()` function is called, it returns a number fitting a Gaussian, or normal, distribution. There is theoretically no minimum or maximum value that `randomGaussian()` might return. Rather, there is just a very low probability that values far from the mean will be returned; and a higher probability that numbers near the mean will be returned.\",\"docUrl\":\"https://processing.org/reference/randomGaussian_.html\",\"name\":null,\"parameters\":{},\"returns\":\"float\",\"syntax\":\"randomGaussian()\",\"type\":\"function\"},\"randomSeed\":{\"description\":\"Sets the seed value for `random()`. By default, `random()` produces different results each time the program is run. Set the `seed` parameter to a constant to return the same pseudo-random numbers each time the software is run.\",\"docUrl\":\"https://processing.org/reference/randomSeed_.html\",\"name\":null,\"parameters\":{\"seed\":\"int: seed value\"},\"returns\":\"void\",\"syntax\":\"randomSeed(seed)\",\"type\":\"function\"},\"rect\":{\"description\":\"Draws a rectangle to the screen. A rectangle is a four-sided shape with every angle at ninety degrees. By default, the first two parameters set the location of the upper-left corner, the third sets the width, and the fourth sets the height. The way these parameters are interpreted, however, may be changed with the `rectMode()` function.\\n\\nTo draw a rounded rectangle, add a fifth parameter, which is used as the radius value for all four corners.\\n\\nTo use a different radius value for each corner, include eight parameters. When using eight parameters, the latter four set the radius of the arc at each corner separately, starting with the top-left corner and moving clockwise around the rectangle.\",\"docUrl\":\"https://processing.org/reference/rect_.html\",\"name\":null,\"parameters\":{\"a\":\"float: x-coordinate of the rectangle by default\",\"b\":\"float: y-coordinate of the rectangle by default\",\"bl\":\"float: radius for bottom-left corner\",\"br\":\"float: radius for bottom-right corner\",\"c\":\"float: width of the rectangle by default\",\"d\":\"float: height of the rectangle by default\",\"r\":\"float: radii for all four corners\",\"tl\":\"float: radius for top-left corner\",\"tr\":\"float: radius for top-right corner\"},\"returns\":\"void\",\"syntax\":\"rect(a, b, c, d)\\nrect(a, b, c, d, r)\\nrect(a, b, c, d, tl, tr, br, bl)\",\"type\":\"function\"},\"rectMode\":{\"description\":\"Modifies the location from which rectangles are drawn by changing the way in which parameters given to `rect()` are intepreted.\\n\\nThe default mode is `rectMode(CORNER)`, which interprets the first two parameters of `rect()` as the upper-left corner of the shape, while the third and fourth parameters are its width and height.\\n\\n`rectMode(CORNERS)` interprets the first two parameters of `rect()` as the location of one corner, and the third and fourth parameters as the location of the opposite corner.\\n\\n`rectMode(CENTER)` interprets the first two parameters of `rect()` as the shape's center point, while the third and fourth parameters are its width and height.\\n\\n`rectMode(RADIUS)` also uses the first two parameters of `rect()` as the shape's center point, but uses the third and fourth parameters to specify half of the shapes's width and height.\\n\\nThe parameter must be written in ALL CAPS because Processing is a case-sensitive language.\",\"docUrl\":\"https://processing.org/reference/rectMode_.html\",\"name\":null,\"parameters\":{\"mode\":\"int: either CORNER, CORNERS, CENTER, or RADIUS\"},\"returns\":\"void\",\"syntax\":\"rectMode(mode)\",\"type\":\"function\"},\"red\":{\"description\":\"Extracts the red value from a color, scaled to match current `colorMode()`. The value is always returned as a float, so be careful not to assign it to an int value.\\n\\nThe `red()` function is easy to use and understand, but it is slower than a technique called bit shifting. When working in `colorMode(RGB, 255)`, you can acheive the same results as `red()` but with greater speed by using the right shift operator (`>>`) with a bit mask. For example, the following two lines of code are equivalent means of getting the red value of the color value `c`:\\n\\n`float r1 = red(c);  // Simpler, but slower to calculate\\nfloat r2 = c >> 16 &amp; 0xFF;  // Very fast to calculate`\",\"docUrl\":\"https://processing.org/reference/red_.html\",\"name\":null,\"parameters\":{\"rgb\":\"int: any value of the color datatype\"},\"returns\":\"float\",\"syntax\":\"red(rgb)\",\"type\":\"function\"},\"redraw\":{\"description\":\"Executes the code within `draw()` one time. This functions allows the program to update the display window only when necessary, for example when an event registered by `mousePressed()` or `keyPressed()` occurs. \\n\\nIn structuring a program, it only makes sense to call redraw() within events such as `mousePressed()`. This is because `redraw()` does not run `draw()` immediately (it only sets a flag that indicates an update is needed). \\n\\nThe `redraw()` function does not work properly when called inside `draw()`. To enable/disable animations, use `loop()` and `noLoop()`.\",\"docUrl\":\"https://processing.org/reference/redraw_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"redraw()\",\"type\":\"function\"},\"requestImage\":{\"description\":\"This function loads images on a separate thread so that your sketch doesn't freeze while images load during `setup()`. While the image is loading, its width and height will be 0. If an error occurs while loading the image, its width and height will be set to -1. You'll know when the image has loaded properly because its `width` and `height` will be greater than 0. Asynchronous image loading (particularly when downloading from a server) can dramatically improve performance.\\n\\nThe `extension` parameter is used to determine the image type in cases where the image filename does not end with a proper extension. Specify the extension as the second parameter to `requestImage()`.\",\"docUrl\":\"https://processing.org/reference/requestImage_.html\",\"name\":null,\"parameters\":{\"extension\":\"String: the type of image to load, for example \\\"png\\\", \\\"gif\\\", \\\"jpg\\\"\",\"filename\":\"String: name of the file to load, can be .gif, .jpg, .tga, or a handful of other image types depending on your platform\"},\"returns\":\"PImage\",\"syntax\":\"requestImage(filename)\\nrequestImage(filename, extension)\",\"type\":\"function\"},\"resetMatrix\":{\"description\":\"Replaces the current matrix with the identity matrix. The equivalent function in OpenGL is `glLoadIdentity()`.\",\"docUrl\":\"https://processing.org/reference/resetMatrix_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"resetMatrix()\",\"type\":\"function\"},\"resetShader\":{\"description\":\"Restores the default shaders. Code that runs after `resetShader()` will not be affected by previously defined shaders.\",\"docUrl\":\"https://processing.org/reference/resetShader_.html\",\"name\":null,\"parameters\":{\"kind\":\"int: type of shader, either POINTS, LINES, or TRIANGLES\"},\"returns\":\"void\",\"syntax\":\"resetShader()\\nresetShader(kind)\",\"type\":\"function\"},\"reverse\":{\"description\":\"Reverses the order of an array.\",\"docUrl\":\"https://processing.org/reference/reverse_.html\",\"name\":null,\"parameters\":{\"list\":\"Object, String[], float[], int[], char[], byte[], or boolean[]: booleans[], bytes[], chars[], ints[], floats[], or Strings[]\"},\"returns\":\"boolean[], byte[], char[], int[], float[], String[], or Object\",\"syntax\":\"reverse(list)\",\"type\":\"function\"},\"rotate\":{\"description\":\"Rotates the amount specified by the `angle` parameter. Angles must be specified in radians (values from `0` to `TWO_PI`), or they can be converted from degrees to radians with the `radians()` function. \\n \\nThe coordinates are always rotated around their relative position to the origin. Positive numbers rotate objects in a clockwise direction and negative numbers rotate in the couterclockwise direction. Transformations apply to everything that happens afterward, and subsequent calls to the function compound the effect. For example, calling `rotate(PI/2.0)` once and then calling `rotate(PI/2.0)` a second time is the same as a single `rotate(PI)`. All tranformations are reset when `draw()` begins again. \\n \\nTechnically, `rotate()` multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by `pushMatrix()` and `popMatrix()`.\",\"docUrl\":\"https://processing.org/reference/rotate_.html\",\"name\":null,\"parameters\":{\"angle\":\"float: angle of rotation specified in radians\"},\"returns\":\"void\",\"syntax\":\"rotate(angle)\",\"type\":\"function\"},\"rotateX\":{\"description\":\"Rotates around the x-axis the amount specified by the `angle` parameter. Angles should be specified in radians (values from 0 to TWO_PI) or converted from degrees to radians with the `radians()` function. Coordinates are always rotated around their relative position to the origin. Positive numbers rotate in a clockwise direction and negative numbers rotate in a counterclockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling `rotateX(PI/2)` and then `rotateX(PI/2)` is the same as `rotateX(PI)`. If `rotateX()` is run within the `draw()`, the transformation is reset when the loop begins again. This function requires using P3D as a third parameter to `size()` as shown in the example above.\",\"docUrl\":\"https://processing.org/reference/rotateX_.html\",\"name\":null,\"parameters\":{\"angle\":\"float: angle of rotation specified in radians\"},\"returns\":\"void\",\"syntax\":\"rotateX(angle)\",\"type\":\"function\"},\"rotateY\":{\"description\":\"Rotates around the y-axis the amount specified by the `angle` parameter. Angles should be specified in radians (values from 0 to TWO_PI) or converted from degrees to radians with the `radians()` function. Coordinates are always rotated around their relative position to the origin. Positive numbers rotate in a clockwise direction and negative numbers rotate in a counterclockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling `rotateY(PI/2)` and then `rotateY(PI/2)` is the same as `rotateY(PI)`. If `rotateY()` is run within the `draw()`, the transformation is reset when the loop begins again. This function requires using P3D as a third parameter to `size()` as shown in the example above.\",\"docUrl\":\"https://processing.org/reference/rotateY_.html\",\"name\":null,\"parameters\":{\"angle\":\"float: angle of rotation specified in radians\"},\"returns\":\"void\",\"syntax\":\"rotateY(angle)\",\"type\":\"function\"},\"rotateZ\":{\"description\":\"Rotates around the z-axis the amount specified by the `angle` parameter. Angles should be specified in radians (values from 0 to TWO_PI) or converted from degrees to radians with the `radians()` function. Coordinates are always rotated around their relative position to the origin. Positive numbers rotate in a clockwise direction and negative numbers rotate in a counterclockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling `rotateZ(PI/2)` and then `rotateZ(PI/2)` is the same as `rotateZ(PI)`. If `rotateZ()` is run within the `draw()`, the transformation is reset when the loop begins again. This function requires using P3D as a third parameter to `size()` as shown in the example above.\",\"docUrl\":\"https://processing.org/reference/rotateZ_.html\",\"name\":null,\"parameters\":{\"angle\":\"float: angle of rotation specified in radians\"},\"returns\":\"void\",\"syntax\":\"rotateZ(angle)\",\"type\":\"function\"},\"round\":{\"description\":\"Calculates the integer closest to the `n` parameter. For example, `round(133.8)` returns the value 134.\",\"docUrl\":\"https://processing.org/reference/round_.html\",\"name\":null,\"parameters\":{\"n\":\"float: number to round\"},\"returns\":\"int\",\"syntax\":\"round(n)\",\"type\":\"function\"},\"saturation\":{\"description\":\"Extracts the saturation value from a color.\",\"docUrl\":\"https://processing.org/reference/saturation_.html\",\"name\":null,\"parameters\":{\"rgb\":\"int: any value of the color datatype\"},\"returns\":\"float\",\"syntax\":\"saturation(rgb)\",\"type\":\"function\"},\"save\":{\"description\":\"Saves an image from the display window. Append a file extension to the name of the file, to indicate the file format to be used: either TIFF (.tif), TARGA (.tga), JPEG (.jpg), or PNG (.png). If no extension is included in the filename, the image will save in TIFF format and `.tif` will be added to the name. These files are saved to the sketch's folder, which may be opened by selecting \\\"Show sketch folder\\\" from the \\\"Sketch\\\" menu. Alternatively, the files can be saved to any location on the computer by using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows).\\n\\nAll images saved from the main drawing window will be opaque. To save images without a background, use `createGraphics()`.\",\"docUrl\":\"https://processing.org/reference/save_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: any sequence of letters and numbers\"},\"returns\":\"void\",\"syntax\":\"save(filename)\",\"type\":\"function\"},\"saveBytes\":{\"description\":\"As the opposite of `loadBytes()`, this function will write an entire array of bytes to a file. The data is saved in binary format. This file is saved to the sketch's folder, which is opened by selecting \\\"Show Sketch Folder\\\" from the \\\"Sketch\\\" menu. Alternatively, the files can be saved to any location on the computer by using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows).\",\"docUrl\":\"https://processing.org/reference/saveBytes_.html\",\"name\":null,\"parameters\":{\"data\":\"byte[]: array of bytes to be written\",\"filename\":\"String: name of the file to write to\"},\"returns\":\"void\",\"syntax\":\"saveBytes(filename, data)\",\"type\":\"function\"},\"saveFrame\":{\"description\":\"Saves a numbered sequence of images, one image each time the function is run. To save an image that is identical to the display window, run the function at the end of `draw()` or within mouse and key events such as `mousePressed()` and `keyPressed()`. Use the Movie Maker program in the Tools menu to combine these images to a movie.\\n\\nIf `saveFrame()` is used without parameters, it will save files as screen-0000.tif, screen-0001.tif, and so on. You can specify the name of the sequence with the `filename` parameter, including hash marks (####), which will be replaced by the current `frameCount` value. (The number of hash marks is used to determine how many digits to include in the file names.) Append a file extension, to indicate the file format to be used: either TIFF (.tif), TARGA (.tga), JPEG (.jpg), or PNG (.png). Image files are saved to the sketch's folder, which may be opened by selecting \\\"Show Sketch Folder\\\" from the \\\"Sketch\\\" menu.\\n\\nAlternatively, the files can be saved to any loc. . .\",\"docUrl\":\"https://processing.org/reference/saveFrame_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: any sequence of letters or numbers that ends with either \\\".tif\\\", \\\".tga\\\", \\\".jpg\\\", or \\\".png\\\"\"},\"returns\":\"void\",\"syntax\":\"saveFrame()\\nsaveFrame(filename)\",\"type\":\"function\"},\"saveJSONArray\":{\"description\":\"Writes the contents of a `JSONArray` object to a file. By default, this file is saved to the sketch's folder. This folder is opened by selecting \\\"Show Sketch Folder\\\" from the \\\"Sketch\\\" menu.\\n\\nAlternatively, the file can be saved to any location on the computer by using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows).\\n\\nAll files loaded and saved by the Processing API use UTF-8 encoding.\",\"docUrl\":\"https://processing.org/reference/saveJSONArray_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: the name of the file to save to\",\"json\":\"JSONArray: the JSONArray to save\",\"options\":\"String: \\\"compact\\\" and \\\"indent=N\\\", replace N with the number of spaces\"},\"returns\":\"boolean\",\"syntax\":\"saveJSONArray(json, filename)\\nsaveJSONArray(json, filename, options)\",\"type\":\"function\"},\"saveJSONObject\":{\"description\":\"Writes the contents of a `JSONObject` object to a file. By default, this file is saved to the sketch's folder. This folder is opened by selecting \\\"Show Sketch Folder\\\" from the \\\"Sketch\\\" menu.\\n\\nAlternatively, the file can be saved to any location on the computer by using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows).\\n\\nAll files loaded and saved by the Processing API use UTF-8 encoding.\",\"docUrl\":\"https://processing.org/reference/saveJSONObject_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: the name of the file to save to\",\"json\":\"JSONObject: the JSONObject to save\",\"options\":\"String: \\\"compact\\\" and \\\"indent=N\\\", replace N with the number of spaces\"},\"returns\":\"boolean\",\"syntax\":\"saveJSONObject(json, filename)\\nsaveJSONObject(json, filename, options)\",\"type\":\"function\"},\"saveStream\":{\"description\":\"Save the contents of a stream to a file in the sketch folder. This is basically `saveBytes(blah, loadBytes())`, but done more efficiently (and with less confusing syntax).\\n   \\nThe `target` parameter can be either a String specifying a file name, or, for greater control over the file location, a `File` object. (Note that, unlike some other functions, this will not automatically compress or uncompress gzip files.)\",\"docUrl\":\"https://processing.org/reference/saveStream_.html\",\"name\":null,\"parameters\":{\"source\":\"String: location to read from (a filename, path, or URL)\",\"target\":\"File, or String: name of the file to write to\"},\"returns\":\"boolean or void\",\"syntax\":\"saveStream(target, source)\",\"type\":\"function\"},\"saveStrings\":{\"description\":\"Writes an array of Strings to a file, one line per String. By default, this file is saved to the sketch's folder. This folder is opened by selecting \\\"Show Sketch Folder\\\" from the \\\"Sketch\\\" menu.\\n\\nAlternatively, the file can be saved to any location on the computer by using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows).\\n\\nStarting with Processing 1.0, all files loaded and saved by the Processing API use UTF-8 encoding. In earlier releases, the default encoding for your platform was used, which causes problems when files are moved to other platforms.\",\"docUrl\":\"https://processing.org/reference/saveStrings_.html\",\"name\":null,\"parameters\":{\"data\":\"String[]: string array to be written\",\"filename\":\"String: filename for output\"},\"returns\":\"void\",\"syntax\":\"saveStrings(filename, data)\",\"type\":\"function\"},\"saveTable\":{\"description\":\"Writes the contents of a Table object to a file. By default, this file is saved to the sketch's folder. This folder is opened by selecting \\\"Show Sketch Folder\\\" from the \\\"Sketch\\\" menu.\\n\\nAlternatively, the file can be saved to any location on the computer by using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows).\\n\\nAll files loaded and saved by the Processing API use UTF-8 encoding.\",\"docUrl\":\"https://processing.org/reference/saveTable_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: the filename to which the Table should be saved\",\"options\":\"String: can be one of \\\"tsv\\\", \\\"csv\\\", \\\"bin\\\", or \\\"html\\\"\",\"table\":\"Table: the Table object to save to a file\"},\"returns\":\"boolean\",\"syntax\":\"saveTable(table, filename)\\nsaveTable(table, filename, options)\",\"type\":\"function\"},\"saveXML\":{\"description\":\"Writes the contents of an XML object to a file. By default, this file is saved to the sketch's folder. This folder is opened by selecting \\\"Show Sketch Folder\\\" from the \\\"Sketch\\\" menu.\\n\\nAlternatively, the file can be saved to any location on the computer by using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows).\\n\\nAll files loaded and saved by the Processing API use UTF-8 encoding.\",\"docUrl\":\"https://processing.org/reference/saveXML_.html\",\"name\":null,\"parameters\":{\"filename\":\"String: name of the file to write to\",\"xml\":\"XML: the XML object to save to disk\"},\"returns\":\"boolean\",\"syntax\":\"saveXML(xml, filename)\",\"type\":\"function\"},\"scale\":{\"description\":\"Increases or decreases the size of a shape by expanding and contracting vertices. Objects always scale from their relative origin to the coordinate system. Scale values are specified as decimal percentages. For example, the function call `scale(2.0)` increases the dimension of a shape by 200%.\\n\\nTransformations apply to everything that happens after and subsequent calls to the function multiply the effect. For example, calling `scale(2.0)` and then `scale(1.5)` is the same as `scale(3.0)`. If `scale()` is called within `draw()`, the transformation is reset when the loop begins again. Using this function with the `z` parameter requires using P3D as a parameter for `size()`, as shown in the third example above. This function can be further controlled with `pushMatrix()` and `popMatrix()`.\",\"docUrl\":\"https://processing.org/reference/scale_.html\",\"name\":null,\"parameters\":{\"s\":\"float: percentage to scale the object\",\"x\":\"float: percentage to scale the object in the x-axis\",\"y\":\"float: percentage to scale the object in the y-axis\",\"z\":\"float: percentage to scale the object in the z-axis\"},\"returns\":\"void\",\"syntax\":\"scale(s)\\nscale(x, y)\\nscale(x, y, z)\",\"type\":\"function\"},\"screenX\":{\"description\":\"Takes a three-dimensional X, Y, Z position and returns the X value for where it will appear on a (two-dimensional) screen.\",\"docUrl\":\"https://processing.org/reference/screenX_.html\",\"name\":null,\"parameters\":{\"x\":\"float: 3D x-coordinate to be mapped\",\"y\":\"float: 3D y-coordinate to be mapped\",\"z\":\"float: 3D z-coordinate to be mapped\"},\"returns\":\"float\",\"syntax\":\"screenX(x, y)\\nscreenX(x, y, z)\",\"type\":\"function\"},\"screenY\":{\"description\":\"Takes a three-dimensional X, Y, Z position and returns the Y value for where it will appear on a (two-dimensional) screen.\",\"docUrl\":\"https://processing.org/reference/screenY_.html\",\"name\":null,\"parameters\":{\"x\":\"float: 3D x-coordinate to be mapped\",\"y\":\"float: 3D y-coordinate to be mapped\",\"z\":\"float: 3D z-coordinate to be mapped\"},\"returns\":\"float\",\"syntax\":\"screenY(x, y)\\nscreenY(x, y, z)\",\"type\":\"function\"},\"screenZ\":{\"description\":\"Takes a three-dimensional X, Y, Z position and returns the Z value for where it will appear on a (two-dimensional) screen.\",\"docUrl\":\"https://processing.org/reference/screenZ_.html\",\"name\":null,\"parameters\":{\"x\":\"float: 3D x-coordinate to be mapped\",\"y\":\"float: 3D y-coordinate to be mapped\",\"z\":\"float: 3D z-coordinate to be mapped\"},\"returns\":\"float\",\"syntax\":\"screenZ(x, y, z)\",\"type\":\"function\"},\"second\":{\"description\":\"Processing communicates with the clock on your computer. The `second()` function returns the current second as a value from 0 - 59.\",\"docUrl\":\"https://processing.org/reference/second_.html\",\"name\":null,\"parameters\":{},\"returns\":\"int\",\"syntax\":\"second()\",\"type\":\"function\"},\"selectFolder\":{\"description\":\"Opens a platform-specific file chooser dialog to select a folder. After the selection is made, the selection will be passed to the 'callback' function. If the dialog is closed or canceled, null will be sent to the function, so that the program is not waiting for additional input. The callback is necessary because of how threading works.\",\"docUrl\":\"https://processing.org/reference/selectFolder_.html\",\"name\":null,\"parameters\":{\"callback\":\"String: name of the method to be called when the selection is made\",\"prompt\":\"String: message to the user\"},\"returns\":\"void\",\"syntax\":\"selectFolder(prompt, callback)\\nselectFolder(prompt, callback, file)\\nselectFolder(prompt, callback, file, callbackObject)\\nselectFolder(prompt, callbackMethod, defaultSelection, callbackObject, parentFrame)\\nselectFolder(prompt, callbackMethod, defaultSelection, callbackObject, parentFrame, sketch)\",\"type\":\"function\"},\"selectInput\":{\"description\":\"Opens a platform-specific file chooser dialog to select a file for input. After the selection is made, the selected File will be passed to the 'callback' function. If the dialog is closed or canceled, null will be sent to the function, so that the program is not waiting for additional input. The callback is necessary because of how threading works.\",\"docUrl\":\"https://processing.org/reference/selectInput_.html\",\"name\":null,\"parameters\":{\"callback\":\"String: name of the method to be called when the selection is made\",\"prompt\":\"String: message to the user\"},\"returns\":\"void\",\"syntax\":\"selectInput(prompt, callback)\\nselectInput(prompt, callback, file)\\nselectInput(prompt, callback, file, callbackObject)\\nselectInput(prompt, callbackMethod, file, callbackObject, parent, sketch)\\nselectInput(prompt, callbackMethod, file, callbackObject, parent)\",\"type\":\"function\"},\"selectOutput\":{\"description\":\"Opens a platform-specific file chooser dialog to select a file for output. After the selection is made, the selected File will be passed to the 'callback' function. If the dialog is closed or canceled, null will be sent to the function, so that the program is not waiting for additional input. The callback is necessary because of how threading works.\",\"docUrl\":\"https://processing.org/reference/selectOutput_.html\",\"name\":null,\"parameters\":{\"callback\":\"String: name of the method to be called when the selection is made\",\"prompt\":\"String: message to the user\"},\"returns\":\"void\",\"syntax\":\"selectOutput(prompt, callback)\\nselectOutput(prompt, callback, file)\\nselectOutput(prompt, callback, file, callbackObject)\\nselectOutput(prompt, callbackMethod, file, callbackObject, parent)\\nselectOutput(prompt, callbackMethod, file, callbackObject, parent, sketch)\",\"type\":\"function\"},\"set\":{\"description\":\"Changes the color of any pixel, or writes an image directly to the display window.\\n\\nThe `x` and `y` parameters specify the pixel to change and the `c` parameter specifies the color value. The `c` parameter is interpreted according to the current color mode.  (The default color mode is RGB values from 0 to 255.)  When setting an image, the `x` and `y` parameters define the coordinates for the upper-left corner of the image, regardless of the current `imageMode()`.\\n\\nSetting the color of a single pixel with `set(x, y)` is easy, but not as fast as putting the data directly into `pixels[]`. The equivalent statement to `set(x, y, #000000)` using `pixels[]` is `pixels[y*width+x] = #000000`. See the reference for pixels[] for more information.\",\"docUrl\":\"https://processing.org/reference/set_.html\",\"name\":null,\"parameters\":{\"c\":\"int: any value of the color datatype\",\"img\":\"PImage: image to copy into the original image\",\"x\":\"int: x-coordinate of the pixel\",\"y\":\"int: y-coordinate of the pixel\"},\"returns\":\"void\",\"syntax\":\"set(x, y, c)\\nset(x, y, img)\",\"type\":\"function\"},\"setLocation\":{\"description\":\"The `setLocation()` function defines the position of the Processing sketch in relation to the upper-left corner of the computer screen.\\n\\nThere are more features of PSurface documented in the Processing JavaDoc.\",\"docUrl\":\"https://processing.org/reference/setLocation_.html\",\"name\":null,\"parameters\":{\"x\":\"int: x-coordinate of the surface\",\"y\":\"int: y-coordinate of the surface\"},\"syntax\":\"surface.setLocation(x, y)\\n\",\"type\":\"function\"},\"setResizable\":{\"description\":\"By default, Processing sketches can't be resized. When `surface.setResizable(true)` is used within a sketch, the window can be resized while it's running.\\n\\nThere are more features of PSurface documented in the Processing JavaDoc.\",\"docUrl\":\"https://processing.org/reference/setResizable_.html\",\"name\":null,\"parameters\":{\"resizable\":\"boolean: true to make the surface resizable\"},\"syntax\":\"surface.setResizable(resizable)\\n\",\"type\":\"function\"},\"setTitle\":{\"description\":\"The `setTitle()` function defines the title to appear at the top of the sketch window.\\n\\nThere are more features of PSurface documented in the Processing JavaDoc.\",\"docUrl\":\"https://processing.org/reference/setTitle_.html\",\"name\":null,\"parameters\":{\"title\":\"String: name of the window\"},\"syntax\":\"surface.setTitle(title)\\n\",\"type\":\"function\"},\"settings\":{\"description\":\"The `settings()` function is new with Processing 3.0. It's not needed in most sketches. It's only useful when it's absolutely necessary to define the parameters to `size()` with a variable. Alternately, the `settings()` function is necessary when using Processing code outside of the Processing Development Environment (PDE). For example, when using the Eclipse code editor, it's necessary to use `settings()` to define the `size()` and `smooth()` values for a sketch..\\n \\nThe `settings()` method runs before the sketch has been set up, so other Processing functions cannot be used at that point. For instance, do not use loadImage() inside settings(). The settings() method runs \\\"passively\\\" to set a few variables, compared to the `setup()` command that call commands in the Processing API.\",\"docUrl\":\"https://processing.org/reference/settings_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"settings()\",\"type\":\"function\"},\"setup\":{\"description\":\"The `setup()` function is run once, when the program starts. It's used to define initial enviroment properties such as screen size and to load media such as images and fonts as the program starts. There can only be one `setup()` function for each program and it shouldn't be called again after its initial execution.\\n\\nIf the sketch is a different dimension than the default, the `size()` function or `fullScreen()` function must be the first line in `setup()`.\\n\\nNote: Variables declared within `setup()` are not accessible within other functions, including `draw()`.\",\"docUrl\":\"https://processing.org/reference/setup_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"setup()\",\"type\":\"function\"},\"shader\":{\"description\":\"Applies the shader specified by the parameters. It's compatible with the P2D and P3D renderers, but not with the default renderer.\",\"docUrl\":\"https://processing.org/reference/shader_.html\",\"name\":null,\"parameters\":{\"kind\":\"int: type of shader, either POINTS, LINES, or TRIANGLES\",\"shader\":\"PShader: name of shader file\"},\"returns\":\"void\",\"syntax\":\"shader(shader)\\nshader(shader, kind)\",\"type\":\"function\"},\"shape\":{\"description\":\"Draws shapes to the display window. Shapes must be in the sketch's \\\"data\\\" directory to load correctly. Select \\\"Add file...\\\" from the \\\"Sketch\\\" menu to add the shape. Processing currently works with SVG, OBJ, and custom-created shapes. The `shape` parameter specifies the shape to display and the coordinate parameters define the location of the shape from its upper-left corner. The shape is displayed at its original size unless the `c` and `d` parameters specify a different size. The `shapeMode()` function can be used to change the way these parameters are interpreted.\",\"docUrl\":\"https://processing.org/reference/shape_.html\",\"name\":null,\"parameters\":{\"a\":\"float: x-coordinate of the shape\",\"b\":\"float: y-coordinate of the shape\",\"c\":\"float: width to display the shape\",\"d\":\"float: height to display the shape\",\"shape\":\"PShape: the shape to display\",\"x\":\"float: x-coordinate of the shape\",\"y\":\"float: y-coordinate of the shape\"},\"returns\":\"void\",\"syntax\":\"shape(shape)\\nshape(shape, x, y)\\nshape(shape, a, b, c, d)\",\"type\":\"function\"},\"shapeMode\":{\"description\":\"Modifies the location from which shapes draw. The default mode is `shapeMode(CORNER)`, which specifies the location to be the upper left corner of the shape and uses the third and fourth parameters of `shape()` to specify the width and height. The syntax `shapeMode(CORNERS)` uses the first and second parameters of `shape()` to set the location of one corner and uses the third and fourth parameters to set the opposite corner. The syntax `shapeMode(CENTER)` draws the shape from its center point and uses the third and forth parameters of `shape()` to specify the width and height. The parameter must be written in \\\"ALL CAPS\\\" because Processing is a case sensitive language.\",\"docUrl\":\"https://processing.org/reference/shapeMode_.html\",\"name\":null,\"parameters\":{\"mode\":\"int: either CORNER, CORNERS, CENTER\"},\"returns\":\"void\",\"syntax\":\"shapeMode(mode)\",\"type\":\"function\"},\"shearX\":{\"description\":\"Shears a shape around the x-axis the amount specified by the `angle` parameter. Angles should be specified in radians (values from 0 to PI*2) or converted to radians with the `radians()` function. Objects are always sheared around their relative position to the origin and positive numbers shear objects in a clockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling `shearX(PI/2)` and then `shearX(PI/2)` is the same as `shearX(PI)`. If `shearX()` is called within the `draw()`, the transformation is reset when the loop begins again.\\n \\nTechnically, `shearX()` multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the `pushMatrix()` and `popMatrix()` functions.\",\"docUrl\":\"https://processing.org/reference/shearX_.html\",\"name\":null,\"parameters\":{\"angle\":\"float: angle of shear specified in radians\"},\"returns\":\"void\",\"syntax\":\"shearX(angle)\",\"type\":\"function\"},\"shearY\":{\"description\":\"Shears a shape around the y-axis the amount specified by the `angle` parameter. Angles should be specified in radians (values from 0 to PI*2) or converted to radians with the `radians()` function. Objects are always sheared around their relative position to the origin and positive numbers shear objects in a clockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling `shearY(PI/2)` and then `shearY(PI/2)` is the same as `shearY(PI)`. If `shearY()` is called within the `draw()`, the transformation is reset when the loop begins again.\\n \\nTechnically, `shearY()` multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the `pushMatrix()` and `popMatrix()` functions.\",\"docUrl\":\"https://processing.org/reference/shearY_.html\",\"name\":null,\"parameters\":{\"angle\":\"float: angle of shear specified in radians\"},\"returns\":\"void\",\"syntax\":\"shearY(angle)\",\"type\":\"function\"},\"shininess\":{\"description\":\"Sets the amount of gloss in the surface of shapes. Used in combination with `ambient()`, `specular()`, and `emissive()` in setting the material properties of shapes.\",\"docUrl\":\"https://processing.org/reference/shininess_.html\",\"name\":null,\"parameters\":{\"shine\":\"float: degree of shininess\"},\"returns\":\"void\",\"syntax\":\"shininess(shine)\",\"type\":\"function\"},\"shorten\":{\"description\":\"Decreases a one-dimensional array by one element and returns the shortened array.\\n \\nWhen using an array of objects, the data returned from the function must be cast to the object array's data type. For example: SomeClass[] items = (SomeClass[]) shorten(originalArray)\",\"docUrl\":\"https://processing.org/reference/shorten_.html\",\"name\":null,\"parameters\":{\"list\":\"Object, String[], float[], int[], char[], byte[], or boolean[]: array to shorten\"},\"returns\":\"boolean[], byte[], char[], int[], float[], String[], or Object\",\"syntax\":\"shorten(list)\",\"type\":\"function\"},\"sin\":{\"description\":\"Calculates the sine of an angle. This function expects the values of the `angle` parameter to be provided in radians (values from 0 to 6.28). Values are returned in the range -1 to 1.\",\"docUrl\":\"https://processing.org/reference/sin_.html\",\"name\":null,\"parameters\":{\"angle\":\"float: an angle in radians\"},\"returns\":\"float\",\"syntax\":\"sin(angle)\",\"type\":\"function\"},\"size\":{\"description\":\"Defines the dimension of the display window width and height in units of pixels. In a program that has the `setup()` function, the `size()` function must be the first line of code inside `setup()`, and the `setup()` function must appear in the code tab with the same name as your sketch folder.\\n\\nThe built-in variables `width` and `height` are set by the parameters passed to this function. For example, running `size(640, 480)` will assign 640 to the `width` variable and 480 to the height `variable`. If `size()` is not used, the window will be given a default size of 100 x 100 pixels.\\n\\nThe `size()` function can only be used once inside a sketch, and it cannot be used for resizing.\\n\\nAs of Processing 3, to run a sketch at the full dimensions of a screen, use the `fullScreen()` function, rather than the older way of using `size(displayWidth, displayHeight)`.\\n\\nThe maximum width and height is limited by your operating system, and is usually the width and height of your actual screen. On some m. . .\",\"docUrl\":\"https://processing.org/reference/size_.html\",\"name\":null,\"parameters\":{\"height\":\"int: height of the display window in units of pixels\",\"width\":\"int: width of the display window in units of pixels\"},\"returns\":\"void\",\"syntax\":\"size(width, height)\\nsize(width, height, renderer)\",\"type\":\"function\"},\"smooth\":{\"description\":\"Draws all geometry with smooth (anti-aliased) edges. This behavior is the default, so `smooth()` only needs to be used when a program needs to set the smoothing in a different way. The `level` parameter increases the amount of smoothness. This is the level of over sampling applied to the graphics buffer.\\n\\nWith the P2D and P3D renderers, `smooth(2)` is the default, this is called \\\"2x anti-aliasing.\\\" The code `smooth(4)` is used for 4x anti-aliasing and `smooth(8)` is specified for \\\"8x anti-aliasing.\\\" The maximum anti-aliasing level is determined by the hardware of the machine that is running the software, so `smooth(4)` and `smooth(8)` will not work with every computer.\\n\\nThe default renderer uses `smooth(3)` by default. This is bicubic smoothing. The other option for the default renderer is `smooth(2)`, which is bilinear smoothing.\\n\\nWith Processing 3.0, `smooth()` is different than before. It was common to use `smooth()` and `noSmooth()` to turn on and off antialiasing within a sketch. . . .\",\"docUrl\":\"https://processing.org/reference/smooth_.html\",\"name\":null,\"parameters\":{\"level\":\"int: either 2, 3, 4, or 8 depending on the renderer\"},\"returns\":\"void\",\"syntax\":\"smooth(level)\",\"type\":\"function\"},\"sort\":{\"description\":\"Sorts an array of numbers from smallest to largest, or puts an array of words in alphabetical order. The original array is not modified; a re-ordered array is returned. The `count` parameter states the number of elements to sort. For example, if there are 12 elements in an array and `count` is set to 5, only the first 5 elements in the array will be sorted.\",\"docUrl\":\"https://processing.org/reference/sort_.html\",\"name\":null,\"parameters\":{\"count\":\"int: number of elements to sort, starting from 0\",\"list\":\"String[], float[], int[], char[], or byte[]: array to sort\"},\"returns\":\"byte[], char[], int[], float[], or String[]\",\"syntax\":\"sort(list)\\nsort(list, count)\",\"type\":\"function\"},\"specular\":{\"description\":\"Sets the specular color of the materials used for shapes drawn to the screen, which sets the color of highlights. Specular refers to light which bounces off a surface in a preferred direction (rather than bouncing in all directions like a diffuse light). Used in combination with `emissive()`, `ambient()`, and `shininess()` in setting the material properties of shapes.\",\"docUrl\":\"https://processing.org/reference/specular_.html\",\"name\":null,\"parameters\":{\"gray\":\"float: value between black and white, by default 0 to 255\",\"rgb\":\"int: color to set\",\"v1\":\"float: red or hue value (depending on current color mode)\",\"v2\":\"float: green or saturation value (depending on current color mode)\",\"v3\":\"float: blue or brightness value (depending on current color mode)\"},\"returns\":\"void\",\"syntax\":\"specular(rgb)\\nspecular(gray)\\nspecular(v1, v2, v3)\",\"type\":\"function\"},\"sphere\":{\"description\":\"A sphere is a hollow ball made from tessellated triangles.\",\"docUrl\":\"https://processing.org/reference/sphere_.html\",\"name\":null,\"parameters\":{\"r\":\"float: the radius of the sphere\"},\"returns\":\"void\",\"syntax\":\"sphere(r)\",\"type\":\"function\"},\"sphereDetail\":{\"description\":\"Controls the detail used to render a sphere by adjusting the number of vertices of the sphere mesh. The default resolution is 30, which creates a fairly detailed sphere definition with vertices every 360/30 = 12 degrees. If you're going to render a great number of spheres per frame, it is advised to reduce the level of detail using this function. The setting stays active until `sphereDetail()` is called again with a new parameter and so should not be called prior to every `sphere()` statement, unless you wish to render spheres with different settings, e.g. using less detail for smaller spheres or ones further away from the camera. To control the detail of the horizontal and vertical resolution independently, use the version of the functions with two parameters.\",\"docUrl\":\"https://processing.org/reference/sphereDetail_.html\",\"name\":null,\"parameters\":{\"res\":\"int: number of segments (minimum 3) used per full circle revolution\",\"ures\":\"int: number of segments used longitudinally per full circle revolutoin\",\"vres\":\"int: number of segments used latitudinally from top to bottom\"},\"returns\":\"void\",\"syntax\":\"sphereDetail(res)\\nsphereDetail(ures, vres)\",\"type\":\"function\"},\"splice\":{\"description\":\"Inserts a value or an array of values into an existing array. The first two parameters must be arrays of the same datatype. The first parameter specifies the initial array to be modified, and the second parameter defines the data to be inserted. The third parameter is an index value which specifies the array position from which to insert data. (Remember that array index numbering starts at zero, so the first position is 0, the second position is 1, and so on.)\\n\\nWhen splicing an array of objects, the data returned from the function must be cast to the object array's data type. For example: SomeClass[] items = (SomeClass[]) splice(array1, array2, index)\",\"docUrl\":\"https://processing.org/reference/splice_.html\",\"name\":null,\"parameters\":{\"index\":\"int: position in the array from which to insert data\",\"list\":\"Object, String[], float[], int[], char[], byte[], or boolean[]: array to splice into\",\"value\":\"Object, String[], String, float[], float, int[], int, char[], char, byte[], byte, boolean[], or boolean: value to be spliced in\"},\"returns\":\"boolean[], byte[], char[], int[], float[], String[], or Object\",\"syntax\":\"splice(list, value, index)\",\"type\":\"function\"},\"split\":{\"description\":\"The `split()` function breaks a String into pieces using a character or string as the delimiter. The `delim` parameter specifies the character or characters that mark the boundaries between each piece. A String[] array is returned that contains each of the pieces.\\n \\nIf the result is a set of numbers, you can convert the String[] array to a float[] or int[] array using the datatype conversion functions `int()` and `float()`.  (See the second example above.)\\n  \\nThe `splitTokens()` function works in a similar fashion, except that it splits using a range of characters instead of a specific character or sequence.\\n\\nThis function uses regular expressions to determine how the `delim` parameter divides the `str` parameter. Therefore, if you use characters such parentheses and brackets that are used with regular expressions as a part of the `delim` parameter, you'll need to put two blackslashes (\\\\) in front of the character (see example above). You can read more about regular expressions and esc. . .\",\"docUrl\":\"https://processing.org/reference/split_.html\",\"name\":null,\"parameters\":{\"delim\":\"char: the character or String used to separate the data\",\"value\":\"String: the String to be split\"},\"returns\":\"String[]\",\"syntax\":\"split(value, delim)\",\"type\":\"function\"},\"splitTokens\":{\"description\":\"The `splitTokens()` function splits a String at one or many character delimiters or \\\"tokens.\\\" The `delim` parameter specifies the character or characters to be used as a boundary.\\n\\nIf no `delim` characters are specified, any whitespace character is used to split. Whitespace characters include tab (\\\\t), line feed (\\n\\n), carriage return (\\\\r), form feed (\\\\f), and space.\\n\\nAfter using this function to parse incoming data, it is common to convert the data from Strings to integers or floats by using the datatype conversion functions `int()` and `float()`.\",\"docUrl\":\"https://processing.org/reference/splitTokens_.html\",\"name\":null,\"parameters\":{\"delim\":\"String: list of individual characters that will be used as separators\",\"value\":\"String: the String to be split\"},\"returns\":\"String[]\",\"syntax\":\"splitTokens(value)\\nsplitTokens(value, delim)\",\"type\":\"function\"},\"spotLight\":{\"description\":\"Adds a spot light. Lights need to be included in the `draw()` to remain persistent in a looping program. Placing them in the `setup()` of a looping program will cause them to only have an effect the first time through the loop. The `v1`, `v2`, and `v3` parameters are interpreted as either RGB or HSB values, depending on the current color mode. The `x`, `y`, and `z` parameters specify the position of the light and `nx`, `ny`, `nz` specify the direction of light. The `angle` parameter affects angle of the spotlight cone, while `concentration` sets the bias of light focusing toward the center of that cone.\",\"docUrl\":\"https://processing.org/reference/spotLight_.html\",\"name\":null,\"parameters\":{\"angle\":\"float: angle of the spotlight cone\",\"concentration\":\"float: exponent determining the center bias of the cone\",\"nx\":\"float: direction along the x axis\",\"ny\":\"float: direction along the y axis\",\"nz\":\"float: direction along the z axis\",\"v1\":\"float: red or hue value (depending on current color mode)\",\"v2\":\"float: green or saturation value (depending on current color mode)\",\"v3\":\"float: blue or brightness value (depending on current color mode)\",\"x\":\"float: x-coordinate of the light\",\"y\":\"float: y-coordinate of the light\",\"z\":\"float: z-coordinate of the light\"},\"returns\":\"void\",\"syntax\":\"spotLight(v1, v2, v3, x, y, z, nx, ny, nz, angle, concentration)\",\"type\":\"function\"},\"sq\":{\"description\":\"Squares a number (multiplies a number by itself). The result is always a positive number, as multiplying two negative numbers always yields a positive result. For example, -1 * -1 = 1.\",\"docUrl\":\"https://processing.org/reference/sq_.html\",\"name\":null,\"parameters\":{\"n\":\"float: number to square\"},\"returns\":\"float\",\"syntax\":\"sq(n)\",\"type\":\"function\"},\"sqrt\":{\"description\":\"Calculates the square root of a number. The square root of a number is always positive, even though there may be a valid negative root. The square root `s` of number `a` is such that `s*s = a`. It is the opposite of squaring.\",\"docUrl\":\"https://processing.org/reference/sqrt_.html\",\"name\":null,\"parameters\":{\"n\":\"float: non-negative number\"},\"returns\":\"float\",\"syntax\":\"sqrt(n)\",\"type\":\"function\"},\"square\":{\"description\":\"Draws a square to the screen. A square is a four-sided shape with every angle at ninety degrees and each side is the same length. By default, the first two parameters set the location of the upper-left corner, the third sets the width and height. The way these parameters are interpreted, however, may be changed with the `rectMode()` function.\",\"docUrl\":\"https://processing.org/reference/square_.html\",\"name\":null,\"parameters\":{\"extent\":\"float: width and height of the rectangle by default\",\"x\":\"float: x-coordinate of the rectangle by default\",\"y\":\"float: y-coordinate of the rectangle by default\"},\"returns\":\"void\",\"syntax\":\"square(x, y, extent)\",\"type\":\"function\"},\"str\":{\"description\":\"Converts a value of a primitive data type (`boolean`, `byte`, `char`, `int`, or `float`) to its `String` representation. For example, converting an integer with `str(3)` will return the `String` value of `\\\"3\\\"`, converting a float with `str(-12.6)` will return `\\\"-12.6\\\"`, and converting a boolean with `str(true)` will return `\\\"true\\\"`.\\n\\nWhen an array of values is passed in, then a `String` array of the same length is returned.\",\"docUrl\":\"https://processing.org/reference/strconvert_.html\",\"name\":null,\"parameters\":{},\"type\":\"function\"},\"stroke\":{\"description\":\"Sets the color used to draw lines and borders around shapes. This color is either specified in terms of the RGB or HSB color depending on the current `colorMode().` The default color space is RGB, with each value in the range from 0 to 255. \\n \\nWhen using hexadecimal notation to specify a color, use \\\"`#`\\\" or \\\"`0x`\\\" before the values (e.g., `#CCFFAA` or `0xFFCCFFAA`). The `#` syntax uses six digits to specify a color (just as colors are typically specified in HTML and CSS). When using the hexadecimal notation starting with \\\"`0x`\\\", the hexadecimal value must be specified with eight characters; the first two characters define the alpha component, and the remainder define the red, green, and blue components. \\n \\nThe value for the gray parameter must be less than or equal to the current maximum value as specified by `colorMode()`. The default maximum value is 255.\\n \\nWhen drawing in 2D with the default renderer, you may need `hint(ENABLE_STROKE_PURE)` to improve drawing quality (at the expense. . .\",\"docUrl\":\"https://processing.org/reference/stroke_.html\",\"name\":null,\"parameters\":{\"alpha\":\"float: opacity of the stroke\",\"gray\":\"float: specifies a value between white and black\",\"rgb\":\"int: color value in hexadecimal notation\",\"v1\":\"float: red or hue value (depending on current color mode)\",\"v2\":\"float: green or saturation value (depending on current color mode)\",\"v3\":\"float: blue or brightness value (depending on current color mode)\"},\"returns\":\"void\",\"syntax\":\"stroke(rgb)\\nstroke(rgb, alpha)\\nstroke(gray)\\nstroke(gray, alpha)\\nstroke(v1, v2, v3)\\nstroke(v1, v2, v3, alpha)\",\"type\":\"function\"},\"strokeCap\":{\"description\":\"Sets the style for rendering line endings. These ends are either squared, extended, or rounded, each of which specified with the corresponding parameters: SQUARE, PROJECT, and ROUND. The default cap is ROUND.\\n\\nTo make `point()` appear square, use `strokeCap(PROJECT)`. Using `strokeCap(SQUARE)` (no cap) causes points to become invisible.\",\"docUrl\":\"https://processing.org/reference/strokeCap_.html\",\"name\":null,\"parameters\":{\"cap\":\"int: either SQUARE, PROJECT, or ROUND\"},\"returns\":\"void\",\"syntax\":\"strokeCap(cap)\",\"type\":\"function\"},\"strokeJoin\":{\"description\":\"Sets the style of the joints which connect line segments. These joints are either mitered, beveled, or rounded and specified with the corresponding parameters MITER, BEVEL, and ROUND. The default joint is MITER.\",\"docUrl\":\"https://processing.org/reference/strokeJoin_.html\",\"name\":null,\"parameters\":{\"join\":\"int: either MITER, BEVEL, ROUND\"},\"returns\":\"void\",\"syntax\":\"strokeJoin(join)\",\"type\":\"function\"},\"strokeWeight\":{\"description\":\"Sets the width of the stroke used for lines, points, and the border around shapes. All widths are set in units of pixels.\\n\\nUsing point() with strokeWeight(1) or smaller may draw nothing to the screen, depending on the graphics settings of the computer. Workarounds include setting the pixel using `set() or drawing the point using either `circle()` or `square()`.\\n`\",\"docUrl\":\"https://processing.org/reference/strokeWeight_.html\",\"name\":null,\"parameters\":{\"weight\":\"float: the weight (in pixels) of the stroke\"},\"returns\":\"void\",\"syntax\":\"strokeWeight(weight)\",\"type\":\"function\"},\"subset\":{\"description\":\"Extracts an array of elements from an existing array. The `list` parameter defines the array from which the elements will be copied, and the `start` and `count` parameters specify which elements to extract. If no `count` is given, elements will be extracted from the `start` to the end of the array. When specifying the `start`, remember that the first array element is 0. This function does not change the source array.\\n\\nWhen using an array of objects, the data returned from the function must be cast to the object array's data type. For example: SomeClass[] items = (SomeClass[]) subset(originalArray, 0, 4)\",\"docUrl\":\"https://processing.org/reference/subset_.html\",\"name\":null,\"parameters\":{\"count\":\"int: number of values to extract\",\"list\":\"Object, String[], double[], float[], long[], int[], char[], byte[], or boolean[]: array to extract from\",\"start\":\"int: position to begin\"},\"returns\":\"boolean[], byte[], char[], int[], long[], float[], double[], String[], or Object\",\"syntax\":\"subset(list, start)\\nsubset(list, start, count)\",\"type\":\"function\"},\"tan\":{\"description\":\"Calculates the ratio of the sine and cosine of an angle. This function expects the values of the `angle` parameter to be provided in radians (values from 0 to PI*2). Values are returned in the range `infinity` to `-infinity`.\",\"docUrl\":\"https://processing.org/reference/tan_.html\",\"name\":null,\"parameters\":{\"angle\":\"float: an angle in radians\"},\"returns\":\"float\",\"syntax\":\"tan(angle)\",\"type\":\"function\"},\"text\":{\"description\":\"Draws text to the screen. Displays the information specified in the first parameter on the screen in the position specified by the additional parameters. A default font will be used unless a font is set with the `textFont()` function and a default size will be used unless a font is set with `textSize()`. Change the color of the text with the `fill()` function. The text displays in relation to the `textAlign()` function, which gives the option to draw to the left, right, and center of the coordinates.\\n\\nThe `x2` and `y2` parameters define a rectangular area to display within and may only be used with string data. When these parameters are specified, they are interpreted based on the current `rectMode()` setting. Text that does not fit completely within the rectangle specified will not be drawn to the screen.\\n\\nNote that Processing now lets you call `text()` without first specifying a PFont with `textFont()`. In that case, a generic sans-serif font will be used instead. (See the third exam. . .\",\"docUrl\":\"https://processing.org/reference/text_.html\",\"name\":null,\"parameters\":{\"c\":\"char: the alphanumeric character to be displayed\",\"chars\":\"char[]: the alphanumberic symbols to be displayed\",\"num\":\"int, or float: the numeric value to be displayed\",\"start\":\"int: array index at which to start writing characters\",\"stop\":\"int: array index at which to stop writing characters\",\"x\":\"float: x-coordinate of text\",\"x1\":\"float: by default, the x-coordinate of text, see rectMode() for more info\",\"x2\":\"float: by default, the width of the text box, see rectMode() for more info\",\"y\":\"float: y-coordinate of text\",\"y1\":\"float: by default, the y-coordinate of text, see rectMode() for more info\",\"y2\":\"float: by default, the height of the text box, see rectMode() for more info\",\"z\":\"float: z-coordinate of text\"},\"returns\":\"void\",\"syntax\":\"text(c, x, y)\\ntext(c, x, y, z)\\ntext(str, x, y)\\ntext(chars, start, stop, x, y)\\ntext(str, x, y, z)\\ntext(chars, start, stop, x, y, z)\\ntext(str, x1, y1, x2, y2)\\ntext(num, x, y)\\ntext(num, x, y, z)\",\"type\":\"function\"},\"textAlign\":{\"description\":\"Sets the current alignment for drawing text. The parameters LEFT, CENTER, and RIGHT set the display characteristics of the letters in relation to the values for the `x` and `y` parameters of the `text()` function.\\n \\nAn optional second parameter can be used to vertically align the text. BASELINE is the default, and the vertical alignment will be reset to BASELINE if the second parameter is not used. The TOP and CENTER parameters are straightforward. The BOTTOM parameter offsets the line based on the current `textDescent()`. For multiple lines, the final line will be aligned to the bottom, with the previous lines appearing above it.\\n \\nWhen using `text()` with width and height parameters, BASELINE is ignored, and treated as TOP. (Otherwise, text would by default draw outside the box, since BASELINE is the default setting. BASELINE is not a useful drawing mode for text drawn in a rectangle.)\\n \\nThe vertical alignment is based on the value of `textAscent()`, which many fonts do not specify c. . .\",\"docUrl\":\"https://processing.org/reference/textAlign_.html\",\"name\":null,\"parameters\":{\"alignX\":\"int: horizontal alignment, either LEFT, CENTER, or RIGHT\",\"alignY\":\"int: vertical alignment, either TOP, BOTTOM, CENTER, or BASELINE\"},\"returns\":\"void\",\"syntax\":\"textAlign(alignX)\\ntextAlign(alignX, alignY)\",\"type\":\"function\"},\"textAscent\":{\"description\":\"Returns ascent of the current font at its current size. This information is useful for determining the height of the font above the baseline.\",\"docUrl\":\"https://processing.org/reference/textAscent_.html\",\"name\":null,\"parameters\":{},\"returns\":\"float\",\"syntax\":\"textAscent()\",\"type\":\"function\"},\"textDescent\":{\"description\":\"Returns descent of the current font at its current size. This information is useful for determining the height of the font below the baseline.\",\"docUrl\":\"https://processing.org/reference/textDescent_.html\",\"name\":null,\"parameters\":{},\"returns\":\"float\",\"syntax\":\"textDescent()\",\"type\":\"function\"},\"textFont\":{\"description\":\"Sets the current font that will be drawn with the `text()` function. Fonts must be created for Processing with `createFont()` or loaded with `loadFont()` before they can be used. The font set through `textFont()` will be used in all subsequent calls to the `text()` function. If no `size` parameter is specified, the font size defaults to the original size (the size in which it was created with the \\\"Create Font...\\\" tool) overriding any previous calls to `textFont()` or `textSize()`.\\n When fonts are rendered as an image texture (as is the case with the P2D and P3D renderers as well as with `loadFont()` and vlw files), you should create fonts at the sizes that will be used most commonly. Using `textFont()` without the size parameter will result in the cleanest type.\",\"docUrl\":\"https://processing.org/reference/textFont_.html\",\"name\":null,\"parameters\":{\"size\":\"float: the size of the letters in units of pixels\",\"which\":\"PFont: any variable of the type PFont\"},\"returns\":\"void\",\"syntax\":\"textFont(which)\\ntextFont(which, size)\",\"type\":\"function\"},\"textLeading\":{\"description\":\"Sets the spacing between lines of text in units of pixels. This setting will be used in all subsequent calls to the `text()` function.  Note, however, that the leading is reset by `textSize()`. For example, if the leading is set to 20 with `textLeading(20)`, then if `textSize(48)` is run at a later point, the leading will be reset to the default for the text size of 48.\",\"docUrl\":\"https://processing.org/reference/textLeading_.html\",\"name\":null,\"parameters\":{\"leading\":\"float: the size in pixels for spacing between lines\"},\"returns\":\"void\",\"syntax\":\"textLeading(leading)\",\"type\":\"function\"},\"textMode\":{\"description\":\"Sets the way text draws to the screen, either as texture maps or as vector geometry. The default `textMode(MODEL)`, uses textures to render the fonts. The `textMode(SHAPE)` mode draws text using the glyph outlines of individual characters rather than as textures. This mode is only supported with the `PDF` and `P3D` renderer settings. With the `PDF` renderer, you must call `textMode(SHAPE)` before any other drawing occurs. If the outlines are not available, then `textMode(SHAPE)` will be ignored and `textMode(MODEL)` will be used instead.\\n\\nThe `textMode(SHAPE)` option in `P3D` can be combined with `beginRaw()` to write vector-accurate text to 2D and 3D output files, for instance `DXF` or `PDF`. The `SHAPE` mode is not currently optimized for `P3D`, so if recording shape data, use `textMode(MODEL)` until you're ready to capture the geometry with `beginRaw()`.\",\"docUrl\":\"https://processing.org/reference/textMode_.html\",\"name\":null,\"parameters\":{\"mode\":\"int: either MODEL or SHAPE\"},\"returns\":\"void\",\"syntax\":\"textMode(mode)\",\"type\":\"function\"},\"textSize\":{\"description\":\"Sets the current font size. This size will be used in all subsequent calls to the `text()` function. Font size is measured in units of pixels.\",\"docUrl\":\"https://processing.org/reference/textSize_.html\",\"name\":null,\"parameters\":{\"size\":\"float: the size of the letters in units of pixels\"},\"returns\":\"void\",\"syntax\":\"textSize(size)\",\"type\":\"function\"},\"textWidth\":{\"description\":\"Calculates and returns the width of any character or text string.\",\"docUrl\":\"https://processing.org/reference/textWidth_.html\",\"name\":null,\"parameters\":{\"c\":\"char: the character to measure\",\"str\":\"String: the String of characters to measure\"},\"returns\":\"float\",\"syntax\":\"textWidth(c)\\ntextWidth(str)\",\"type\":\"function\"},\"texture\":{\"description\":\"Sets a texture to be applied to vertex points. The `texture()` function must be called between `beginShape()` and `endShape()` and before any calls to `vertex()`. This function only works with the P2D and P3D renderers.\\n\\nWhen textures are in use, the fill color is ignored. Instead, use `tint()` to specify the color of the texture as it is applied to the shape.\",\"docUrl\":\"https://processing.org/reference/texture_.html\",\"name\":null,\"parameters\":{\"image\":\"PImage: reference to a PImage object\"},\"returns\":\"void\",\"syntax\":\"texture(image)\",\"type\":\"function\"},\"textureMode\":{\"description\":\"Sets the coordinate space for texture mapping. The default mode is `IMAGE`, which refers to the actual coordinates of the image. `NORMAL` refers to a normalized space of values ranging from 0 to 1. This function only works with the P2D and P3D renderers.\\n\\nWith `IMAGE`, if an image is 100 x 200 pixels, mapping the image onto the entire size of a quad would require the points (0,0) (100, 0) (100,200) (0,200). The same mapping in `NORMAL` is (0,0) (1,0) (1,1) (0,1).\",\"docUrl\":\"https://processing.org/reference/textureMode_.html\",\"name\":null,\"parameters\":{\"mode\":\"int: either IMAGE or NORMAL\"},\"returns\":\"void\",\"syntax\":\"textureMode(mode)\",\"type\":\"function\"},\"textureWrap\":{\"description\":\"Defines if textures repeat or draw once within a texture map. The two parameters are CLAMP (the default behavior) and REPEAT. This function only works with the P2D and P3D renderers.\",\"docUrl\":\"https://processing.org/reference/textureWrap_.html\",\"name\":null,\"parameters\":{\"wrap\":\"int: Either CLAMP (default) or REPEAT\"},\"returns\":\"void\",\"syntax\":\"textureWrap(wrap)\",\"type\":\"function\"},\"thread\":{\"description\":\"Processing sketches follow a specific sequence of steps: `setup()` first, followed by `draw()` over and over and over again in a loop. A thread is also a series of steps with a beginning, a middle, and an end. A Processing sketch is a single thread, often referred to as the \\\"Animation\\\" thread. Other threads' sequences, however, can run independently of the main animation loop. In fact, you can launch any number of threads at one time, and they will all run concurrently. \\n\\nYou cannot draw to the screen from a function called by `thread()`. Because it runs independently, the code will not be synchronized to the animation thread, causing strange or at least inconsistent results. Use `thread()` to load files or do other tasks that take time. When the task is finished, set a variable that indicates the task is complete, and check that from inside your `draw()` method.\\n\\nProcessing uses threads quite often, such as with library functions like `captureEvent()` and `movieEvent()`. These functio. . .\",\"docUrl\":\"https://processing.org/reference/thread_.html\",\"name\":null,\"parameters\":{\"name\":\"String: name of the function to be executed in a separate thread\"},\"returns\":\"void\",\"syntax\":\"thread(name)\",\"type\":\"function\"},\"tint\":{\"description\":\"Sets the fill value for displaying images. Images can be tinted to specified colors or made transparent by including an alpha value. \\n\\nTo apply transparency to an image without affecting its color, use white as the tint color and specify an alpha value. For instance, `tint(255, 128)` will make an image 50% transparent (assuming the default alpha range of 0-255, which can be changed with `colorMode()`).\\n\\nWhen using hexadecimal notation to specify a color, use \\\"`#`\\\" or \\\"`0x`\\\" before the values (e.g., `#CCFFAA` or `0xFFCCFFAA`). The `#` syntax uses six digits to specify a color (just as colors are typically specified in HTML and CSS). When using the hexadecimal notation starting with \\\"`0x`\\\", the hexadecimal value must be specified with eight characters; the first two characters define the alpha component, and the remainder define the red, green, and blue components. \\n\\nThe value for the gray parameter must be less than or equal to the current maximum value as specified by `colorMode()`. Th. . .\",\"docUrl\":\"https://processing.org/reference/tint_.html\",\"name\":null,\"parameters\":{\"alpha\":\"float: opacity of the image\",\"gray\":\"float: specifies a value between white and black\",\"rgb\":\"int: color value in hexadecimal notation\",\"v1\":\"float: red or hue value (depending on current color mode)\",\"v2\":\"float: green or saturation value (depending on current color mode)\",\"v3\":\"float: blue or brightness value (depending on current color mode)\"},\"returns\":\"void\",\"syntax\":\"tint(rgb)\\ntint(rgb, alpha)\\ntint(gray)\\ntint(gray, alpha)\\ntint(v1, v2, v3)\\ntint(v1, v2, v3, alpha)\",\"type\":\"function\"},\"translate\":{\"description\":\"Specifies an amount to displace objects within the display window. The `x` parameter specifies left/right translation, the `y` parameter specifies up/down translation, and the `z` parameter specifies translations toward/away from the screen. Using this function with the `z` parameter requires using P3D as a parameter in combination with size as shown in the above example.\\n\\nTransformations are cumulative and apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling `translate(50, 0)` and then `translate(20, 0)` is the same as `translate(70, 0)`. If `translate()` is called within `draw()`, the transformation is reset when the loop begins again. This function can be further controlled by using `pushMatrix()` and `popMatrix()`.\",\"docUrl\":\"https://processing.org/reference/translate_.html\",\"name\":null,\"parameters\":{\"x\":\"float: left/right translation\",\"y\":\"float: up/down translation\",\"z\":\"float: forward/backward translation\"},\"returns\":\"void\",\"syntax\":\"translate(x, y)\\ntranslate(x, y, z)\",\"type\":\"function\"},\"triangle\":{\"description\":\"A triangle is a plane created by connecting three points. The first two arguments specify the first point, the middle two arguments specify the second point, and the last two arguments specify the third point.\",\"docUrl\":\"https://processing.org/reference/triangle_.html\",\"name\":null,\"parameters\":{\"x1\":\"float: x-coordinate of the first point\",\"x2\":\"float: x-coordinate of the second point\",\"x3\":\"float: x-coordinate of the third point\",\"y1\":\"float: y-coordinate of the first point\",\"y2\":\"float: y-coordinate of the second point\",\"y3\":\"float: y-coordinate of the third point\"},\"returns\":\"void\",\"syntax\":\"triangle(x1, y1, x2, y2, x3, y3)\",\"type\":\"function\"},\"trim\":{\"description\":\"Removes whitespace characters from the beginning and end of a String. In addition to standard whitespace characters such as space, carriage return, and tab, this function also removes the Unicode \\\"nbsp\\\" character.\",\"docUrl\":\"https://processing.org/reference/trim_.html\",\"name\":null,\"parameters\":{\"array\":\"String[]: a String array\",\"str\":\"String: any string\"},\"returns\":\"String or String[]\",\"syntax\":\"trim(str)\\ntrim(array)\",\"type\":\"function\"},\"unbinary\":{\"description\":\"Converts a `String` representation of a binary number to its equivalent integer value. For example, `unbinary(\\\"00001000\\\")` will return `8`.\",\"docUrl\":\"https://processing.org/reference/unbinary_.html\",\"name\":null,\"parameters\":{\"value\":\"String: String to convert to an integer\"},\"returns\":\"int\",\"syntax\":\"unbinary(value)\",\"type\":\"function\"},\"unhex\":{\"description\":\"Converts a `String` representation of a hexadecimal number to its equivalent integer value.\",\"docUrl\":\"https://processing.org/reference/unhex_.html\",\"name\":null,\"parameters\":{\"value\":\"String: String to convert to an integer\"},\"returns\":\"int\",\"syntax\":\"unhex(value)\",\"type\":\"function\"},\"updatePixels\":{\"description\":\"Updates the display window with the data in the `pixels[]` array. Use in conjunction with `loadPixels()`. If you're only reading pixels from the array, there's no need to call `updatePixels()` \u2014 updating is only necessary to apply changes.\",\"docUrl\":\"https://processing.org/reference/updatePixels_.html\",\"name\":null,\"parameters\":{},\"returns\":\"void\",\"syntax\":\"updatePixels()\",\"type\":\"function\"},\"vertex\":{\"description\":\"All shapes are constructed by connecting a series of vertices. `vertex()` is used to specify the vertex coordinates for points, lines, triangles, quads, and polygons. It is used exclusively within the `beginShape()` and `endShape()` functions.\\n\\nDrawing a vertex in 3D using the `z` parameter requires the P3D parameter in combination with size, as shown in the above example.\\n\\nThis function is also used to map a texture onto geometry. The `texture()` function declares the texture to apply to the geometry and the `u` and `v` coordinates set define the mapping of this texture to the form. By default, the coordinates used for `u` and `v` are specified in relation to the image's size in pixels, but this relation can be changed with `textureMode()`.\",\"docUrl\":\"https://processing.org/reference/vertex_.html\",\"name\":null,\"parameters\":{\"u\":\"float: horizontal coordinate for the texture mapping\",\"v\":\"float: vertical coordinate for the texture mapping\",\"x\":\"float: x-coordinate of the vertex\",\"y\":\"float: y-coordinate of the vertex\",\"z\":\"float: z-coordinate of the vertex\"},\"returns\":\"void\",\"syntax\":\"vertex(x, y)\\nvertex(x, y, z)\\nvertex(v)\\nvertex(x, y, u, v)\\nvertex(x, y, z, u, v)\",\"type\":\"function\"},\"width\":{\"description\":\"System variable that stores the width of the display window. This value is set by the first parameter of the `size()` function. For example, the function call `size(320, 240)` sets the `width` variable to the value 320. The value of `width` defaults to 100 if `size()` is not used in a program.\",\"docUrl\":\"https://processing.org/reference/width.html\",\"examples\":\"noStroke();\\nbackground(0);\\nrect(0, 40, width, 20);\\nrect(0, 60, width/2, 20);\\n\",\"name\":null,\"type\":\"var\"},\"year\":{\"description\":\"Processing communicates with the clock on your computer. The `year()` function returns the current year as an integer (2003, 2004, 2005, etc).\",\"docUrl\":\"https://processing.org/reference/year_.html\",\"name\":null,\"parameters\":{},\"returns\":\"int\",\"syntax\":\"year()\",\"type\":\"function\"}}", "/**\n * Processing-vscode - Processing Language Support for VSCode\n *\n * @copyright (C) 2021-2025 Luke Zhang\n */\n\nimport documentation from \"./documentation-data.yml\"\nimport vscode from \"vscode\"\n\n// Add a cache for hover results to improve performance\nconst hoverCache = new Map<string, vscode.Hover>();\nconst MAX_CACHE_SIZE = 100;\n\n/**\n * Gets the hovered \"thing\" and returns it\n *\n * @param line - Contents of line\n * @param position - Position of hover\n */\nconst getHoveredItem = (line: string, position: number): string | undefined => {\n    // Skip processing if hovering over a comment\n    if (/\\/\\//u.test(line.slice(0, position))) {\n        return\n    }\n\n    // Find the start of the current symbol\n    const itemStart = (() => {\n        let index = position\n\n        for (; index >= 0 && index < line.length; index--) {\n            if (!/[a-z]|[0-9]|_/iu.test(line[index]!)) {\n                break\n            }\n        }\n\n        return index + 1\n    })()\n\n    // Find the end of the current symbol\n    const itemEnd = (() => {\n        let index = position\n\n        for (; index >= 0 && index < line.length; index++) {\n            if (!/[a-z]|[0-9]|_/iu.test(line[index]!)) {\n                break\n            }\n        }\n\n        return index\n    })()\n\n    return line.slice(itemStart, itemEnd)\n}\n\n/**\n * Creates a hover for a variable\n */\nfunction documentVariable(info: any, item: string): vscode.Hover {\n    return new vscode.Hover([\n        info.examples\n            ? `\\`\\`\\`js\n${info.type} ${item}\n\\`\\`\\`\n\\`\\`\\`java\n// Examples\n${info.examples}\n\\`\\`\\``\n            : `\\`\\`\\`js\n${info.type} ${item}\n\\`\\`\\``,\n        `${info.examples ? \"\" : `${item}\\n\\n`}${info.description}\n\n*@see* \u2014 [${info.docUrl}](${info.docUrl})\n`,\n    ])\n}\n\n/**\n * Creates a hover for a function\n */\nfunction documentFuntion(info: any, item: string): vscode.Hover {\n    const params = Object.entries(info.parameters || {}).map(([name, desc]: [string, any]) => {\n        const typeDefs = desc.indexOf ? desc.indexOf(\":\") : -1\n\n        if (typeDefs === -1) {\n            return `*@param* \\`${name}\\` \u2014 ${desc}`\n        }\n\n        const formattedDesc = `\\`${desc.slice(0, typeDefs)}\\`${desc.slice(typeDefs)}`\n\n        return `*@param* \\`${name}\\` \u2014 ${formattedDesc}`\n    })\n    const {returns} = info\n\n    return new vscode.Hover([\n        ...(info.syntax\n            ? [\n                  `\\`\\`\\`js\n${info.type} ${item}\n\\`\\`\\`\n\\`\\`\\`java\n${info.syntax}\n\\`\\`\\``,\n              ]\n            : []),\n        `${info.syntax ? \"\" : `${item}\\n\\n`}${info.description}\n\n*@see* \u2014 [${info.docUrl}](${info.docUrl})\n\n${params.join(\"\\n\\n\")}\n\n${returns ? `*@returns* \\`${returns}\\`` : \"\"}\n`,\n    ])\n}\n\n/**\n * Creates a hover for a class\n */\nfunction documentClass(info: any, item: string): vscode.Hover {\n    const params = Object.entries(info.parameters || {}).map(([name, desc]: [string, any]) => {\n        const typeDefs = desc.indexOf ? desc.indexOf(\":\") : -1\n\n        if (typeDefs === -1) {\n            return `*@param* \\`${name}\\` \u2014 ${desc}`\n        }\n\n        const formattedDesc = `\\`${desc.slice(0, typeDefs)}\\`${desc.slice(typeDefs)}`\n\n        return `*@param* \\`${name}\\` \u2014 ${formattedDesc}`\n    })\n\n    return new vscode.Hover([\n        ...(info.syntax\n            ? [\n                  `\\`\\`\\`js\n${info.type} ${item}\n\\`\\`\\`\n\\`\\`\\`java\n${info.syntax}\n\\`\\`\\``,\n              ]\n            : []),\n        `${info.syntax ? \"\" : `${item}\\n\\n`}${info.description}\n\n*@see* \u2014 [${info.docUrl}](${info.docUrl})\n\n${params.join(\"\\n\\n\")}\n`,\n    ])\n}\n\n// Register the hover provider\nvscode.languages.registerHoverProvider(\n    [{scheme: \"file\", language: \"pde\"}, {scheme: \"file\", language: \"python\"}],\n    {\n        provideHover: (document, position) => {\n            try {\n                const line = document.lineAt(position.line)\n                const item = getHoveredItem(line.text, position.character)\n\n                if (!item) {\n                    return undefined\n                }\n                \n                // Check if this hover result is already cached\n                const cacheKey = item;\n                if (hoverCache.has(cacheKey)) {\n                    return hoverCache.get(cacheKey);\n                }\n\n                // Make sure the item exists in our documentation data\n                // @ts-ignore - documentation is imported from YAML\n                const info = (documentation as any)[item];\n                if (!info) {\n                    return undefined\n                }\n                \n                let result: vscode.Hover;\n                \n                if (info.type === \"function\") {\n                    result = documentFuntion(info, item);\n                } else if (info.type === \"class\") {\n                    result = documentClass(info, item);\n                } else {\n                    // Not a function or class, therefore a variable\n                    result = documentVariable(info, item);\n                }\n                \n                // Cache the result for future use\n                if (hoverCache.size >= MAX_CACHE_SIZE) {\n                    // Remove the oldest entry if cache is full\n                    const keysIterator = hoverCache.keys();\n                    const firstKey = keysIterator.next().value;\n                    if (firstKey !== undefined) {\n                        hoverCache.delete(firstKey);\n                    }\n                }\n                hoverCache.set(cacheKey, result);\n                \n                return result;\n            } catch (error) {\n                console.error(\"Error providing hover information:\", error);\n                return undefined;\n            }\n        },\n    }\n)\n", "/**\n * Processing-vscode - Processing Language Support for VSCode\n *\n * @version 2.5.6\n * @copyright (C) 2016 - 2020 Tobiah Zarlez, 2021 - 2025 Luke Zhang\n */\n\nimport {processingCommand, shouldEnableDiagnostics} from \"./config\"\nimport isValidProcessingCommand from \"./validateCommand\"\nimport subscribeCommands from \"./commands\"\nimport subscribeDiagnostics from \"./diagnostics\"\nimport vscode from \"vscode\"\nimport { disposeRunManager, clearValidationCache } from \"./commands/run\"\nimport { statusBarManager } from \"./statusBar\"\n\n// Store disposables for cleanup on deactivation\nconst disposables: vscode.Disposable[] = []\n\nexport const activate = async (context: vscode.ExtensionContext) => {\n    const log = vscode.window.createOutputChannel(\"Processing\")\n    disposables.push(log)\n\n    log.appendLine(\"Activating Processing language extension...\")\n    \n    // Initialize status bar\n    statusBarManager.initialize();\n    disposables.push(statusBarManager);\n\n    subscribeCommands(context)\n\n    // Clear validation cache when configuration changes\n    const configListener = vscode.workspace.onDidChangeConfiguration((event) => {\n        // Check if relevant settings changed\n        if (\n            event.affectsConfiguration('processing.processingPath') ||\n            event.affectsConfiguration('processing.path') ||\n            event.affectsConfiguration('processing.py.javaPath') ||\n            event.affectsConfiguration('processing.py.jarPath')\n        ) {\n            log.appendLine(\"Processing configuration changed, clearing validation cache\");\n            clearValidationCache();\n        }\n    });\n    \n    // Add to disposables\n    disposables.push(configListener);\n\n    if (shouldEnableDiagnostics) {\n        if (await isValidProcessingCommand(processingCommand)) {\n            const pdeDiagnostics = vscode.languages.createDiagnosticCollection(\"processing\")\n\n            context.subscriptions.push(pdeDiagnostics)\n            subscribeDiagnostics(pdeDiagnostics, context, log)\n        } else {\n            log.appendLine(\n                `ERROR! The configured processing command ${processingCommand} could not be executed.`,\n            )\n            log.show()\n        }\n    }\n\n    await import(\"./documentation\")\n\n    log.appendLine(\"Processing language extension is now active!\")\n}\n\n// This method is called when your extension is deactivated\nexport const deactivate = () => {\n    // Clean up all disposables\n    disposeRunManager();\n    disposables.forEach(disposable => {\n        try {\n            disposable.dispose();\n        } catch (error) {\n            console.error('Error disposing resource:', error);\n        }\n    });\n}\n", "/**\n * Processing-vscode - Processing Language Support for VSCode\n *\n * @copyright (C) 2021-2025 Luke Zhang\n */\n\nimport vscode from \"vscode\"\n\n// Define configuration types for better type safety\nexport interface ProcessingConfig {\n    processingPath: string;\n    path?: string; // Legacy support\n    py: {\n        javaPath: string;\n        jarPath: string;\n        isEnabled: boolean;\n    };\n    docs: \"processing.org\" | \"p5js.org\" | \"py.processing.org\" | \"auto\";\n    search: \"Google\" | \"DuckDuckGo\";\n    shouldGiveDiagnostics: boolean;\n    runPathQuotes: \"auto\" | \"always\";\n    shouldSendSigint: boolean;\n}\n\n/**\n * Helper function to get config values with proper type checking\n */\nfunction getConfigValue<T>(\n    key: string, \n    defaultValue: T, \n    expectedType: string\n): T {\n    const config = vscode.workspace.getConfiguration().get<unknown>(key, defaultValue)\n    \n    if (typeof config !== expectedType) {\n        const msg = `Config option ${key} must be of type ${expectedType}`\n        vscode.window.showErrorMessage(msg)\n        return defaultValue\n    }\n    \n    return config as T\n}\n\nconst getProcessingCommand = (): string => {\n    // Look for processing.processingPath, then processing.path, then default to processing\n    const processingPath = vscode.workspace.getConfiguration().get<unknown>(\"processing.processingPath\")\n    const legacyPath = vscode.workspace.getConfiguration().get<unknown>(\"processing.path\")\n    \n    // If processingPath is defined and a string, use it\n    if (processingPath !== undefined && typeof processingPath === \"string\") {\n        return processingPath\n    }\n    \n    // If legacyPath is defined and a string, use it\n    if (legacyPath !== undefined && typeof legacyPath === \"string\") {\n        return legacyPath\n    }\n    \n    // Default to processing\n    return \"processing\"\n}\n\nconst getJavaCommand = (): string => {\n    return getConfigValue<string>(\"processing.py.javaPath\", \"java\", \"string\")\n}\n\nconst getJarPath = (): string => {\n    return getConfigValue<string>(\"processing.py.jarPath\", \"processing-py.jar\", \"string\")\n}\n\nconst getShouldEnablePython = (): boolean => {\n    return getConfigValue<boolean>(\"processing.py.isEnabled\", true, \"boolean\")\n}\n\ntype SearchEngines = \"Google\" | \"DuckDuckGo\"\ntype DocOptions = \"processing.org\" | \"p5js.org\" | \"py.processing.org\" | \"auto\"\n\nconst getSearchConfig = (): {searchEngine: SearchEngines; processingDocs: DocOptions} => {\n    const config = vscode.workspace.getConfiguration(\"processing\")\n    const processingDocs = config.get<DocOptions>(\"docs\", \"auto\")\n    const searchEngine = config.get<SearchEngines>(\"search\", \"Google\")\n\n    if (![\"processing.org\", \"p5js.org\", \"py.processing.org\", \"auto\"].includes(processingDocs)) {\n        const msg =\n            'Config option processing.docs must be \"processing.org\" | \"p5js.org\" | \"py.processing.org\" | \"auto\"'\n\n        vscode.window.showErrorMessage(msg)\n\n        return {searchEngine: \"Google\", processingDocs: \"auto\"}\n    } else if (![\"Google\", \"DuckDuckGo\"].includes(searchEngine)) {\n        const msg = 'Config option processing.search must be \"Google\" | \"DuckDuckGo\"'\n\n        vscode.window.showErrorMessage(msg)\n\n        return {searchEngine: \"Google\", processingDocs: \"auto\"}\n    }\n\n    return {\n        searchEngine,\n        processingDocs,\n    }\n}\n\nconst getShouldEnableDiagnostics = (): boolean => {\n    return getConfigValue<boolean>(\"processing.shouldGiveDiagnostics\", true, \"boolean\")\n}\n\nconst getQuoteEnablement = (): boolean => {\n    const shouldQuotePath = vscode.workspace\n        .getConfiguration()\n        .get<\"always\" | \"auto\">(\"processing.runPathQuotes\", \"auto\")\n\n    if (shouldQuotePath !== \"always\" && shouldQuotePath !== \"auto\") {\n        const msg = 'Config option processing.runPathQuotes should be \"auto\" or \"always\"'\n\n        vscode.window.showErrorMessage(msg)\n\n        return false\n    }\n\n    return shouldQuotePath === \"always\"\n}\n\nconst getShouldSendSigint = (): boolean => {\n    return getConfigValue<boolean>(\"processing.shouldSendSigint\", false, \"boolean\")\n}\n\nexport let processingCommand = getProcessingCommand()\nexport let javaCommand = getJavaCommand()\nexport let jarPath = getJarPath()\nexport let shouldEnablePython = getShouldEnablePython()\nexport let searchConfig = getSearchConfig()\nexport let shouldEnableDiagnostics = getShouldEnableDiagnostics()\nexport let shouldAlwaysQuotePath = getQuoteEnablement()\nexport let shouldSendSigint = getShouldSendSigint()\n\nvscode.workspace.onDidChangeConfiguration(() => {\n    processingCommand = getProcessingCommand()\n    javaCommand = getJavaCommand()\n    jarPath = getJarPath()\n    shouldEnablePython = getShouldEnablePython()\n    searchConfig = getSearchConfig()\n    shouldEnableDiagnostics = getShouldEnableDiagnostics()\n    shouldAlwaysQuotePath = getQuoteEnablement()\n    shouldSendSigint = getShouldSendSigint()\n})\n", "/**\n * Processing-vscode - Processing Language Support for VSCode\n *\n * @copyright (C) 2021-2025 Luke Zhang\n */\nimport childProcess from \"child_process\"\nimport vscode from \"vscode\"\n\n/**\n * Check if the processing command is valid with improved timeout handling\n * @param cmd Processing command to validate\n * @param timeoutMs Timeout in milliseconds\n * @returns Promise resolving to boolean indicating if command is valid\n */\nexport const isValidProcessingCommand = async (\n    cmd: string, \n    timeoutMs: number = 5000\n): Promise<boolean> => {\n    try {\n        const result = await Promise.race([\n            new Promise<string | false>((resolve) => {\n                const processingProcess = childProcess.spawn(cmd, [\"--help\"])\n                let output = \"\"\n\n                processingProcess.stderr.on(\"data\", (data) => (output += data.toString()))\n                processingProcess.stdout.on(\"data\", (data) => (output += data.toString()))\n\n                processingProcess.on(\"exit\", () => {\n                    resolve(output.trim())\n                })\n\n                processingProcess.on(\"error\", () => resolve(false))\n            }),\n            new Promise<false>((resolve) => {\n                setTimeout(() => {\n                    vscode.window.showWarningMessage(\n                        `Command validation timed out after ${timeoutMs}ms: ${cmd}`\n                    );\n                    resolve(false);\n                }, timeoutMs);\n            })\n        ]);\n\n        return typeof result === \"boolean\"\n            ? result\n            : /Command line edition for Processing/u.test(result)\n    } catch (error) {\n        console.error(\"Error validating processing command:\", error);\n        return false;\n    }\n}\n\nexport default isValidProcessingCommand\n", "/**\n * Processing-vscode - Processing Language Support for VSCode\n *\n * @copyright (C) 2016 - 2020 Tobiah Zarlez, 2021 Luke Zhang\n */\n\nimport type {Documentation} from \"../types\"\nimport documentation from \"../documentation-data.yml\"\nimport {searchConfig} from \"../config\"\nimport vscode from \"vscode\"\n\nconst enum Urls {\n    ProcessingorgDocs = \"https://processing.org/reference/\",\n    ProcessingorgSearchGoogle = \"https://www.google.com/search?as_sitesearch=processing.org&as_q=\",\n    ProcessingorgSearchDuckDuckGo = \"https://duckduckgo.com/?q=!processing+%5C\",\n    P5jsDocs = \"https://p5js.org/reference/\",\n    P5jsSearchGoogle = \"https://www.google.com/search?as_sitesearch=p5js.org&as_q=\",\n    P5jsSearchDuckDuckGo = \"https://duckduckgo.com/?q=!p5+\",\n    PyDocs = \"https://py.processing.org/reference/\",\n    PySearchGoogle = \"https://www.google.com/search?as_sitesearch=py.processing.org&as_q=\",\n    PySearchDuckDuckGo = \"https://duckduckgo.com/?q=%5Csite%3Apy.processing.org+\",\n}\n\nexport const openURL = async (searchBase?: string, url?: string): Promise<void> => {\n    if (searchBase === \"open\") {\n        await vscode.env.openExternal(vscode.Uri.parse(url as string))\n    } else {\n        const {processingDocs, searchEngine} = searchConfig\n        const searchUrl = ((): string => {\n            let directDocUrl: string | undefined\n\n            if (searchBase === \"docs\") {\n                const {\n                    window: {activeTextEditor},\n                } = vscode\n                const languageId = activeTextEditor?.document.languageId\n\n                if (!url) {\n                    if (processingDocs === \"p5js.org\") {\n                        return Urls.P5jsDocs\n                    } else if (\n                        (processingDocs === \"auto\" && languageId === \"pyton\") ||\n                        processingDocs === \"py.processing.org\"\n                    ) {\n                        return Urls.PyDocs\n                    }\n\n                    // (processingDocs === \"auto\" && languageId === \"pde\")\n                    // || processingDocs === \"processing.org\"\n                    return Urls.ProcessingorgDocs\n                } else if (\n                    // Look for entry directly in documentation data\n                    (processingDocs === \"auto\" || processingDocs === \"processing.org\") &&\n                    languageId === \"pde\" &&\n                    (directDocUrl = (documentation as Documentation)[url]?.docUrl) !== undefined\n                ) {\n                    return directDocUrl\n                } else if (searchEngine === \"DuckDuckGo\") {\n                    // Search Engine == \"google\"\n                    if (processingDocs === \"p5js.org\") {\n                        return `${Urls.P5jsSearchDuckDuckGo}${url}`\n                    } else if (\n                        (processingDocs === \"auto\" && languageId === \"pyton\") ||\n                        processingDocs === \"py.processing.org\"\n                    ) {\n                        return `${Urls.PySearchDuckDuckGo}${url}`\n                    }\n\n                    // (processingDocs === \"auto\" && languageId === \"pde\")\n                    // || processingDocs === \"processing.org\"\n                    return `${Urls.ProcessingorgSearchDuckDuckGo}${url}`\n                }\n\n                // Search Engine == \"google\"\n                if (processingDocs === \"p5js.org\") {\n                    return `${Urls.P5jsSearchGoogle}${url}`\n                } else if (\n                    (processingDocs === \"auto\" && languageId === \"pyton\") ||\n                    processingDocs === \"py.processing.org\"\n                ) {\n                    return `${Urls.PySearchGoogle}${url}`\n                }\n\n                // (processingDocs === \"auto\" && languageId === \"pde\")\n                // || processingDocs === \"processing.org\"\n                return `${Urls.ProcessingorgSearchGoogle}${url}`\n            }\n\n            return searchBase ?? \"\"\n        })()\n\n        await vscode.env.openExternal(vscode.Uri.parse(searchUrl))\n    }\n\n    return\n}\n\n// Slice and Trim\nexport const prepareInput = (input: string, start: number, end: number) => {\n    // input is the whole line, part of which is selected by the user (defined by star/end)\n\n    if (start >= end) {\n        return \"\"\n    }\n\n    // Everything looks good by this point, so time to open a web browser!\n    return input.slice(start, end).trim()\n}\n\nexport const openProcessingDocs = (input: string, start: number, end: number) => {\n    // Use the node module \"opn\" to open a web browser\n    openURL(\"docs\", prepareInput(input, start, end))\n}\n", "/**\n * Processing-vscode - Processing Language Support for VSCode\n *\n * @copyright (C) 2021 Luke Zhang\n */\n\nexport * as search from \"./search\"\n\nexport const isValidProcessingProject = (path?: string): boolean =>\n    path !== undefined && /^[/_$a-z][/\\w$]*$/iu.test(path)\n", "/**\n * Processing-vscode - Processing Language Support for VSCode\n *\n * @copyright (C) 2016 - 2020 Tobiah Zarlez, 2021-2025 Luke Zhang\n */\n\nimport {search} from \"../utils\"\nimport vscode from \"vscode\"\n\nconst openDocErrorMessage = async (str: string) => {\n    const item = await vscode.window.showErrorMessage(`Error: ${str}`, \"Open Docs\")\n\n    if (item === \"Open Docs\") {\n        search.openURL(\"docs\")\n    }\n}\n\nexport const openDocumentation = () => {\n    search.openURL(\n        \"https://github.com/Luke-zhang-04/processing-vscode#processing-for-visual-studio-code\",\n    )\n}\n\nexport const openProcessingDocs = (textEditor: vscode.TextEditor) => {\n    // selection[0] is the start, and selection[1] is the end\n    const {selection} = textEditor\n\n    if (!selection.isSingleLine) {\n        openDocErrorMessage(\"Multiple lines selected, please select a class or function.\")\n\n        return\n    }\n\n    let range = undefined\n\n    if (selection.isEmpty) {\n        // selection is empty, get any word at cursor\n        range = textEditor.document.getWordRangeAtPosition(selection.active)\n    } else {\n        // selection is not empty, get text from it\n        range = new vscode.Range(selection.start, selection.end)\n    }\n\n    if (range === undefined) {\n        openDocErrorMessage(\n            'Nothing is selected. Please select a class, or use \"Search Documentation\" instead!',\n        )\n\n        return\n    }\n\n    search.openProcessingDocs(\n        textEditor.document.lineAt(range.start.line).text,\n        range.start.character,\n        range.end.character,\n    )\n}\n\nexport const searchProcessingDocs = () => {\n    vscode.window\n        .showInputBox({\n            prompt: \"Search Processing Website:\",\n        })\n        .then((result: string | undefined) => {\n            if (result !== undefined) {\n                // Use the node module \"open\" to open a web browser\n                search.openURL(\"docs\", result)\n            }\n        })\n}\n", "/**\n * Processing-vscode - Processing Language Support for VSCode\n *\n * @copyright (C) 2021-2025 Luke Zhang\n */\n\nimport {\n    jarPath,\n    javaCommand,\n    processingCommand,\n    shouldAlwaysQuotePath,\n    shouldSendSigint,\n} from \"../config\"\nimport path, {dirname} from \"path\"\nimport {isValidProcessingProject} from \"../utils\"\nimport vscode from \"vscode\"\n\n// Cache validation results to avoid checking on every run, but allow rechecking when configs change\nlet validationCache: Record<string, boolean> = {};\n\n// Function to clear the validation cache when configurations change\nexport const clearValidationCache = (): void => {\n    validationCache = {};\n    console.log('Validation cache cleared due to configuration change');\n};\n\n/**\n * Helper function to properly handle paths with spaces in different operating systems\n * @param command - The command path\n * @returns The properly quoted or escaped command path\n */\nconst formatCommandPath = (command: string): string => {\n    // If the command doesn't have spaces, return as is\n    if (!command.includes(' ')) {\n        return command;\n    }\n    \n    // Detect platform - Windows uses backslashes, others use forward slashes\n    const isWindows = process.platform === 'win32' || command.includes('\\\\');\n    \n    // If the command already contains quotes, don't add more\n    if (command.includes('\"')) {\n        return command;\n    }\n    \n    // For any path with spaces (Windows or Linux), wrap in quotes\n    return `\"${command}\"`;\n}\n\n// Helper function to validate required tools with user-friendly error messages\nconst validateTool = async (command: string, toolName: string, configField: string): Promise<boolean> => {\n    // Create a cache key based on the command and toolName\n    const cacheKey = `${toolName}:${command}`;\n    \n    // If we already validated this command, return the cached result\n    if (validationCache[cacheKey] !== undefined) {\n        return validationCache[cacheKey];\n    }\n    \n    try {\n        // We'll validate the command by appending 'cli --help' for Processing\n        // or just '--help' for other commands like Java\n        const isProcessing = toolName === \"Processing\";\n        \n        // Handle spaces in the command path\n        const baseCommand = formatCommandPath(command);\n            \n        const validatedCommand = isProcessing ? `${baseCommand} cli` : baseCommand;\n        \n        await vscode.window.withProgress({\n            location: vscode.ProgressLocation.Notification,\n            title: `Checking for ${toolName}...`,\n            cancellable: false\n        }, async () => {\n            let cmd;\n            let args;\n            \n            if (validatedCommand.includes(' ')) {\n                // We need to be careful with paths that contain spaces\n                // If the command path has quotes, honor them\n                if (validatedCommand.includes('\"')) {\n                    const match = validatedCommand.match(/\"([^\"]+)\"\\s+(.*)/);\n                    if (match) {\n                        cmd = match[1]; // The part in quotes\n                        args = (match[2] || '').split(' ').concat(['--help']);\n                    } else {\n                        // Fallback to simple split if quote parsing fails\n                        const parts = validatedCommand.split(' ');\n                        cmd = parts[0];\n                        args = parts.slice(1).concat(['--help']);\n                    }\n                } else {\n                    // Simple space-separated command\n                    const parts = validatedCommand.split(' ');\n                    cmd = parts[0];\n                    args = parts.slice(1).concat(['--help']);\n                }\n            } else {\n                // No spaces, simple command\n                cmd = validatedCommand;\n                args = ['--help'];\n            }\n                \n            const childProcess = require('child_process');\n            const proc = childProcess.spawn(cmd, args, {\n                shell: true, // Use shell for better cross-platform compatibility\n            });\n            \n            return new Promise<void>((resolve, reject) => {\n                proc.on('error', (err: Error) => {\n                    console.error(`Error validating tool: ${err.message}`);\n                    reject(err);\n                });\n                \n                // Listen for some output to validate command works\n                let output = '';\n                proc.stdout.on('data', (data: Buffer) => {\n                    output += data.toString();\n                    // If we get any output, consider it a success\n                    if (output.length > 0) {\n                        resolve();\n                    }\n                });\n                \n                proc.stderr.on('data', (data: Buffer) => {\n                    output += data.toString();\n                    // Even stderr can be valid for processing help output\n                    if (output.includes('processing') || output.includes('Usage')) {\n                        resolve();\n                    }\n                });\n                \n                proc.on('exit', (code: number) => {\n                    // Consider any output a success even with non-zero exit code\n                    // as --help might return non-zero but still be valid\n                    if (output.length > 0) {\n                        resolve();\n                    } else if (code !== 0) {\n                        reject(new Error(`Process exited with code ${code}`));\n                    } else {\n                        resolve();\n                    }\n                });\n                \n                // Only wait a short time to check if the process starts\n                setTimeout(() => {\n                    if (output.length > 0) {\n                        resolve();\n                    } else {\n                        // Give it a chance - don't reject immediately\n                        // This helps with slow-starting processes\n                        resolve();\n                    }\n                }, 1000);\n            });\n        });\n        \n        // Cache the successful result\n        validationCache[cacheKey] = true;\n        return true;\n    } catch (error) {\n        console.error(`Tool validation failed: ${error}`);\n        const message = `${toolName} not found. Please check your ${configField} setting.`;\n        const configure = 'Configure';\n        const response = await vscode.window.showErrorMessage(message, configure);\n        \n        if (response === configure) {\n            await vscode.commands.executeCommand('workbench.action.openSettings', configField);\n        }\n        \n        // Cache the failed result\n        validationCache[cacheKey] = false;\n        return false;\n    }\n};\n\nconst pythonUtils = {\n    getProjectFilename: ({fileName}: vscode.TextDocument): string =>\n        shouldAlwaysQuotePath || / |\\\\/u.test(fileName) ? `\"${fileName}\"` : fileName,\n\n    getJarFilename: (): string =>\n        shouldAlwaysQuotePath || / |\\\\/u.test(jarPath) ? `\"${jarPath}\"` : jarPath,\n}\n\nclass RunManager {\n    private _terminal?: vscode.Terminal = undefined\n    private _pythonTerminal?: vscode.Terminal = undefined\n    \n    // Add dispose method to properly clean up resources\n    public dispose(): void {\n        if (this._terminal) {\n            this._terminal.dispose();\n        }\n        if (this._pythonTerminal) {\n            this._pythonTerminal.dispose();\n        }\n    }\n\n    public run = (mode?: \"py\" | \"java\"): void => {\n        const {activeTextEditor: editor} = vscode.window\n\n        if (!editor) {\n            vscode.window.showErrorMessage(\"No active text editor found\")\n            return\n        }\n\n        // Before running, save the document to ensure latest changes are included\n        if (editor.document.isDirty) {\n            editor.document.save().then(() => {\n                this._determineAndRun(editor, mode);\n            });\n        } else {\n            this._determineAndRun(editor, mode);\n        }\n    }\n    \n    // Extract mode determination logic to its own method\n    private _determineAndRun(editor: vscode.TextEditor, mode?: \"py\" | \"java\"): void {\n        const processingMode = (() => {\n            if (mode) {\n                return mode\n            }\n\n            if (/\\.pde$/u.test(editor.document.fileName)) {\n                return \"java\"\n            } else if (editor.document.languageId === \"python\") {\n                return \"py\"\n            }\n\n            return\n        })()\n\n        if (processingMode === \"java\") {\n            // Validate processing command before attempting to run\n            validateTool(processingCommand, \"Processing\", \"processing.processingPath\")\n                .then(isValid => {\n                    if (isValid) {\n                        this._runJavaMode(editor);\n                    }\n                });\n        } else if (processingMode === \"py\") {\n            // Validate Java and Processing Python jar before attempting to run\n            validateTool(javaCommand, \"Java\", \"processing.py.javaPath\")\n                .then(isJavaValid => {\n                    if (isJavaValid) {\n                        // Check if jar file exists\n                        const fs = require('fs');\n                        if (!fs.existsSync(jarPath)) {\n                            const message = `Processing Python JAR file not found at: ${jarPath}`;\n                            const configure = 'Configure';\n                            vscode.window.showErrorMessage(message, configure).then(response => {\n                                if (response === configure) {\n                                    vscode.commands.executeCommand('workbench.action.openSettings', 'processing.py.jarPath');\n                                }\n                            });\n                            return;\n                        }\n                        this._runPythonMode(editor);\n                    }\n                });\n        } else {\n            vscode.window.showErrorMessage(\"Could not determine processing mode.\")\n        }\n    }\n\n    /**\n     * This monstrosity searches for an existing terminal if it exists or creates a new one and returns it.\n     *\n     * @param terminalName - Key of terminal in class\n     * @param terminalDisplayName - Display name of terminal\n     * @returns Vscode terminal\n     */\n    private _getTerminal = (\n        terminalName: \"_terminal\" | \"_pythonTerminal\",\n        terminalDisplayName: string,\n    ): vscode.Terminal =>\n        (this[terminalName] !== undefined && this[terminalName]?.exitStatus === undefined // Terminal exists\n            ? vscode.window.terminals.find((terminal) => terminal.name === terminalDisplayName) // Find existing terminal\n            : (this[terminalName] = vscode.window.createTerminal(terminalDisplayName))) ?? // Terminal doesn't exist; create a new terminal\n        (this[terminalName] = vscode.window.createTerminal(terminalDisplayName)) // Somehow couldn't find an existing terminal\n\n    /**\n     * Runs the current project in Java mode\n     *\n     * @param editor - Vscode text editor\n     */\n    private _runJavaMode = (editor: vscode.TextEditor): void => {\n        const terminalName = \"_terminal\"\n        const hasTerminal =\n            this[terminalName] !== undefined && this[terminalName]?.exitStatus === undefined\n        const currentTerminal = this._getTerminal(terminalName, \"Processing\")\n\n        let sketchName = dirname(editor.document.fileName)\n        const isValidProjectName = isValidProcessingProject(sketchName.split(path.sep).pop())\n        const shouldQuotePath = shouldAlwaysQuotePath || / |\\\\/u.test(sketchName)\n\n        if (shouldQuotePath) {\n            sketchName = `\"${sketchName}\"`\n        }\n\n        currentTerminal.show()\n\n        if (!isValidProjectName) {\n            vscode.window.showWarningMessage(\n                \"Warning: Processing project names must be valid Java variable names. Your program may fail to run properly.\",\n            )\n        }\n\n        // Properly format the processing command path for the current OS\n        const processCmd = formatCommandPath(processingCommand);\n        \n        // Create the final command with cli separately added\n        const fullCommand = `${processCmd} cli --sketch=${sketchName} --run`;\n        \n        console.log(`Running processing command: ${fullCommand}`);\n        \n        // If file is a processing project file\n        if (hasTerminal && shouldSendSigint) {\n            // First send SIGINT to stop any running process\n            currentTerminal.sendText(\"\\x03\", false);\n            // Then send the command separately\n            currentTerminal.sendText(fullCommand, true);\n        } else {\n            // No need to stop a running process, send the command directly\n            currentTerminal.sendText(fullCommand, true);\n        }\n    }\n\n    /**\n     * Runs the current project in Python mode\n     *\n     * @param editor - Vscode text editor\n     */\n    private _runPythonMode = (editor: vscode.TextEditor): void => {\n        const terminalName = \"_terminal\"\n        const hasTerminal =\n            this[terminalName] !== undefined && this[terminalName]?.exitStatus === undefined\n        const currentTerminal = this._getTerminal(terminalName, \"Processing-py\")\n\n        currentTerminal.show()\n\n        // Make sure the java command is properly quoted if it contains spaces\n        const javaCmd = formatCommandPath(javaCommand);\n        \n        // If file is a processing project file\n        if (hasTerminal && shouldSendSigint) {\n            // First send SIGINT to stop any running process\n            currentTerminal.sendText(\"\\x03\", false);\n            // Then send the command separately\n            const execCommand = `${javaCmd} -jar ${pythonUtils.getJarFilename()} ${pythonUtils.getProjectFilename(\n                editor.document,\n            )}`;\n            // Use a separate command to execute the command after SIGINT\n            currentTerminal.sendText(execCommand, true);\n        } else {\n            // No need to stop a running process, send the command directly\n            currentTerminal.sendText(`${javaCmd} -jar ${pythonUtils.getJarFilename()} ${pythonUtils.getProjectFilename(\n                editor.document,\n            )}`);\n        }\n    }\n}\n\nconst runManager = new RunManager()\n\n/**\n * Export the run function and the manager instance for proper disposal\n */\nexport const {run} = runManager\nexport const disposeRunManager = () => runManager.dispose();\n", "/**\n * Processing-vscode - Processing Language Support for VSCode\n *\n * @copyright (C) 2021-2025 Luke Zhang\n */\n\nimport {openDocumentation, openProcessingDocs, searchProcessingDocs} from \"./search\"\nimport {run as runProject} from \"./run\"\nimport {shouldEnablePython} from \"../config\"\nimport vscode from \"vscode\"\n\nexport const subscribeCommands = (context: vscode.ExtensionContext): void => {\n    context.subscriptions.push(vscode.commands.registerCommand(\"processing.Run\", runProject))\n\n    if (shouldEnablePython) {\n        context.subscriptions.push(\n            vscode.commands.registerCommand(\"processing.RunPy\", () => runProject(\"py\")),\n        )\n    }\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand(\"processing.RunJava\", () => runProject(\"java\")),\n    )\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand(\n            \"processing.OpenExtensionDocumentation\",\n            openDocumentation,\n        ),\n    )\n\n    // Open Processing Documentation, when you already have something you want to search selected\n    context.subscriptions.push(\n        vscode.commands.registerTextEditorCommand(\"processing.OpenDocs\", openProcessingDocs),\n    )\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand(\"processing.SearchWebsite\", searchProcessingDocs),\n    )\n}\n\nexport default subscribeCommands\n", "/**\n * Processing-vscode - Processing Language Support for VSCode\n *\n * @copyright (C) 2021-2025 Luke Zhang\n */\n\nimport path, {dirname} from \"path\"\nimport childProcess from \"child_process\"\nimport crypto from \"crypto\"\nimport {isValidProcessingProject} from \"./utils\"\nimport {processingCommand} from \"./config\"\nimport vscode from \"vscode\"\n\nlet oldHash = \"\"\n// Add a debounce interval to prevent excessive diagnostic runs\nconst DIAGNOSTIC_DEBOUNCE_MS = 1000\nlet diagnosticTimeout: NodeJS.Timeout | null = null\n\nconst hash = (content: {toString: () => string}) =>\n    crypto.createHash(\"sha384\").update(content.toString()).digest(\"hex\")\n\nconst createDiagnostic = (\n    lineOfText: vscode.TextLine,\n    lineIndex: number,\n    charIndex: number,\n    message: string,\n): vscode.Diagnostic => {\n    const range = new vscode.Range(lineIndex, charIndex, lineIndex, lineOfText.text.length)\n\n    const diagnostic = new vscode.Diagnostic(range, message, vscode.DiagnosticSeverity.Error)\n\n    diagnostic.code = \"processing\"\n\n    return diagnostic\n}\n\n// Add a timeout promise to prevent diagnostics from hanging\nconst withTimeout = <T>(promise: Promise<T>, timeoutMs: number, errorMessage: string): Promise<T> => {\n    const timeout = new Promise<never>((_, reject) => {\n        setTimeout(() => reject(new Error(errorMessage)), timeoutMs);\n    });\n    return Promise.race([promise, timeout]);\n};\n\nconst refreshDiagnostics = async (\n    diagnostics: vscode.DiagnosticCollection,\n    doc: vscode.TextDocument,\n    log: vscode.OutputChannel,\n): Promise<void> => {\n    try {\n        // Clear existing diagnostics first\n        diagnostics.delete(doc.uri);\n        \n        const foundDiagnostics: vscode.Diagnostic[] = []\n        let sketchName = doc.fileName.includes(\".pde\") ? dirname(doc.fileName) : undefined\n\n        if (\n            sketchName &&\n            doc.getText() &&\n            isValidProcessingProject(sketchName.split(path.sep).pop())\n        ) {\n            const shouldQuotePath = sketchName.includes(\" \")\n\n            if (shouldQuotePath) {\n                sketchName = `\"${sketchName}\"`\n            }\n\n            console.log({sketchName})\n            const diagnostic = await withTimeout(\n                new Promise<string[]>((resolve) => {\n                    const processingProcess = childProcess.spawn(processingCommand, [\n                        `--sketch=${sketchName}`,\n                        \"--build\",\n                    ])\n\n                    const problems: string[] = []\n\n                    const handleOutput = (data: Buffer): void => {\n                        for (const line of data.toString().split(\"\\n\")) {\n                            if (/(:[0-9]+){4}:/gu.test(line)) {\n                                problems.push(line)\n                            }\n                        }\n                    }\n\n                    processingProcess.stderr.on(\"data\", handleOutput)\n                    processingProcess.stdout.on(\"data\", handleOutput)\n\n                    processingProcess.on(\"exit\", () => {\n                        resolve(problems)\n                    })\n                }),\n                5000,\n                \"Processing diagnostics timed out\"\n            ).catch(() => undefined)\n\n            if (!diagnostic) {\n                return\n            }\n\n            if (diagnostic.length > 0) {\n                log.appendLine(diagnostic.toString())\n            }\n\n            for (const result of diagnostic) {\n                const splitResult = result.split(\":\")\n                const lineIndex = Number(splitResult[1]) - 1\n                const charIndex = Number(splitResult[2]) - 2\n\n                foundDiagnostics.push(\n                    createDiagnostic(\n                        doc.lineAt(lineIndex),\n                        lineIndex > 0 ? lineIndex : 0,\n                        charIndex > 0 ? charIndex : 0,\n                        splitResult.slice(5).join(\"\").trim(),\n                    ),\n                )\n            }\n\n            diagnostics.set(doc.uri, foundDiagnostics)\n        }\n    } catch (error) {\n        log.appendLine(`Error in refreshDiagnostics: ${error instanceof Error ? error.message : String(error)}`)\n    }\n}\n\nexport const subscribeDiagnostics = (\n    diagnostics: vscode.DiagnosticCollection,\n    context: vscode.ExtensionContext,\n    log: vscode.OutputChannel,\n): void => {\n    let isRunning = false\n    let shouldRunAgain = false\n\n    const runDiagnostics = async (\n        editor: vscode.TextEditor | vscode.TextDocumentChangeEvent,\n    ): Promise<void> => {\n        if (diagnosticTimeout) {\n            clearTimeout(diagnosticTimeout)\n        }\n\n        diagnosticTimeout = setTimeout(async () => {\n            if (isRunning) {\n                shouldRunAgain = true\n            } else {\n                isRunning = true\n\n                oldHash = `${editor.document.fileName} = ${hash(editor.document.getText())}`\n\n                await refreshDiagnostics(diagnostics, editor.document, log)\n\n                let newHash = `${editor.document.fileName} = ${hash(editor.document.getText())}`\n\n                while (shouldRunAgain || oldHash !== newHash) {\n                    shouldRunAgain = false\n                    oldHash = newHash\n\n                    await refreshDiagnostics(diagnostics, editor.document, log)\n\n                    newHash = `${editor.document.fileName} = ${hash(editor.document.getText())}`\n\n                    if (!shouldRunAgain || oldHash === newHash) {\n                        break\n                    }\n                }\n\n                await refreshDiagnostics(diagnostics, editor.document, log)\n\n                isRunning = false\n            }\n        }, DIAGNOSTIC_DEBOUNCE_MS)\n    }\n\n    if (vscode.window.activeTextEditor) {\n        const editor = vscode.window.activeTextEditor\n\n        runDiagnostics(editor)\n    }\n\n    context.subscriptions.push(\n        vscode.window.onDidChangeActiveTextEditor((editor) => {\n            if (editor && /\\.pde/u.test(editor.document.fileName)) {\n                runDiagnostics(editor)\n            }\n        }),\n    )\n\n    context.subscriptions.push(\n        vscode.workspace.onDidChangeTextDocument((editor) => {\n            if (/\\.pde/u.test(editor.document.fileName)) {\n                if (editor.contentChanges.length > 0) {\n                    runDiagnostics(editor)\n                }\n            }\n        }),\n    )\n\n    context.subscriptions.push(\n        vscode.workspace.onDidCloseTextDocument((doc) => diagnostics.delete(doc.uri)),\n    )\n}\n\nexport default subscribeDiagnostics\n", "/**\n * Processing-vscode - Processing Language Support for VSCode\n *\n * @copyright (C) 2021-2025 Luke Zhang\n */\n\nimport vscode from \"vscode\"\nimport { shouldEnablePython } from \"./config\"\n\nclass StatusBarManager {\n    private processingStatusBarItem: vscode.StatusBarItem\n    private disposables: vscode.Disposable[] = []\n\n    constructor() {\n        this.processingStatusBarItem = vscode.window.createStatusBarItem(\n            vscode.StatusBarAlignment.Right,\n            100\n        )\n        this.processingStatusBarItem.command = 'processing.Run'\n        this.processingStatusBarItem.tooltip = 'Run Processing Sketch'\n\n        // Listen for active editor changes\n        this.disposables.push(\n            vscode.window.onDidChangeActiveTextEditor(this.updateStatusBar.bind(this))\n        )\n    }\n\n    public initialize(): void {\n        // Initial update\n        this.updateStatusBar(vscode.window.activeTextEditor)\n    }\n\n    public updateStatusBar(editor: vscode.TextEditor | undefined): void {\n        if (!editor) {\n            this.hide()\n            return\n        }\n\n        if (editor.document.languageId === 'pde') {\n            this.show('java')\n        } else if (editor.document.languageId === 'python' && shouldEnablePython) {\n            this.show('python')\n        } else {\n            this.hide()\n        }\n    }\n\n    private show(mode: 'java' | 'python'): void {\n        if (mode === 'java') {\n            this.processingStatusBarItem.text = '$(play) Processing Java'\n            this.processingStatusBarItem.backgroundColor = new vscode.ThemeColor('statusBarItem.warningBackground')\n        } else {\n            this.processingStatusBarItem.text = '$(play) Processing Python'\n            this.processingStatusBarItem.backgroundColor = new vscode.ThemeColor('statusBarItem.infoBackground')\n        }\n        \n        this.processingStatusBarItem.show()\n    }\n\n    private hide(): void {\n        this.processingStatusBarItem.hide()\n    }\n\n    public dispose(): void {\n        this.processingStatusBarItem.dispose()\n        this.disposables.forEach(d => d.dispose())\n    }\n}\n\nexport const statusBarManager = new StatusBarManager()"],
  "mappings": "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",
  "names": ["exports", "module", "vscode", "import_documentation_data", "import_vscode", "documentation", "vscode", "import_vscode", "childProcess", "vscode", "import_vscode", "vscode", "documentation", "path", "import_vscode", "vscode", "openProcessingDocs", "import_vscode", "vscode", "childProcess", "path", "import_vscode", "vscode", "openProcessingDocs", "import_path", "import_child_process", "import_vscode", "crypto", "vscode", "path", "childProcess", "import_vscode", "import_vscode", "vscode", "vscode"]
}
